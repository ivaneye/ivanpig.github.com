<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>曾经不知你好</title>
    <link href="http://liyouhai.com/rss.xml" rel="self"/>
    <link href="http://liyouhai.com/"/>
    <updated>2014-11-28T23:30:10+08:00</updated>
    <id>http://liyouhai.com/</id>
    <author>
        <name>liyouhai</name>
        <email>liyouhai@vip.qq.com</email>
    </author>

    
    <entry>
        <title>Sample2</title>
        <link href="http://liyouhai.com/cat1/test.html"/>
        <updated>2014-11-28T00:00:00+08:00</updated>
        <id>http://liyouhai.com//cat1/test</id>
        <content type="html">&lt;h1&gt;Sample2&lt;/h1&gt;

&lt;p&gt;Sample2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;
(println &quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;
</content>
        <summary type="html">&lt;h1&gt;Sample2&lt;/h1&gt;

&lt;p&gt;Sample2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;
(println &quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure教程:命名空间</title>
        <link href="http://liyouhai.com/clojure/clojure%25e6%2595%2599%25e7%25a8%258b%25e5%2591%25bd%25e5%2590%258d%25e7%25a9%25ba%25e9%2597%25b4-4.html"/>
        <updated>2014-08-29T13:08:53+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e6%95%99%e7%a8%8b%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4-4</id>
        <content type="html">&lt;style type=&quot;text/css&quot;&gt;
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {&lt;br /&gt;
  margin: 0; padding: 0; vertical-align: baseline; border: none; }&lt;br /&gt;
table.sourceCode { width: 100%; line-height: 100%; background-color: #f8f8f8; }&lt;br /&gt;
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }&lt;br /&gt;
td.sourceCode { padding-left: 5px; }&lt;br /&gt;
pre, code { background-color: #f8f8f8; }&lt;br /&gt;
code &gt; span.kw { color: #204a87; font-weight: bold; }&lt;br /&gt;
code &gt; span.dt { color: #204a87; }&lt;br /&gt;
code &gt; span.dv { color: #0000cf; }&lt;br /&gt;
code &gt; span.bn { color: #0000cf; }&lt;br /&gt;
code &gt; span.fl { color: #0000cf; }&lt;br /&gt;
code &gt; span.ch { color: #4e9a06; }&lt;br /&gt;
code &gt; span.st { color: #4e9a06; }&lt;br /&gt;
code &gt; span.co { color: #8f5902; font-style: italic; }&lt;br /&gt;
code &gt; span.ot { color: #8f5902; }&lt;br /&gt;
code &gt; span.al { color: #ef2929; }&lt;br /&gt;
code &gt; span.fu { color: #000000; }&lt;br /&gt;
code &gt; span.er { font-weight: bold; }&lt;br /&gt;
  &lt;/style&gt;
&lt;style type=&quot;text/css&quot;&gt;
code {&lt;br /&gt;
background-color: #f7f7f9;&lt;br /&gt;
border: none;&lt;br /&gt;
padding: 2px 4px;&lt;br /&gt;
padding: 0.125rem 0.25rem;&lt;br /&gt;
}&lt;br /&gt;
pre.sourceCode{&lt;br /&gt;
border : 1px solid #e1e1e8;&lt;br /&gt;
}&lt;br /&gt;
&lt;/style&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div id=&quot;side-navigation&quot;&gt;
&lt;div id=&quot;TOC&quot; class=&quot;bs-sidebar hidden-print&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#版本&quot;&gt;版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#概述&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#定义一个命名空间&quot;&gt;定义一个命名空间&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#require&quot;&gt;:require&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#refer选项&quot;&gt;:refer选项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#import&quot;&gt;:import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#当前命名空间&quot;&gt;当前命名空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#refer-clojure&quot;&gt;:refer-clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use&quot;&gt;:use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#文档与元数据&quot;&gt;文档与元数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何在repl里使用其它命名空间的函数&quot;&gt;如何在REPL里使用其它命名空间的函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#命名空间和编译&quot;&gt;命名空间和编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#私有vars&quot;&gt;私有Vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常量vars&quot;&gt;常量Vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何通过名称来查找和执行函数&quot;&gt;如何通过名称来查找和执行函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#编译异常&quot;&gt;编译异常&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#classnotfoundexception&quot;&gt;ClassNotFoundException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#compilerexception-java.lang.runtimeexception-no-such-var&quot;&gt;CompilerException java.lang.RuntimeException: No such var&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;col-md-9&quot;&gt;
&lt;div id=&quot;content&quot;&gt;
&lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot;&gt;版本&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/language/namespaces.html&quot;&gt;Clojure Namespaces and Vars&lt;/a&gt; 本文涵盖如下内容: + Clojure命名空间和var概述 + 如何定义命名空间 + 如何使用其它命名空间里的函数 + require,refer和use + 常见错误和典型错误,以及导致这些错误的原因 + 命名空间和代码管理&lt;/p&gt;
&lt;p&gt;版权:&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;p&gt;涵盖Clojure版本:Clojure 1.5&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;&gt;概述&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Clojure的函数通过命名空间来组织.Clojure命名空间和Java的包或者Python的模块很类似.命名空间实际上就是个map,将名字映射到了var上.在大部分情况下,这些var持有这些函数.&lt;/p&gt;
&lt;h1 id=&quot;定义一个命名空间&quot;&gt;&lt;a href=&quot;#定义一个命名空间&quot;&gt;定义一个命名空间&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;一般情况下使用clojure.core/ns宏来定义命名空间.最基本的形式下,它将名字作为符号.&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; superlib.core)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命名空间可以由点号切割的好多段组成&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.service.core)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,请尽量避免使用单段的命名空间,以免与其它开发人员的命名空间相冲突.如果库或者应用属于某个组织,那么建议以如下形式作为命名空间.[组织名称].[包名|应用名].[函数组名] 例如&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; clojurewerkz.welle.kv)
          
          (&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.search.indexer.core)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外,ns宏可以包含如下形式: + (:require ...) + (:import ...) + (:use ...) + (:refer-clojure ...) + (:gen-class ...)&lt;/p&gt;
&lt;p&gt;这些其实就是clojure.core/import,clojure.core/require等等这些的简写形式而已&lt;/p&gt;
&lt;h2 id=&quot;require&quot;&gt;&lt;a href=&quot;#require&quot;&gt;:require&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;:require形式可以使你的代码能访问其它命名空间的Clojure代码.例如&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (clojure.set/difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此代码将保证clojure.set命名空间被加载,编译并且可以通过clojure.set名来调用.当然可以给加载的命名空间取个别名:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; cs]))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (cs/difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一次导入两个命名空间的例子;&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; cs]
                      [clojure.&lt;span class=&quot;kw&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;walk&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;refer选项&quot;&gt;&lt;a href=&quot;#refer选项&quot;&gt;:refer选项&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果想在当前命名空间里通过简写名称来引用clojure.set空间里的函数,可以通过refer来实现:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;intersection&lt;/span&gt;]]))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:require形式中的:refer特性为Clojure1.4新增特性.&lt;/p&gt;
&lt;p&gt;可能有时需要引入某个命名空间下所有的函数:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:all&lt;/span&gt;]))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;import&quot;&gt;&lt;a href=&quot;#import&quot;&gt;:import&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;:import的作用是在当前命名空间引入Java类:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:import&lt;/span&gt; java.util.concurrent.Executors))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行上面的代码后,java.util.concurrent.Executors类将会被引入,请可以直接通过名字Executors来使用.可以同时引入多个类.&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:import&lt;/span&gt; java.util.concurrent.Executors
                     java.util.concurrent.TimeUnit
                     java.util.Date))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果引入的多个类在同一个包下面,就像上面那样,可以使用如下的简介方式:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:import&lt;/span&gt; [java.util.concurrent Executors TimeUnit]
                     java.util.Date))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;虽然导入的list被叫做list,实际上可以使用任意的Clojure的集合(一般使用vector)&lt;/p&gt;
&lt;h2 id=&quot;当前命名空间&quot;&gt;&lt;a href=&quot;#当前命名空间&quot;&gt;当前命名空间&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Clojure将通过*ns*来持有当前的命名空间.使用def形式定义的var被添加到了当前命名空间中.&lt;/p&gt;
&lt;h2 id=&quot;refer-clojure&quot;&gt;&lt;a href=&quot;#refer-clojure&quot;&gt;:refer-clojure&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们在使用像clojure.core/get这样的函数和clojure.core/defn这样的宏的时候我们不需要使用它的全限定名.这是因为Clojure默认将clojure.core下的内容全部加载进了当前命名空间里了.所以如果你定义了一个函数名和clojure.core里的重复了(比如find),你将会得到一个警告.&lt;/p&gt;
&lt;pre class=&quot;sh&quot;&gt;&lt;code&gt;WARNING: find already refers to: #&amp;#39;clojure.core/find in namespace:    megacorp.profitd.scheduling, being replaced by: #&amp;#39;megacorp.profitd.scheduling/find&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个警告的意思是在megacorp.profitd.scheduling这个命名空间里,已经有一个clojure.core/find了,但是现在它被你定义的函数覆盖了.请记住,Clojure是很动态的语言,命名空间就是map而已.&lt;/p&gt;
&lt;p&gt;解决这个问题的办法有:你可以重命名你的函数或者不引入clojure.core里的这个函数&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:refer-clojure&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:exclude&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;find&lt;/span&gt;]))
          
          (&lt;span class=&quot;kw&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; find&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&amp;quot;Finds a needle in the haystack.&amp;quot;&lt;/span&gt;
            [^String haystack]
            (&lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; ...))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这里,如果你想使用clojure.core/find的话,你需要通过全限定名来使用:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:refer-clojure&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:exclude&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;find&lt;/span&gt;]))
          
          (&lt;span class=&quot;kw&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; find&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&amp;quot;Finds a needle in the haystack.&amp;quot;&lt;/span&gt;
            [^String haystack]
            (clojure.core/find haystack &lt;span class=&quot;kw&quot;&gt;:needle&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;use&quot;&gt;&lt;a href=&quot;#use&quot;&gt;:use&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Clojure在1.4之前,:require是不支持:refer的,只能使用:use&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling-test
            (&lt;span class=&quot;kw&quot;&gt;:use&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;test&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中,clojure.test里的所有内容都被引入到了当前命名空间中.但是一般不会这样使用,建议是只引入需要的函数:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling-test
            (&lt;span class=&quot;kw&quot;&gt;:use&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:only&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; testing &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.4以前的做法&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling-test
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; testing &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而现在鼓励的做法是使用:require,通过:refer来进行限制.&lt;/p&gt;
&lt;h2 id=&quot;文档与元数据&quot;&gt;&lt;a href=&quot;#文档与元数据&quot;&gt;文档与元数据&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;命名空间可以包含说明文档.你可以在ns宏里添加:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; superlib.core
            &lt;span class=&quot;st&quot;&gt;&amp;quot;Core functionality of Superlib.&lt;/span&gt;
          
          &lt;span class=&quot;st&quot;&gt;   Other parts of Superlib depend on functions and macros in this namespace.&amp;quot;&lt;/span&gt;
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者元数据&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; ^{&lt;span class=&quot;kw&quot;&gt;:doc&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Core functionality of Superlib.&lt;/span&gt;
          &lt;span class=&quot;st&quot;&gt;            Other parts of Superlib depend on functions and macros in this namespace.&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;:author&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Joe Smith&amp;quot;&lt;/span&gt;}
             superlib.core
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;元数据可以包含任意的键,例如:author,很多工具可以使用(像Codox,Cadastre或者lein-clojuredocs)&lt;/p&gt;
&lt;h1 id=&quot;如何在repl里使用其它命名空间的函数&quot;&gt;&lt;a href=&quot;#如何在repl里使用其它命名空间的函数&quot;&gt;如何在REPL里使用其它命名空间的函数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ns宏是你经常需要使用的,它引入其它命名空间的函数.但是它在REPL里不太方便.这里可以直接使用require:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span class=&quot;co&quot;&gt;;; Will be available as clojure.set, e.g. clojure.set/difference.&lt;/span&gt;
          (&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;)
          
          &lt;span class=&quot;co&quot;&gt;;; Will be available as io, e.g. io/resource.&lt;/span&gt;
          (&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;[clojure.java.io &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; io])
          It takes a quoted libspec. The libspec &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt; either a &lt;span class=&quot;kw&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; a collection (typically a &lt;span class=&quot;kw&quot;&gt;vector&lt;/span&gt;) of [&lt;span class=&quot;kw&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [fns]]:
          
          (&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;[clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]])
          
          (&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt; #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;})  &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:as和:refer可以一起使用&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;[clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; cs &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]])
          
          (&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt; #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;})  &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2}&lt;/span&gt;
          (cs/union #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;})    &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2 3 4 5 6}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;clojure.core/use可以做和clojure.core/require一样的事情,但是不推荐使用了.&lt;/p&gt;
&lt;h1 id=&quot;命名空间和编译&quot;&gt;&lt;a href=&quot;#命名空间和编译&quot;&gt;命名空间和编译&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Clojure是一个需要编译的语言:代码在被加载的时候进行编译.&lt;/p&gt;
&lt;p&gt;命名空间可以包含var或者去继承协议,添加多重方法实现或载入其它库.所以为了完成编译,你需要引入需要的命名空间.&lt;/p&gt;
&lt;h1 id=&quot;私有vars&quot;&gt;&lt;a href=&quot;#私有vars&quot;&gt;私有Vars&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Vars(包括defn宏定义的函数)可以设为私有的.有两种方法可以来做这件事情:使用元数据或者defn-宏&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.superlib)
          
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; Implementation&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          
          (&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; &lt;/span&gt;^{&lt;span class=&quot;kw&quot;&gt;:private&lt;/span&gt; true}
            source-name &lt;span class=&quot;st&quot;&gt;&amp;quot;supersource&amp;quot;&lt;/span&gt;)
          
          (&lt;span class=&quot;kw&quot;&gt;defn-&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; data-stream&lt;/span&gt;
            [source]
            (&lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; ...))&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;常量vars&quot;&gt;&lt;a href=&quot;#常量vars&quot;&gt;常量Vars&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Vars可以设为常量,通过:const元数据来设置.这将会促使Clojure编译器将其编译为常量:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.epicgame)
          
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; Implementation&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          
          (&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; &lt;/span&gt;^{&lt;span class=&quot;kw&quot;&gt;:const&lt;/span&gt; true}
            default-score &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;如何通过名称来查找和执行函数&quot;&gt;&lt;a href=&quot;#如何通过名称来查找和执行函数&quot;&gt;如何通过名称来查找和执行函数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;可以通过clojure.core/resolve在制定的命名空间里通过名字查找函数.名字需要使用引号修饰.返回值可以直接当做函数使用,比如,当做参数传递给高阶函数:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;resolve&lt;/span&gt; &amp;#39;clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &amp;#39;difference)  &lt;span class=&quot;co&quot;&gt;; ⇒ #&amp;#39;clojure.set/difference&lt;/span&gt;
          
          (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; [f (&lt;span class=&quot;kw&quot;&gt;resolve&lt;/span&gt; &amp;#39;clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &amp;#39;difference)]
             (f #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;}))  &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;编译异常&quot;&gt;&lt;a href=&quot;#编译异常&quot;&gt;编译异常&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节讨论一些常见的编译错误.&lt;/p&gt;
&lt;h2 id=&quot;classnotfoundexception&quot;&gt;&lt;a href=&quot;#classnotfoundexception&quot;&gt;ClassNotFoundException&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个异常的意思是JVM无法加载类.可能是因为拼写错误,或者在classpath上没有这个类.可能是你的项目没有很好的处理依赖关系.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user=&amp;gt; (import java.uyil.concurrent.TimeUnit)
          ClassNotFoundException java.uyil.concurrent.TimeUnit  java.net.URLClassLoader$1.run (URLClassLoader.java:366)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中,java.uyil.concurrent.TimeUnit拼写错误,应该是java.util.concurrent.TimeUnit&lt;/p&gt;
&lt;h2 id=&quot;compilerexception-java.lang.runtimeexception-no-such-var&quot;&gt;&lt;a href=&quot;#compilerexception-java.lang.runtimeexception-no-such-var&quot;&gt;CompilerException java.lang.RuntimeException: No such var&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个错误的意思是,使用了一个不存在的var.这可能是拼写错误,或者不正确的宏展开等类似问题.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user=&amp;gt; (clojure.java.io/resouce &amp;quot;thought_leaders_quotes.csv&amp;quot;)
          CompilerException java.lang.RuntimeException: No such var: clojure.java.io/resouce, compiling:(NO_SOURCE_PATH:1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中,clojure.java.io/resouce应该写成clojure.java.io/resource.NO_SOURCE_PATH的意思是编译是在repl里触发的,而不是一个Clojure源文件.&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
</content>
        <summary type="html">&lt;style type=&quot;text/css&quot;&gt;
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {&lt;br /&gt;
  margin: 0; padding: 0; vertical-align: baseline; border: none; }&lt;br /&gt;
table.sourceCode { width: 100%; line-height: 100%; background-color: #f8f8f8; }&lt;br /&gt;
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }&lt;br /&gt;
td.sourceCode { padding-left: 5px; }&lt;br /&gt;
pre, code { background-color: #f8f8f8; }&lt;br /&gt;
code &gt; span.kw { color: #204a87; font-weight: bold; }&lt;br /&gt;
code &gt; span.dt { color: #204a87; }&lt;br /&gt;
code &gt; span.dv { color: #0000cf; }&lt;br /&gt;
code &gt; span.bn { color: #0000cf; }&lt;br /&gt;
code &gt; span.fl { color: #0000cf; }&lt;br /&gt;
code &gt; span.ch { color: #4e9a06; }&lt;br /&gt;
code &gt; span.st { color: #4e9a06; }&lt;br /&gt;
code &gt; span.co { color: #8f5902; font-style: italic; }&lt;br /&gt;
code &gt; span.ot { color: #8f5902; }&lt;br /&gt;
code &gt; span.al { color: #ef2929; }&lt;br /&gt;
code &gt; span.fu { color: #000000; }&lt;br /&gt;
code &gt; span.er { font-weight: bold; }&lt;br /&gt;
  &lt;/style&gt;
&lt;style type=&quot;text/css&quot;&gt;
code {&lt;br /&gt;
background-color: #f7f7f9;&lt;br /&gt;
border: none;&lt;br /&gt;
padding: 2px 4px;&lt;br /&gt;
padding: 0.125rem 0.25rem;&lt;br /&gt;
}&lt;br /&gt;
pre.sourceCode{&lt;br /&gt;
border : 1px solid #e1e1e8;&lt;br /&gt;
}&lt;br /&gt;
&lt;/style&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div id=&quot;side-navigation&quot;&gt;
&lt;div id=&quot;TOC&quot; class=&quot;bs-sidebar hidden-print&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#版本&quot;&gt;版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#概述&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#定义一个命名空间&quot;&gt;定义一个命名空间&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#require&quot;&gt;:require&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#refer选项&quot;&gt;:refer选项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#import&quot;&gt;:import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#当前命名空间&quot;&gt;当前命名空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#refer-clojure&quot;&gt;:refer-clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use&quot;&gt;:use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#文档与元数据&quot;&gt;文档与元数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何在repl里使用其它命名空间的函数&quot;&gt;如何在REPL里使用其它命名空间的函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#命名空间和编译&quot;&gt;命名空间和编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#私有vars&quot;&gt;私有Vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常量vars&quot;&gt;常量Vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何通过名称来查找和执行函数&quot;&gt;如何通过名称来查找和执行函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#编译异常&quot;&gt;编译异常&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#classnotfoundexception&quot;&gt;ClassNotFoundException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#compilerexception-java.lang.runtimeexception-no-such-var&quot;&gt;CompilerException java.lang.RuntimeException: No such var&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;col-md-9&quot;&gt;
&lt;div id=&quot;content&quot;&gt;
&lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot;&gt;版本&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/language/namespaces.html&quot;&gt;Clojure Namespaces and Vars&lt;/a&gt; 本文涵盖如下内容: + Clojure命名空间和var概述 + 如何定义命名空间 + 如何使用其它命名空间里的函数 + require,refer和use + 常见错误和典型错误,以及导致这些错误的原因 + 命名空间和代码管理&lt;/p&gt;
&lt;p&gt;版权:&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;p&gt;涵盖Clojure版本:Clojure 1.5&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;&gt;概述&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Clojure的函数通过命名空间来组织.Clojure命名空间和Java的包或者Python的模块很类似.命名空间实际上就是个map,将名字映射到了var上.在大部分情况下,这些var持有这些函数.&lt;/p&gt;
&lt;h1 id=&quot;定义一个命名空间&quot;&gt;&lt;a href=&quot;#定义一个命名空间&quot;&gt;定义一个命名空间&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;一般情况下使用clojure.core/ns宏来定义命名空间.最基本的形式下,它将名字作为符号.&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; superlib.core)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命名空间可以由点号切割的好多段组成&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.service.core)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,请尽量避免使用单段的命名空间,以免与其它开发人员的命名空间相冲突.如果库或者应用属于某个组织,那么建议以如下形式作为命名空间.[组织名称].[包名|应用名].[函数组名] 例如&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; clojurewerkz.welle.kv)
          
          (&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.search.indexer.core)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外,ns宏可以包含如下形式: + (:require ...) + (:import ...) + (:use ...) + (:refer-clojure ...) + (:gen-class ...)&lt;/p&gt;
&lt;p&gt;这些其实就是clojure.core/import,clojure.core/require等等这些的简写形式而已&lt;/p&gt;
&lt;h2 id=&quot;require&quot;&gt;&lt;a href=&quot;#require&quot;&gt;:require&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;:require形式可以使你的代码能访问其它命名空间的Clojure代码.例如&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (clojure.set/difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此代码将保证clojure.set命名空间被加载,编译并且可以通过clojure.set名来调用.当然可以给加载的命名空间取个别名:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; cs]))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (cs/difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一次导入两个命名空间的例子;&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; cs]
                      [clojure.&lt;span class=&quot;kw&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;walk&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;refer选项&quot;&gt;&lt;a href=&quot;#refer选项&quot;&gt;:refer选项&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果想在当前命名空间里通过简写名称来引用clojure.set空间里的函数,可以通过refer来实现:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;intersection&lt;/span&gt;]]))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:require形式中的:refer特性为Clojure1.4新增特性.&lt;/p&gt;
&lt;p&gt;可能有时需要引入某个命名空间下所有的函数:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:all&lt;/span&gt;]))
          
          &lt;span class=&quot;co&quot;&gt;;; Now it is possible to do:&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; (difference #{1 2 3} #{3 4 5})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;import&quot;&gt;&lt;a href=&quot;#import&quot;&gt;:import&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;:import的作用是在当前命名空间引入Java类:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:import&lt;/span&gt; java.util.concurrent.Executors))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行上面的代码后,java.util.concurrent.Executors类将会被引入,请可以直接通过名字Executors来使用.可以同时引入多个类.&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:import&lt;/span&gt; java.util.concurrent.Executors
                     java.util.concurrent.TimeUnit
                     java.util.Date))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果引入的多个类在同一个包下面,就像上面那样,可以使用如下的简介方式:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:import&lt;/span&gt; [java.util.concurrent Executors TimeUnit]
                     java.util.Date))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;虽然导入的list被叫做list,实际上可以使用任意的Clojure的集合(一般使用vector)&lt;/p&gt;
&lt;h2 id=&quot;当前命名空间&quot;&gt;&lt;a href=&quot;#当前命名空间&quot;&gt;当前命名空间&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Clojure将通过*ns*来持有当前的命名空间.使用def形式定义的var被添加到了当前命名空间中.&lt;/p&gt;
&lt;h2 id=&quot;refer-clojure&quot;&gt;&lt;a href=&quot;#refer-clojure&quot;&gt;:refer-clojure&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们在使用像clojure.core/get这样的函数和clojure.core/defn这样的宏的时候我们不需要使用它的全限定名.这是因为Clojure默认将clojure.core下的内容全部加载进了当前命名空间里了.所以如果你定义了一个函数名和clojure.core里的重复了(比如find),你将会得到一个警告.&lt;/p&gt;
&lt;pre class=&quot;sh&quot;&gt;&lt;code&gt;WARNING: find already refers to: #&amp;#39;clojure.core/find in namespace:    megacorp.profitd.scheduling, being replaced by: #&amp;#39;megacorp.profitd.scheduling/find&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个警告的意思是在megacorp.profitd.scheduling这个命名空间里,已经有一个clojure.core/find了,但是现在它被你定义的函数覆盖了.请记住,Clojure是很动态的语言,命名空间就是map而已.&lt;/p&gt;
&lt;p&gt;解决这个问题的办法有:你可以重命名你的函数或者不引入clojure.core里的这个函数&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:refer-clojure&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:exclude&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;find&lt;/span&gt;]))
          
          (&lt;span class=&quot;kw&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; find&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&amp;quot;Finds a needle in the haystack.&amp;quot;&lt;/span&gt;
            [^String haystack]
            (&lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; ...))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这里,如果你想使用clojure.core/find的话,你需要通过全限定名来使用:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling
            (&lt;span class=&quot;kw&quot;&gt;:refer-clojure&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:exclude&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;find&lt;/span&gt;]))
          
          (&lt;span class=&quot;kw&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; find&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&amp;quot;Finds a needle in the haystack.&amp;quot;&lt;/span&gt;
            [^String haystack]
            (clojure.core/find haystack &lt;span class=&quot;kw&quot;&gt;:needle&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;use&quot;&gt;&lt;a href=&quot;#use&quot;&gt;:use&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Clojure在1.4之前,:require是不支持:refer的,只能使用:use&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling-test
            (&lt;span class=&quot;kw&quot;&gt;:use&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;test&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中,clojure.test里的所有内容都被引入到了当前命名空间中.但是一般不会这样使用,建议是只引入需要的函数:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling-test
            (&lt;span class=&quot;kw&quot;&gt;:use&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:only&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; testing &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.4以前的做法&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.profitd.scheduling-test
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; clojure.&lt;span class=&quot;kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; testing &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt;]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而现在鼓励的做法是使用:require,通过:refer来进行限制.&lt;/p&gt;
&lt;h2 id=&quot;文档与元数据&quot;&gt;&lt;a href=&quot;#文档与元数据&quot;&gt;文档与元数据&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;命名空间可以包含说明文档.你可以在ns宏里添加:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; superlib.core
            &lt;span class=&quot;st&quot;&gt;&amp;quot;Core functionality of Superlib.&lt;/span&gt;
          
          &lt;span class=&quot;st&quot;&gt;   Other parts of Superlib depend on functions and macros in this namespace.&amp;quot;&lt;/span&gt;
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者元数据&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; ^{&lt;span class=&quot;kw&quot;&gt;:doc&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Core functionality of Superlib.&lt;/span&gt;
          &lt;span class=&quot;st&quot;&gt;            Other parts of Superlib depend on functions and macros in this namespace.&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;:author&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Joe Smith&amp;quot;&lt;/span&gt;}
             superlib.core
            (&lt;span class=&quot;kw&quot;&gt;:require&lt;/span&gt; [clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;元数据可以包含任意的键,例如:author,很多工具可以使用(像Codox,Cadastre或者lein-clojuredocs)&lt;/p&gt;
&lt;h1 id=&quot;如何在repl里使用其它命名空间的函数&quot;&gt;&lt;a href=&quot;#如何在repl里使用其它命名空间的函数&quot;&gt;如何在REPL里使用其它命名空间的函数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ns宏是你经常需要使用的,它引入其它命名空间的函数.但是它在REPL里不太方便.这里可以直接使用require:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;&lt;span class=&quot;co&quot;&gt;;; Will be available as clojure.set, e.g. clojure.set/difference.&lt;/span&gt;
          (&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;)
          
          &lt;span class=&quot;co&quot;&gt;;; Will be available as io, e.g. io/resource.&lt;/span&gt;
          (&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;[clojure.java.io &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; io])
          It takes a quoted libspec. The libspec &lt;span class=&quot;kw&quot;&gt;is&lt;/span&gt; either a &lt;span class=&quot;kw&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; a collection (typically a &lt;span class=&quot;kw&quot;&gt;vector&lt;/span&gt;) of [&lt;span class=&quot;kw&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;or&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [fns]]:
          
          (&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;[clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]])
          
          (&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt; #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;})  &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:as和:refer可以一起使用&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;require&lt;/span&gt; &amp;#39;[clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;:as&lt;/span&gt; cs &lt;span class=&quot;kw&quot;&gt;:refer&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt;]])
          
          (&lt;span class=&quot;kw&quot;&gt;difference&lt;/span&gt; #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;})  &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2}&lt;/span&gt;
          (cs/union #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;})    &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2 3 4 5 6}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;clojure.core/use可以做和clojure.core/require一样的事情,但是不推荐使用了.&lt;/p&gt;
&lt;h1 id=&quot;命名空间和编译&quot;&gt;&lt;a href=&quot;#命名空间和编译&quot;&gt;命名空间和编译&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Clojure是一个需要编译的语言:代码在被加载的时候进行编译.&lt;/p&gt;
&lt;p&gt;命名空间可以包含var或者去继承协议,添加多重方法实现或载入其它库.所以为了完成编译,你需要引入需要的命名空间.&lt;/p&gt;
&lt;h1 id=&quot;私有vars&quot;&gt;&lt;a href=&quot;#私有vars&quot;&gt;私有Vars&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Vars(包括defn宏定义的函数)可以设为私有的.有两种方法可以来做这件事情:使用元数据或者defn-宏&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.superlib)
          
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; Implementation&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          
          (&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; &lt;/span&gt;^{&lt;span class=&quot;kw&quot;&gt;:private&lt;/span&gt; true}
            source-name &lt;span class=&quot;st&quot;&gt;&amp;quot;supersource&amp;quot;&lt;/span&gt;)
          
          (&lt;span class=&quot;kw&quot;&gt;defn-&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; data-stream&lt;/span&gt;
            [source]
            (&lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; ...))&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;常量vars&quot;&gt;&lt;a href=&quot;#常量vars&quot;&gt;常量Vars&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Vars可以设为常量,通过:const元数据来设置.这将会促使Clojure编译器将其编译为常量:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;ns&lt;/span&gt; megacorp.epicgame)
          
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;; Implementation&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;;;&lt;/span&gt;
          
          (&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; &lt;/span&gt;^{&lt;span class=&quot;kw&quot;&gt;:const&lt;/span&gt; true}
            default-score &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;如何通过名称来查找和执行函数&quot;&gt;&lt;a href=&quot;#如何通过名称来查找和执行函数&quot;&gt;如何通过名称来查找和执行函数&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;可以通过clojure.core/resolve在制定的命名空间里通过名字查找函数.名字需要使用引号修饰.返回值可以直接当做函数使用,比如,当做参数传递给高阶函数:&lt;/p&gt;
&lt;pre class=&quot;sourceCode clojure&quot;&gt;&lt;code class=&quot;sourceCode clojure&quot;&gt;(&lt;span class=&quot;kw&quot;&gt;resolve&lt;/span&gt; &amp;#39;clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &amp;#39;difference)  &lt;span class=&quot;co&quot;&gt;; ⇒ #&amp;#39;clojure.set/difference&lt;/span&gt;
          
          (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; [f (&lt;span class=&quot;kw&quot;&gt;resolve&lt;/span&gt; &amp;#39;clojure.&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &amp;#39;difference)]
             (f #{&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;} #{&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;}))  &lt;span class=&quot;co&quot;&gt;; ⇒ #{1 2}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;编译异常&quot;&gt;&lt;a href=&quot;#编译异常&quot;&gt;编译异常&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节讨论一些常见的编译错误.&lt;/p&gt;
&lt;h2 id=&quot;classnotfoundexception&quot;&gt;&lt;a href=&quot;#classnotfoundexception&quot;&gt;ClassNotFoundException&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个异常的意思是JVM无法加载类.可能是因为拼写错误,或者在classpath上没有这个类.可能是你的项目没有很好的处理依赖关系.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user=&amp;gt; (import java.uyil.concurrent.TimeUnit)
          ClassNotFoundException java.uyil.concurrent.TimeUnit  java.net.URLClassLoader$1.run (URLClassLoader.java:366)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中,java.uyil.concurrent.TimeUnit拼写错误,应该是java.util.concurrent.TimeUnit&lt;/p&gt;
&lt;h2 id=&quot;compilerexception-java.lang.runtimeexception-no-such-var&quot;&gt;&lt;a href=&quot;#compilerexception-java.lang.runtimeexception-no-such-var&quot;&gt;CompilerException java.lang.RuntimeException: No such var&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个错误的意思是,使用了一个不存在的var.这可能是拼写错误,或者不正确的宏展开等类似问题.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user=&amp;gt; (clojure.java.io/resouce &amp;quot;thought_leaders_quotes.csv&amp;quot;)
          CompilerException java.lang.RuntimeException: No such var: clojure.java.io/resouce, compiling:(NO_SOURCE_PATH:1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的例子中,clojure.java.io/resouce应该写成clojure.java.io/resource.NO_SOURCE_PATH的意思是编译是在repl里触发的,而不是一个Clojure源文件.&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>在GitHub部署OctoPress</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%25e5%259c%25a8github%25e9%2583%25a8%25e7%25bd%25b2octopress.html"/>
        <updated>2014-06-14T16:00:00+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%e5%9c%a8github%e9%83%a8%e7%bd%b2octopress</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 步骤&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1. 安装ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;3.2. 安装Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;3.3. 配置Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-4&quot;&gt;3.4. 初始化博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-5&quot;&gt;3.5. 安装第三方主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-6&quot;&gt;3.6. 部署博客到Github上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-7&quot;&gt;3.7. 提交源码到source分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-8&quot;&gt;3.8. 写博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-9&quot;&gt;3.9. 添加多说评论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-10&quot;&gt;3.10. 使用org-mode生成markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
本文记录本人使用Octopress,Github搭建博客的流程.具体方案都是从网上搜索&lt;br /&gt;
得到.只记录操作流程,方便后续使用!&lt;br /&gt;
浏览地址:&lt;a href=&quot;http://ivanpig.github.io/&quot;&gt;http://ivanpig.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 环境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Linux Mint 16
&lt;/li&gt;
&lt;li&gt;ruby 1.9.3
&lt;/li&gt;
&lt;li&gt;Octopress
&lt;/li&gt;
&lt;li&gt;emacs
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 步骤&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 安装ruby&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
需要ruby版本1.9.3,执行如下命令,安装ruby1.9.3&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install ruby1.9.3
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; 安装Octopress&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone git://github.com/imathis/octopress.git octopress  
&lt;span style=&quot;color: #859900;&quot;&gt;cd&lt;/span&gt; octopress
gem install bundler
bundle install
rake install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 配置Octopress&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;修改&lt;sub&gt;config&lt;/sub&gt;.yml的url,title,subtitle,author,email等信息.其中url为在&lt;br /&gt;
github创建的仓库地址我的就是:&lt;a href=&quot;https://github.com/ivanpig/ivanpig.github.com&quot;&gt;https://github.com/ivanpig/ivanpig.github.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;删除source/&lt;sub&gt;include&lt;/sub&gt;/custom/head.html和source/&lt;sub&gt;include&lt;/sub&gt;/head.html中的&lt;br /&gt;
谷歌字体.否则大陆访问速度超慢
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; 初始化博客&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;p&gt;
Octopress生成的博客文件在&lt;sub&gt;deploy目录下&lt;/sub&gt;,所以需要将此目录作为github仓库&lt;br /&gt;
的master路径.执行如下命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/ivanpig/ivanpig.github.com _deploy
&lt;span style=&quot;color: #859900;&quot;&gt;cd&lt;/span&gt; _deploy
git checkout
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt; 安装第三方主题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p&gt;
第三方主题可以到这里下载:&lt;a href=&quot;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&quot;&gt;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&lt;/a&gt;&lt;br /&gt;
我使用的是greyshade&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone  https://github.com/shashankmehta/greyshade.git .themes/greyshade
rake install[&lt;span style=&quot;color: #2aa198;&quot;&gt;'greyshade'&lt;/span&gt;]
rake generate
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.6&lt;/span&gt; 部署博客到Github上&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;生成的文件发布到master上,源文件发布到source分支上
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake setup_github_pages
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的命令最主要的作用就是创建一个&lt;sub&gt;deploy目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake generate  
rake deploy
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的命令进行部署.在deploy之前,你可以&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake preview
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
访问&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; 进行预览&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.7&lt;/span&gt; 提交源码到source分支&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git add .  
git commit -m &lt;span style=&quot;color: #2aa198;&quot;&gt;'Initial source commit'&lt;/span&gt;  
git push origin source
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.8&lt;/span&gt; 写博客&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-8&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake new_post[&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;title&quot;&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：source/&lt;sub&gt;posts&lt;/sub&gt;/2013-08-03-title.markdown。&lt;br /&gt;
打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-md&quot;&gt;---  
layout: post  
title: &quot;title&quot;  
date: 2014-06-15 16:36  
comments: true  
categories:   
---
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在此文件中编写markdown即可.&lt;br /&gt;
整体流程如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake new_post[&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;New Post&quot;&lt;/span&gt;]  
rake generate  
git add .  
git commit -am &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Some comment here.&quot;&lt;/span&gt;   
git push origin source  
rake deploy
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.9&lt;/span&gt; 添加多说评论&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-9&quot;&gt;
&lt;p&gt;
在&lt;sub&gt;config&lt;/sub&gt;.yml中添加&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;duoshuo comments&lt;/span&gt;
duoshuo_comments: true
duoshuo_short_name: yourname
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在 source/&lt;sub&gt;layouts&lt;/sub&gt;/post.html 中的 disqus代码&lt;br /&gt;
下方添加 多说评论 模块&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-html&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
然后就按路径创建一个 source/&lt;sub&gt;includes&lt;/sub&gt;/post/duoshuo.html&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-html&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;Duoshuo Comment BEGIN &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&quot;color: #268bd2;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ds-thread&quot;&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;data-title&lt;/span&gt;=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #268bd2;&quot;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color: #268bd2;&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;
  var duoshuoQuery = {short_name:&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;};
  (function() {
    var ds = document.createElement('script');
    ds.type = 'text/javascript';ds.async = true;
    ds.src = 'http://static.duoshuo.com/embed.js';
    ds.charset = 'UTF-8';
    (document.getElementsByTagName('head')[0] 
    || document.getElementsByTagName('body')[0]).appendChild(ds);
  })();
&amp;lt;/&lt;span style=&quot;color: #268bd2;&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;Duoshuo Comment END &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-10&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.10&lt;/span&gt; 使用org-mode生成markdown&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-10&quot;&gt;
&lt;p&gt;
本人习惯使用emacs的org-mode来写文档.org-mode可以直接生成markdown文件.只&lt;br /&gt;
需要执行M-X org-md-export-to-md 即可&lt;br /&gt;
本文即使用org-mode编写.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 步骤&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1. 安装ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;3.2. 安装Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;3.3. 配置Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-4&quot;&gt;3.4. 初始化博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-5&quot;&gt;3.5. 安装第三方主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-6&quot;&gt;3.6. 部署博客到Github上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-7&quot;&gt;3.7. 提交源码到source分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-8&quot;&gt;3.8. 写博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-9&quot;&gt;3.9. 添加多说评论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-10&quot;&gt;3.10. 使用org-mode生成markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
本文记录本人使用Octopress,Github搭建博客的流程.具体方案都是从网上搜索&lt;br /&gt;
得到.只记录操作流程,方便后续使用!&lt;br /&gt;
浏览地址:&lt;a href=&quot;http://ivanpig.github.io/&quot;&gt;http://ivanpig.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 环境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Linux Mint 16
&lt;/li&gt;
&lt;li&gt;ruby 1.9.3
&lt;/li&gt;
&lt;li&gt;Octopress
&lt;/li&gt;
&lt;li&gt;emacs
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 步骤&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 安装ruby&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
需要ruby版本1.9.3,执行如下命令,安装ruby1.9.3&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install ruby1.9.3
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; 安装Octopress&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone git://github.com/imathis/octopress.git octopress  
&lt;span style=&quot;color: #859900;&quot;&gt;cd&lt;/span&gt; octopress
gem install bundler
bundle install
rake install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 配置Octopress&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;修改&lt;sub&gt;config&lt;/sub&gt;.yml的url,title,subtitle,author,email等信息.其中url为在&lt;br /&gt;
github创建的仓库地址我的就是:&lt;a href=&quot;https://github.com/ivanpig/ivanpig.github.com&quot;&gt;https://github.com/ivanpig/ivanpig.github.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;删除source/&lt;sub&gt;include&lt;/sub&gt;/custom/head.html和source/&lt;sub&gt;include&lt;/sub&gt;/head.html中的&lt;br /&gt;
谷歌字体.否则大陆访问速度超慢
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; 初始化博客&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;p&gt;
Octopress生成的博客文件在&lt;sub&gt;deploy目录下&lt;/sub&gt;,所以需要将此目录作为github仓库&lt;br /&gt;
的master路径.执行如下命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/ivanpig/ivanpig.github.com _deploy
&lt;span style=&quot;color: #859900;&quot;&gt;cd&lt;/span&gt; _deploy
git checkout
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt; 安装第三方主题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p&gt;
第三方主题可以到这里下载:&lt;a href=&quot;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&quot;&gt;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&lt;/a&gt;&lt;br /&gt;
我使用的是greyshade&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone  https://github.com/shashankmehta/greyshade.git .themes/greyshade
rake install[&lt;span style=&quot;color: #2aa198;&quot;&gt;'greyshade'&lt;/span&gt;]
rake generate
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.6&lt;/span&gt; 部署博客到Github上&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;生成的文件发布到master上,源文件发布到source分支上
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake setup_github_pages
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的命令最主要的作用就是创建一个&lt;sub&gt;deploy目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake generate  
rake deploy
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的命令进行部署.在deploy之前,你可以&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake preview
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
访问&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; 进行预览&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.7&lt;/span&gt; 提交源码到source分支&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git add .  
git commit -m &lt;span style=&quot;color: #2aa198;&quot;&gt;'Initial source commit'&lt;/span&gt;  
git push origin source
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.8&lt;/span&gt; 写博客&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-8&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake new_post[&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;title&quot;&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：source/&lt;sub&gt;posts&lt;/sub&gt;/2013-08-03-title.markdown。&lt;br /&gt;
打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-md&quot;&gt;---  
layout: post  
title: &quot;title&quot;  
date: 2014-06-15 16:36  
comments: true  
categories:   
---
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在此文件中编写markdown即可.&lt;br /&gt;
整体流程如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;rake new_post[&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;New Post&quot;&lt;/span&gt;]  
rake generate  
git add .  
git commit -am &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Some comment here.&quot;&lt;/span&gt;   
git push origin source  
rake deploy
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.9&lt;/span&gt; 添加多说评论&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-9&quot;&gt;
&lt;p&gt;
在&lt;sub&gt;config&lt;/sub&gt;.yml中添加&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;duoshuo comments&lt;/span&gt;
duoshuo_comments: true
duoshuo_short_name: yourname
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在 source/&lt;sub&gt;layouts&lt;/sub&gt;/post.html 中的 disqus代码&lt;br /&gt;
下方添加 多说评论 模块&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-html&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
然后就按路径创建一个 source/&lt;sub&gt;includes&lt;/sub&gt;/post/duoshuo.html&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-html&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;Duoshuo Comment BEGIN &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&quot;color: #268bd2;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ds-thread&quot;&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;data-title&lt;/span&gt;=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #268bd2;&quot;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color: #268bd2;&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;
  var duoshuoQuery = {short_name:&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;};
  (function() {
    var ds = document.createElement('script');
    ds.type = 'text/javascript';ds.async = true;
    ds.src = 'http://static.duoshuo.com/embed.js';
    ds.charset = 'UTF-8';
    (document.getElementsByTagName('head')[0] 
    || document.getElementsByTagName('body')[0]).appendChild(ds);
  })();
&amp;lt;/&lt;span style=&quot;color: #268bd2;&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;Duoshuo Comment END &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-10&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.10&lt;/span&gt; 使用org-mode生成markdown&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-10&quot;&gt;
&lt;p&gt;
本人习惯使用emacs的org-mode来写文档.org-mode可以直接生成markdown文件.只&lt;br /&gt;
需要执行M-X org-md-export-to-md 即可&lt;br /&gt;
本文即使用org-mode编写.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure进阶:使用Clojure编写文字冒险游戏</title>
        <link href="http://liyouhai.com/clojure/clojure%25e8%25bf%259b%25e9%2598%25b6%25e4%25bd%25bf%25e7%2594%25a8clojure%25e7%25bc%2596%25e5%2586%2599%25e6%2596%2587%25e5%25ad%2597%25e5%2586%2592%25e9%2599%25a9%25e6%25b8%25b8%25e6%2588%258f.html"/>
        <updated>2014-05-16T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e8%bf%9b%e9%98%b6%e4%bd%bf%e7%94%a8clojure%e7%bc%96%e5%86%99%e6%96%87%e5%ad%97%e5%86%92%e9%99%a9%e6%b8%b8%e6%88%8f</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 语法和语义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 为我们的游戏世界定义数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4. 环顾我们的游戏世界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5. 函数式编码风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6. 环游我们的游戏世界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7. 构建SPELs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8. 创建特殊操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9. 附录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10. 为什么没有使用&quot;宏&quot;这个词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11. 译者感想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
本文翻译自:&lt;a href=&quot;http://www.lisperati.com/clojure-spels/casting.html&quot;&gt;Casting SPELs in Clojure&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_016.jpg&quot; alt=&quot;cs_01.jpg&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 准备&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
任何学过Lisp的人都会说List和其它语言有很大的不同.它有很多不可思议的地&lt;br /&gt;
方.本文将告诉你它有哪些独特之处!&lt;br /&gt;
本文适用于Clojure,它是一个运行在JVM上的Lisp方言.Clojure的API和语法和&lt;br /&gt;
Common Lisp很类似,但是还是有足够多的区别,需要单独为其写个教程.&lt;br /&gt;
在大部分情况下,我们会说Lisp而不是Clojure,因为大部分的概念在Lisp中是通&lt;br /&gt;
用的.我们会指出Clojure特有的内容.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_026.jpg&quot; alt=&quot;cs_02.jpg&quot; /&gt;&lt;br /&gt;
Clojure是运行在JVM之上的,所以你需要先安装JVM.如果你是MAC机,那么Java已&lt;br /&gt;
经被安装过了.如果是Linux或者Windows系统,你需要到&lt;a href=&quot;http://java.sun.com/javase/downloads/index.jsp&quot;&gt;Oracle Java官网&lt;/a&gt;下载对&lt;br /&gt;
应版本的Java.而Clojure,你可以从它的&lt;a href=&quot;http://clojure.org/&quot;&gt;官网&lt;/a&gt;获得最新版本.&lt;br /&gt;
下载完成后,你只需要解压缩,打开命令行,切换到解压缩目录,输入:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;java -jar clojure.jar
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果没有问题,那么你将会看到Clojure输出提示&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;Clojure 1.6.0
&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
教程中有很多Clojure代码片段,类似下面的样子:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;'&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;these kinds of boxes&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
你只需要将这些代码片段拷贝到Clojure REPL中运行就可以了!当你学习完此教&lt;br /&gt;
程,你将会有一个你自己的文字冒险游戏了!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 语法和语义&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
每一个编程语言是由语法和语义组成的.语法是组成你的程序的骨架,你必须要&lt;br /&gt;
遵循它们,这样编译器才能知道你的程序里什么是什么,比如说什么是函数,什么&lt;br /&gt;
是变量,等等!而语义是个比较&quot;随便&quot;的东西,例如你的程序里有哪些不同的命令,&lt;br /&gt;
或者在程序的哪个部分能访问到哪些变量!这里Lisp比较特别的地方就是,Lisp的&lt;br /&gt;
语法笔其它任何语言都要简单.&lt;/p&gt;
&lt;p&gt;
首先,Lisp语法规定,所有传递给Lisp编译器的文本需要是个list,当然这个list&lt;br /&gt;
可以无限嵌套.每个list都必须使用括号包裹.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_036.jpg&quot; alt=&quot;cs_03.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
另外,Lisp编译器使用两种模式来读取你的代码:代码模式和数据模式.当你在数&lt;br /&gt;
据模式下,你可以将任何东西塞到你的list中.但是在代码模式下,你的list需要&lt;br /&gt;
是叫做form的特殊类型.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_046.jpg&quot; alt=&quot;cs_04.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
form也是个list,不过它的第一个符号被lisp编译器特殊对待了&amp;#x2014;一般被当做函&lt;br /&gt;
数的名字.在这种情况下,编译器会将list中的其它元素作为函数参数传递给这个&lt;br /&gt;
函数.默认情况下,编译器运行在代码模式下,除非你特意告诉它进入数据模式.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 为我们的游戏世界定义数据&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
为了进一步的学习form,让我们来创建一些form,来定义我们游戏世界里的数据.首&lt;br /&gt;
先,我们的游戏有一些对象,玩家可以使用他们&amp;#x2013;让我们来定义吧:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;objects&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;whiskey-bottle bucket frog chain&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
让我们来看看这行代码是什么意思:Lisp编译器总是使用代码模式来读取内容,所&lt;br /&gt;
以第一个符号(这里是def),肯定是个命令.在这里,它的作用就是给某个变量设&lt;br /&gt;
值:这里变量就是objects,而值是一个包含四个对象的list.这个list是数据(我&lt;br /&gt;
们可不想编译器去调用一个叫做whiskey-bottle的函数),所以在读取这个list时&lt;br /&gt;
我们需要将其设值为数据模式.在list前面的哪个单引号就是干这个的:&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_056.jpg&quot; alt=&quot;cs_05.jpg&quot; /&gt;&lt;br /&gt;
def命令就是用来设值的(如果你学过Common Lisp,你应该会知道它和Common&lt;br /&gt;
Lisp中的setf命令等价,但是Clojure中没有setf命令)&lt;br /&gt;
现在我们在游戏里定义了一些对象,现在让我们来定义一下游戏地图.下面是我们&lt;br /&gt;
的游戏世界:&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_066.jpg&quot; alt=&quot;cs_06.jpg&quot; /&gt;&lt;br /&gt;
在这个简单的游戏里,只有三个地点:一个房子,它包含起居室,阁楼和花园.让我&lt;br /&gt;
们来定义一个新变量,叫做game-map来描述这个游戏地图:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;game-map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt;
   'living-room '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;((&lt;/span&gt;you are in the living room
                   of a wizards house - there is a wizard
                   snoring loudly on the couch -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;west door garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;upstairs stairway attic&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
   'garden '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;((&lt;/span&gt;you are in a beautiful garden -
              there is a well in front of you -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;east door living-room&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
   'attic '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;((&lt;/span&gt;you are in the attic of the
             wizards house - there is a giant
             welding torch in the corner -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
            &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;downstairs stairway living-room&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个map包含了三个地点的所有重要信息:每个地点都有个独立的名字,一个简短&lt;br /&gt;
的描述,描述了我们能在这些地点看到什么,以及如何进入此处或从此处出去.请&lt;br /&gt;
注意这个包含了丰富信息的变量是如何定义的&amp;#x2014;Lisp程序员更喜欢用小巧的代&lt;br /&gt;
码片段而不是一大片代码,因为小代码更容易理解.&lt;/p&gt;
&lt;p&gt;
现在我们有了一个地图和一组对象,让我们来创建另一个变量,来描述这些对象在&lt;br /&gt;
地图的哪些地方.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;object-locations&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt;
                       'whiskey-bottle 'living-room
                       'bucket 'living-room
                       'chain 'garden
                       'frog 'garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这里我们将每个对象和地点进行了关联.Clojure提供了Map这个数据结构.Map使&lt;br /&gt;
用hash-map函数来创建,它需要一组参数类似(key1 value1 keys value2&amp;#x2026;).我&lt;br /&gt;
们的game-map变量也是个Map&amp;#x2014;三个key分别是living-room,garden和attic.&lt;/p&gt;
&lt;p&gt;
我们定义了游戏世界,以及游戏世界中的对象,现在就剩下一件事了,就是描述玩&lt;br /&gt;
家的地点!&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;location&lt;/span&gt; 'living-room&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
搞定,现在让我们来定义游戏操作吧!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_076.jpg&quot; alt=&quot;cs_07.jpg&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 环顾我们的游戏世界&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
我们想要的第一个命令能够告诉我们该地点的描述.那么我们该怎么定义这个函&lt;br /&gt;
数呢?它要知道我们想要描述的地点以及能够从map中查找地点的描述.如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-location&lt;/span&gt; [location game-map]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
defn定义了一个函数.函数的名字叫做describe-location,它需要两个参数:地点&lt;br /&gt;
和游戏地图.这两个变量在函数定义的括号内,所以它们是局部变量,因此对于全&lt;br /&gt;
局的location和game-map没有关系.注意到了吗?Lisp中的函数与其它语言中的函&lt;br /&gt;
数定义相比,更像是数学中的函数:它不打印信息或者弹出消息框:它所作的就是&lt;br /&gt;
返回结果.我们假设现在我们在起居室里!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_086.jpg&quot; alt=&quot;cs_08.jpg&quot; /&gt;&lt;br /&gt;
为了能找到起居室的描述,describe-locatin函数首先需要从地图中找到起居&lt;br /&gt;
室.(location game-map)就是进行从game-map中查找内容的,并返回起居室的描&lt;br /&gt;
述.然后first命令来处理返回值,取得返回的list的第一个元素,这个就是起居室&lt;br /&gt;
的描述了.&lt;br /&gt;
现在我们来测试一下&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-location 'living-room game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (describe-location 'living-room game-map)
(you are in the living-room of a wizard's house -
there is a wizard snoring loudly on the couch -)
&lt;/pre&gt;
&lt;p&gt;
很完美!这就是我们要的结果!请注意我们在living-room前添加了一个单引号,因&lt;br /&gt;
为这个符号是地点map的一个名称!但是,为什么我们没有在game-map前面添加单&lt;br /&gt;
引号呢?这是因为我们需要编译器去查询这个符号所指向的数据(就是那个map)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 函数式编码风格&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
你可能已经发现了describe-location函数有几个让人不太舒服的地方.第一,为&lt;br /&gt;
什么要传递位置和map参数,而不是直接使用已经定义的全局变量?原因是Lisp程&lt;br /&gt;
序员喜欢写函数式风格的代码.函数式风格的代码,主要遵循下面三条规则:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;只读取函数传递的参数或在函数内创建的变量
&lt;/li&gt;
&lt;li&gt;不改变已经被设值的变量的值
&lt;/li&gt;
&lt;li&gt;除了返回值,不去影响函数外的任何内容
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
你也许会怀疑在这种限制下你还能写代码吗?答案是:可以!为什么很多人对这些&lt;br /&gt;
规则感到疑惑呢?一个很重要的原因是:遵循此种风格的代码更加的引用透明&lt;br /&gt;
(referential transparency):这意味着,对于给定的代码,你传入相同的参数,永&lt;br /&gt;
远返回相同的结果&amp;#x2014;这能减少程序的错误,也能提高程序的生产力!&lt;/p&gt;
&lt;p&gt;
当然了,你也会有一些非函数式风格的代码,因为不这么做,你无法和其它用户或&lt;br /&gt;
外部内容进行交互.教程后面会有这些函数,他们不遵循上面的规则.&lt;/p&gt;
&lt;p&gt;
describe-location函数的另一个问题是,它没告诉我们怎么进入一个位置或者怎&lt;br /&gt;
么从某个位置出来.让我们来编写这样的函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-path&lt;/span&gt; [path]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;there is a ~&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; path&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; going ~&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; path&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; from here -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数看起来很明了:它看起来更像是数据而不是函数.我们先来尝试调用它,看&lt;br /&gt;
它做了些什么:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-path '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;west door garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (describe-path '(west door garden))
(user/there user/is user/a door user/going west user/from user/here clojure.core/-)
&lt;/pre&gt;
&lt;p&gt;
这是什么?!结果看起来很乱,包含了很多的/和一些其它的文字!这是因为Clojure&lt;br /&gt;
会将命名空间的名字添加到表达式的前面.我们这里不深究细节,只给你提供消除&lt;br /&gt;
这些内容的函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;spel-print&lt;/span&gt; [list] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;symbol&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt; list&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
修改调用方式&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-path '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;west door garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (spel-print (describe-path '(west door garden)))
(there is a door going west from here -)
&lt;/pre&gt;
&lt;p&gt;
现在结果很清晰了:这个函数接收一个描述路径的list然后将其解析到一个句子&lt;br /&gt;
里面.我们回过头来看这个函数,这个函数和它产生的数据非常的像:它就是拼接&lt;br /&gt;
第一个和第二个list的元素到语句中!它是怎么做到的?使用语法quote!&lt;/p&gt;
&lt;p&gt;
还记得我们使用quote来从代码模式切换到数据模式吗?语法quote的功能类似,但&lt;br /&gt;
是还不只这样.在语法quote里,我们还能使用'~'再次从数据模式切换回代码模式.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_096.png&quot; alt=&quot;cs_09.png&quot; /&gt;&lt;br /&gt;
语法quote是List的一个很强大的功能!它能使我们的代码看起来像它创建的数据.这&lt;br /&gt;
在函数式编码中很常见:创建这种样子的函数,使得我们的代码更易读也更稳健:&lt;br /&gt;
只要数据不变,函数就不需要修改.想象一下,你能否在VB或C中编写类似的代码?&lt;br /&gt;
你可能需要将文字切成小块,然后在一点点的组装-这和数据本身看起来差距很大,更&lt;br /&gt;
别说代码的稳健性了!&lt;/p&gt;
&lt;p&gt;
现在我们能描述一个路径,但是一个地点可能会有多个路径,所以让我们来创建一&lt;br /&gt;
个函数叫做describe-paths:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-paths&lt;/span&gt; [location game-map]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; concat &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; describe-path &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;rest&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; game-map location&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数使用了另一个在函数式编程中很常用的技术:高阶函数.apply和map这两&lt;br /&gt;
个函数能将其它的函数作为参数.map函数将另一个函数分别作用到list中的每个&lt;br /&gt;
对象上,这里是调用describe-path函数.apply concat是为了减少多余的括号,没&lt;br /&gt;
有多少功能性操作!我们来试试新函数&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-paths 'living-room game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (spel-print (describe-paths 'living-room game-map))
(there is a door going west from here -
there is a stairway going upstairs from here -)
&lt;/pre&gt;
&lt;p&gt;
漂亮!&lt;br /&gt;
最后,我们还剩下一件事要做:描述某个地点的某个对象!我们先写个帮助函数来&lt;br /&gt;
告诉我们在某个地方是否有某个对象!&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;is-at?&lt;/span&gt; [obj loc obj-loc] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;obj obj-loc&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; loc&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
=也是个函数,它判断对象的地点是否和当前地点相同!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_096.jpg&quot; alt=&quot;cs_09.jpg&quot; /&gt;&lt;br /&gt;
我们来尝试一下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? 'whiskey-bottle 'living-room object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (is-at? 'whiskey-bottle 'living-room object-locations)
true
&lt;/pre&gt;
&lt;p&gt;
返回结果是true,意味着whiskey-bottle在起居室.&lt;/p&gt;
&lt;p&gt;
现在让我们来使用这个函数描述地板:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-floor&lt;/span&gt; [loc objs obj-loc]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; concat &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x]
                       `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you see a ~x on the floor -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
                     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] 
                               &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? x loc obj-loc&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; objs&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数包含了很多新事物:首先,它有匿名函数(fn定义的函数).第一个fn干的&lt;br /&gt;
事,和下面的函数做的事情是一样的:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;blabla&lt;/span&gt; [x] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you see a ~x on the floor.&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
然后将这个blabla函数传递给map函数.filter函数是过滤掉那些在当前位置没有&lt;br /&gt;
出现的物体.我们来试一下新函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-floor 'living-room objects object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (spel-print (describe-floor 'living-room objects object-locations))
(you see a whiskey-bottle on the floor - you see a bucket on the floor -)
&lt;/pre&gt;
&lt;p&gt;
现在,让我们来将这些函数串联起来,定义一个叫look的函数,使用全局变量(这个&lt;br /&gt;
函数就不是函数式的了!)来描述所有的内容:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;look&lt;/span&gt; []
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;concat&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-location location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-paths location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-floor location objects object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;img src=&quot;assets/wpid-cs_106.jpg&quot; alt=&quot;cs_10.jpg&quot; /&gt;&lt;br /&gt;
我们来试一下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (look)
(you are in the living room of a wizards house -
there is a wizard snoring loudly on the couch -
there is a door going west from here -
there is a stairway going upstairs from here -
you see a whiskey-bottle on the floor -
you see a bucket on the floor -)
&lt;/pre&gt;
&lt;p&gt;
很酷吧!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 环游我们的游戏世界&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
好了,现在我们能看我们的世界了,让我们来写一些代码来环游我们的世&lt;br /&gt;
界.walk-direction包含了一些方向可以使我们走到那里:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;walk-direction&lt;/span&gt; [direction]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [next &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; direction &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
                            &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;rest&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; next &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;location&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;nth&lt;/span&gt; next 2&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;look&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
          &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot go that way -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这里的let用来创建局部变量next,用来描述玩家的方向.rest返回一个list,包含&lt;br /&gt;
原list中除了第一个元素外的全部元素.如果用户输入了错误的方向,next会返回&lt;br /&gt;
().cond类似于if-then条件:每个cond都包含一个值,lisp检查该值是否为真,如&lt;br /&gt;
果为真则执行其后的动作.在这里,如果下一个位置不是nil,则会定义玩家的&lt;br /&gt;
location到新位置,然后告诉玩家该位置的描述!如果next是nil,则告诉玩家,无&lt;br /&gt;
法到达,请重试:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;walk-direction 'west&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (walk-direction 'west)
(you are in a beautiful garden -
there is a well in front of you -
there is a door going east from here -
you see a frog on the floor -
you see a chain on the floor -)
&lt;/pre&gt;
&lt;p&gt;
现在,我们通过创建look函数来简化描述.walk-direction也是类似的功能.但是&lt;br /&gt;
它需要输入方向,而且还有个quote.我们能否告诉编译器west仅仅是个数据,而不是&lt;br /&gt;
代码呢?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 构建SPELs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
现在我们开始学习Lisp中一个很强大的功能:创建SPELs!&lt;br /&gt;
SPEL是&quot;语义增强逻辑&quot;的简称,它能够从语言级别,按照我们的需求定制,对我们的代码添加新的行为-这&lt;br /&gt;
是Lisp最为强大的一部分.为了开启SPELs,我们需要先激活Lisp编译器的SPEL&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;defspel&lt;/span&gt; [&amp;amp; rest] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;~@rest&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
现在,我们来编写我们的SPEL,叫做walk:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;walk&lt;/span&gt; [direction] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;walk-direction '~direction&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这段代码干了什么?它告诉编译器walk不是实际的名称,实际的名字叫&lt;br /&gt;
walk-direction,并且direction前面有个quote.SPEL的主要功能就是能在我们的&lt;br /&gt;
代码被编译器编译之前插入一些内容!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_116.jpg&quot; alt=&quot;cs_11.jpg&quot; /&gt;&lt;br /&gt;
注意到了吗?这段代码和我们之前写的describe-path很类似:在Lisp中,不只是代&lt;br /&gt;
码和数据看起来很像,代码和特殊形式对于编译器来说也是一样的-高度的统一带&lt;br /&gt;
来简明的设计!我们来试试新代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;walk&lt;/span&gt; east&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (walk east)                                             
(you are in the living room of a wizards house -
there is a wizard snoring loudly on the couch -
there is a door going west from here -
there is a stairway going upstairs from here -
you see a whiskey-bottle on the floor -
you see a bucket on the floor -)
&lt;/pre&gt;
&lt;p&gt;
感觉好多了!&lt;br /&gt;
现在我们来创建一个命令来收集游戏里的物品&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;pickup-object&lt;/span&gt; [object]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? object location object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt;
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;object-locations&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;assoc&lt;/span&gt; object-locations object 'body&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
          `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you are now carrying the ~object&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot get that.&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数检查物品是否在当前地点的地上-如果在,则将它放到list里面,并返回&lt;br /&gt;
成功提示!否则提示失败!&lt;br /&gt;
现在我们来创建另一个SPEL来简化这条命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;pickup&lt;/span&gt; [object] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pickup-object '~object&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
调用&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pickup whiskey-bottle&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (pickup whiskey-bottle)
(you are now carrying the whiskey-bottle)
&lt;/pre&gt;
&lt;p&gt;
现在我们来添加更多有用的命令-首先,一个能让我们查看我们捡到的物品的函&lt;br /&gt;
数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;inventory&lt;/span&gt; []
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? x 'body object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; objects&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
以及一个检查我们是否有某个物品的函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;have?&lt;/span&gt; [object]
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;some&lt;/span&gt; #{object} &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;inventory&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 创建特殊操作&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
现在我们只剩下一件事情需要做了:添加一些特殊动作,使得玩家能够赢得游戏.第&lt;br /&gt;
一条命令是让玩家在阁楼里给水桶焊接链条.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;chain-welded&lt;/span&gt; false&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;weld&lt;/span&gt; [subject object]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; location 'attic&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; subject 'chain&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; object 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'chain&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;not&lt;/span&gt; chain-welded&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;chain-welded&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
            '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the chain is now securely welded to the bucket -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot weld like that -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
首先我们创建了一个新的全局变量来进行判断,我们是否进行了此操作.然后我们&lt;br /&gt;
创建了一个weld函数,来确认此操作的条件是否完成,如果已完成则进行此操作.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_126.jpg&quot; alt=&quot;cs_12.jpg&quot; /&gt;&lt;br /&gt;
来试一下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;weld 'chain 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (weld 'chain 'bucket)
(you cannot weld like that -)
&lt;/pre&gt;
&lt;p&gt;
Oops&amp;#x2026;我们没有水桶,也没有链条,是吧?周围也没有焊接的机器!&lt;br /&gt;
现在,让我们创建一条命令来将链条和水桶放到井里:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;bucket-filled&lt;/span&gt; false&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;dunk&lt;/span&gt; [subject object]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; location 'garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; subject 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; object 'well&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             chain-welded&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;bucket-filled&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
            '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the bucket is now full of water&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot dunk like that -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
注意到了吗?这个命令和weld命令看起来好像!两条命令都需要检查位置,物体和&lt;br /&gt;
对象!但是它们还是有不同,以至于我们不能将它们抽到一个函数里.太可惜了!&lt;br /&gt;
但是&amp;#x2026;这可是Lisp.我们不止能写函数,还能写SPEL!我们来创建了SPEL来处理:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;game-action&lt;/span&gt; [command subj obj place &amp;amp; args]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;~command&lt;/span&gt; [subject# object#]
     `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; location '~'~place&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; '~subject# '~'~subj&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; '~object# '~'~obj&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? '~'~subj&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
                        ~@'~args
                        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;i cannot ~'~command like that -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
非常复杂的SPEL!它有很多怪异的quote,语法quote,逗号以及很多怪异的符号!更&lt;br /&gt;
重要的是他是一个构建SPEL的SPEL!!即使是很有经验的Lisp程序员,也需要费下&lt;br /&gt;
脑细胞才能写出这么个玩样!!(这里我们不管)&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_135.jpg&quot; alt=&quot;cs_13.jpg&quot; /&gt;&lt;br /&gt;
这个SPEL的只是向你展示,你是否够聪明来理解这么复杂的SPEL.而且,即使这段&lt;br /&gt;
代码很丑陋,如果它只需要写依次,并且能生成几百个命令,那么也是可以接受的!&lt;br /&gt;
让我们使用这个新的SPEL来替换我们的weld命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;game-action weld chain bucket attic
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;chain-welded&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
              '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the chain is now securely welded to the bucket -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you do not have a bucket -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
现在我们来看看这条命令变得多容易理解- game-action这个SPEL使得我们能编&lt;br /&gt;
写我们想要的核心代码,而不需要额外的信息.这就像我们创建了我们自己的专门&lt;br /&gt;
创建游戏命令的编程语言.使用SPEL创建伪语言称为领域特定语言编程(DSL),它&lt;br /&gt;
使得你的编码更加的快捷优美!&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;weld chain bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (weld chain bucket)
(you do not have a chain -)
&lt;/pre&gt;
&lt;p&gt;
&amp;#x2026;我们还没有做好焊接前的准备工作,但是这条命令生效了!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_144.jpg&quot; alt=&quot;cs_14.jpg&quot; /&gt;&lt;br /&gt;
下面我们重写dunk命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;game-action dunk bucket well garden
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; chain-welded 
                   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;bucket-filled&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                       '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the bucket is now full of water&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
                   &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the water level is too low to reach -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
注意weld命令需要检验我们是否有物体,但是dunk不需要.我们的game-action这&lt;br /&gt;
个SPEL使得这段代码易写易读.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_153.jpg&quot; alt=&quot;cs_15.jpg&quot; /&gt;&lt;br /&gt;
最后,就是将水泼到巫师身上:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;game-action splash bucket wizard living-room
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;not&lt;/span&gt; bucket-filled&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the bucket has nothing in it -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'frog&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the wizard awakens and sees that you stole
                                       his frog -
                                       he is so upset he banishes you to the
                                       netherworlds - you lose! the end -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                   &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the wizard awakens from his slumber and greets you
                               warmly -
                               he hands you the magic low-carb donut - you win!
                               the end -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;img src=&quot;assets/wpid-cs_162.jpg&quot; alt=&quot;cs_16.jpg&quot; /&gt;&lt;br /&gt;
现在你已经编写完成了一个文字冒险游戏了!&lt;br /&gt;
点击&lt;a href=&quot;http://www.lisperati.com/clojure-spels/cheat.html&quot;&gt;这里&lt;/a&gt;是完整的游戏.&lt;br /&gt;
点击&lt;a href=&quot;http://www.lisperati.com/clojure-spels/code.html&quot;&gt;这里&lt;/a&gt;是代码.&lt;br /&gt;
为了使教程尽可能的简单,很多Lisp的执行细节被忽略了,所以最后,让我们来看&lt;br /&gt;
看这些细节!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; 附录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
现在,我们来聊一聊被忽略的细节!&lt;br /&gt;
首先,Clojure有一套很成熟的定义变量以及改变变量值的系统.在此教程中,我们&lt;br /&gt;
只使用了def来设置和改变全局变量的值.而在真正的Clojure代码里,你不会这么&lt;br /&gt;
做.取而代之,你会使用&lt;a href=&quot;http://clojure.org/refs&quot;&gt;Refs&lt;/a&gt;,&lt;a href=&quot;http://clojure.org/atoms&quot;&gt;Atoms和&lt;/a&gt;&lt;a href=&quot;http://clojure.org/agents&quot;&gt;Agents&lt;/a&gt;,它们提供了更清晰,以及线程安全的&lt;br /&gt;
方式来管理数据.&lt;/p&gt;
&lt;p&gt;
另一个问题就是我们在代码中大量使用了符号(symbol)&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;'&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;this is not how &lt;span style=&quot;color: #cb4b16;&quot;&gt;Lispers&lt;/span&gt; usually write text&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Lispers write text using double quotes&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
符号在Clojure有特殊含义,主要是用来持有函数,变量或其它内容的.所以,在&lt;br /&gt;
Lisp中将符号作为文本信息描述是很奇怪的事情!使用字符串来显示文本信息可&lt;br /&gt;
以避免这样的尴尬!不过,使用字符串的话,在教程里就没法讲很多关于符号的内&lt;br /&gt;
容了!&lt;/p&gt;
&lt;p&gt;
还有就是SPEL在Lisp里面更普遍的叫法是&quot;宏&quot;,使用defmacro来定义,但是这个名&lt;br /&gt;
字不易于教学,所以没有提及.你可以阅读&lt;a href=&quot;http://www.lisperati.com/clojure-spels/no_macros.html&quot;&gt;此文&lt;/a&gt;,这是我为什么没有使用&quot;宏&quot;这个&lt;br /&gt;
名字的原因.最后,在编写类似game-action这样的SPEL的时候,很可能会发生命名&lt;br /&gt;
重复的问题.当你编写了足够多的lisp的时候,你会越来越能体会到这个问题了.&lt;/p&gt;
&lt;p&gt;
Q. 后面我该阅读哪些内容来扩充我的Lisp知识?&lt;br /&gt;
A. 在&lt;a href=&quot;http://www.cliki.net/Lisp%2520books&quot;&gt;cliki网站&lt;/a&gt;有很多Lisp书籍可以下载.&lt;/p&gt;
&lt;p&gt;
如果你对于理论上的内容很感兴趣,那么我推荐Paul Graham的&lt;br /&gt;
&lt;a href=&quot;http://www.paulgraham.com/onlisp.html&quot;&gt;On Lisp&lt;/a&gt;电子书,它是免费的.他网站上的一些短文也很精彩.&lt;br /&gt;
如果你对实际应用比较感兴趣,那么大多数Lisp程序员对Perter Seibel编写的&quot;Practical Common&lt;br /&gt;
Lisp&quot;这本书推崇有加,你可以从&lt;a href=&quot;http://www.gigamonkeys.com/book/&quot;&gt;这里&lt;/a&gt;获得&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; 为什么没有使用&quot;宏&quot;这个词&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;
编写这个教程的一个意图是使用宏来解决真实的难题.而经常的,当我向没有Lisp&lt;br /&gt;
经验的人解释宏这个概念的时候,我得到的答复往往是,&quot;哦!C++里也有宏&quot;.当发&lt;br /&gt;
生这种事情的时候,我就很难去解释宏的概念了.的确,Lisp中的宏和C++中的宏的&lt;br /&gt;
确有几分相似,它们都是为了能通过编译器来改进代码的编写&amp;#x2026;&lt;/p&gt;
&lt;p&gt;
&amp;#x2026;所以,假设一下,如果John McCarthy使用了&quot;add&quot;而不是&quot;cons&quot;这个词来将元&lt;br /&gt;
素添加到list中:我就真的很难解释cons是如何工作的了!&lt;/p&gt;
&lt;p&gt;
所以,我决定在此文中使用一个新的词汇:SPEL,语义增强逻辑的简称,它更易理解&lt;br /&gt;
一些:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;它解释了Lisp宏的核心功能,能改变Lisp运行环境的行为
&lt;/li&gt;
&lt;li&gt;SPEL这个术语可以被用来很高雅的解释很多语言上观念.
&lt;/li&gt;
&lt;li&gt;这个术语不会导致Lisp中的宏与其它的宏被混为一谈
&lt;/li&gt;
&lt;li&gt;SPEL这个词重复的可能性非常低.Google搜索&quot;macro 或者 macros 程序 -lisp&lt;br /&gt;
-scheme&quot;返回大概1150000条结果.而搜索&quot;spel 或者 spels 程序 -lisp&lt;br /&gt;
-scheme&quot;值返回28400条结果.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
所以,我希望,作为一个Lisp程序员,你能接受这个术语-当然了,像这样的新词汇&lt;br /&gt;
会被接受的可能性非常低.&lt;/p&gt;
&lt;p&gt;
如果你有一个库或者是一个Lisp实现者,请先放下你手头上的工作,先在你的库里,添&lt;br /&gt;
加下面这行代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;defspel&lt;/span&gt; [&amp;amp; rest] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;~@rest&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt; 译者感想&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;本人对Lisp的宏还是有些了解的,所以个人无法接受SPEL这个新词汇
&lt;/li&gt;
&lt;li&gt;且SPEL使得代码不易阅读,就game-action这个SPEL来说,使用了两层,而使用宏&lt;br /&gt;
只需要一层
&lt;/li&gt;
&lt;li&gt;附录中是我使用Clojure的惯用法重新改写的代码,且文字翻译成了中文.以及&lt;br /&gt;
使用了宏而不是SPEL.各位可比较,自行选择
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2014/05/wpid-game.zip&quot;&gt;源代码&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 语法和语义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 为我们的游戏世界定义数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4. 环顾我们的游戏世界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5. 函数式编码风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6. 环游我们的游戏世界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7. 构建SPELs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8. 创建特殊操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9. 附录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10. 为什么没有使用&quot;宏&quot;这个词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11. 译者感想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
本文翻译自:&lt;a href=&quot;http://www.lisperati.com/clojure-spels/casting.html&quot;&gt;Casting SPELs in Clojure&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_016.jpg&quot; alt=&quot;cs_01.jpg&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 准备&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
任何学过Lisp的人都会说List和其它语言有很大的不同.它有很多不可思议的地&lt;br /&gt;
方.本文将告诉你它有哪些独特之处!&lt;br /&gt;
本文适用于Clojure,它是一个运行在JVM上的Lisp方言.Clojure的API和语法和&lt;br /&gt;
Common Lisp很类似,但是还是有足够多的区别,需要单独为其写个教程.&lt;br /&gt;
在大部分情况下,我们会说Lisp而不是Clojure,因为大部分的概念在Lisp中是通&lt;br /&gt;
用的.我们会指出Clojure特有的内容.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_026.jpg&quot; alt=&quot;cs_02.jpg&quot; /&gt;&lt;br /&gt;
Clojure是运行在JVM之上的,所以你需要先安装JVM.如果你是MAC机,那么Java已&lt;br /&gt;
经被安装过了.如果是Linux或者Windows系统,你需要到&lt;a href=&quot;http://java.sun.com/javase/downloads/index.jsp&quot;&gt;Oracle Java官网&lt;/a&gt;下载对&lt;br /&gt;
应版本的Java.而Clojure,你可以从它的&lt;a href=&quot;http://clojure.org/&quot;&gt;官网&lt;/a&gt;获得最新版本.&lt;br /&gt;
下载完成后,你只需要解压缩,打开命令行,切换到解压缩目录,输入:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;java -jar clojure.jar
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果没有问题,那么你将会看到Clojure输出提示&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;Clojure 1.6.0
&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
教程中有很多Clojure代码片段,类似下面的样子:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;'&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;these kinds of boxes&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
你只需要将这些代码片段拷贝到Clojure REPL中运行就可以了!当你学习完此教&lt;br /&gt;
程,你将会有一个你自己的文字冒险游戏了!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 语法和语义&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
每一个编程语言是由语法和语义组成的.语法是组成你的程序的骨架,你必须要&lt;br /&gt;
遵循它们,这样编译器才能知道你的程序里什么是什么,比如说什么是函数,什么&lt;br /&gt;
是变量,等等!而语义是个比较&quot;随便&quot;的东西,例如你的程序里有哪些不同的命令,&lt;br /&gt;
或者在程序的哪个部分能访问到哪些变量!这里Lisp比较特别的地方就是,Lisp的&lt;br /&gt;
语法笔其它任何语言都要简单.&lt;/p&gt;
&lt;p&gt;
首先,Lisp语法规定,所有传递给Lisp编译器的文本需要是个list,当然这个list&lt;br /&gt;
可以无限嵌套.每个list都必须使用括号包裹.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_036.jpg&quot; alt=&quot;cs_03.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
另外,Lisp编译器使用两种模式来读取你的代码:代码模式和数据模式.当你在数&lt;br /&gt;
据模式下,你可以将任何东西塞到你的list中.但是在代码模式下,你的list需要&lt;br /&gt;
是叫做form的特殊类型.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_046.jpg&quot; alt=&quot;cs_04.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
form也是个list,不过它的第一个符号被lisp编译器特殊对待了&amp;#x2014;一般被当做函&lt;br /&gt;
数的名字.在这种情况下,编译器会将list中的其它元素作为函数参数传递给这个&lt;br /&gt;
函数.默认情况下,编译器运行在代码模式下,除非你特意告诉它进入数据模式.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 为我们的游戏世界定义数据&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
为了进一步的学习form,让我们来创建一些form,来定义我们游戏世界里的数据.首&lt;br /&gt;
先,我们的游戏有一些对象,玩家可以使用他们&amp;#x2013;让我们来定义吧:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;objects&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;whiskey-bottle bucket frog chain&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
让我们来看看这行代码是什么意思:Lisp编译器总是使用代码模式来读取内容,所&lt;br /&gt;
以第一个符号(这里是def),肯定是个命令.在这里,它的作用就是给某个变量设&lt;br /&gt;
值:这里变量就是objects,而值是一个包含四个对象的list.这个list是数据(我&lt;br /&gt;
们可不想编译器去调用一个叫做whiskey-bottle的函数),所以在读取这个list时&lt;br /&gt;
我们需要将其设值为数据模式.在list前面的哪个单引号就是干这个的:&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_056.jpg&quot; alt=&quot;cs_05.jpg&quot; /&gt;&lt;br /&gt;
def命令就是用来设值的(如果你学过Common Lisp,你应该会知道它和Common&lt;br /&gt;
Lisp中的setf命令等价,但是Clojure中没有setf命令)&lt;br /&gt;
现在我们在游戏里定义了一些对象,现在让我们来定义一下游戏地图.下面是我们&lt;br /&gt;
的游戏世界:&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_066.jpg&quot; alt=&quot;cs_06.jpg&quot; /&gt;&lt;br /&gt;
在这个简单的游戏里,只有三个地点:一个房子,它包含起居室,阁楼和花园.让我&lt;br /&gt;
们来定义一个新变量,叫做game-map来描述这个游戏地图:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;game-map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt;
   'living-room '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;((&lt;/span&gt;you are in the living room
                   of a wizards house - there is a wizard
                   snoring loudly on the couch -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;west door garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;upstairs stairway attic&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
   'garden '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;((&lt;/span&gt;you are in a beautiful garden -
              there is a well in front of you -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;east door living-room&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
   'attic '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;((&lt;/span&gt;you are in the attic of the
             wizards house - there is a giant
             welding torch in the corner -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
            &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;downstairs stairway living-room&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个map包含了三个地点的所有重要信息:每个地点都有个独立的名字,一个简短&lt;br /&gt;
的描述,描述了我们能在这些地点看到什么,以及如何进入此处或从此处出去.请&lt;br /&gt;
注意这个包含了丰富信息的变量是如何定义的&amp;#x2014;Lisp程序员更喜欢用小巧的代&lt;br /&gt;
码片段而不是一大片代码,因为小代码更容易理解.&lt;/p&gt;
&lt;p&gt;
现在我们有了一个地图和一组对象,让我们来创建另一个变量,来描述这些对象在&lt;br /&gt;
地图的哪些地方.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;object-locations&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt;
                       'whiskey-bottle 'living-room
                       'bucket 'living-room
                       'chain 'garden
                       'frog 'garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这里我们将每个对象和地点进行了关联.Clojure提供了Map这个数据结构.Map使&lt;br /&gt;
用hash-map函数来创建,它需要一组参数类似(key1 value1 keys value2&amp;#x2026;).我&lt;br /&gt;
们的game-map变量也是个Map&amp;#x2014;三个key分别是living-room,garden和attic.&lt;/p&gt;
&lt;p&gt;
我们定义了游戏世界,以及游戏世界中的对象,现在就剩下一件事了,就是描述玩&lt;br /&gt;
家的地点!&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;location&lt;/span&gt; 'living-room&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
搞定,现在让我们来定义游戏操作吧!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_076.jpg&quot; alt=&quot;cs_07.jpg&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 环顾我们的游戏世界&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
我们想要的第一个命令能够告诉我们该地点的描述.那么我们该怎么定义这个函&lt;br /&gt;
数呢?它要知道我们想要描述的地点以及能够从map中查找地点的描述.如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-location&lt;/span&gt; [location game-map]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
defn定义了一个函数.函数的名字叫做describe-location,它需要两个参数:地点&lt;br /&gt;
和游戏地图.这两个变量在函数定义的括号内,所以它们是局部变量,因此对于全&lt;br /&gt;
局的location和game-map没有关系.注意到了吗?Lisp中的函数与其它语言中的函&lt;br /&gt;
数定义相比,更像是数学中的函数:它不打印信息或者弹出消息框:它所作的就是&lt;br /&gt;
返回结果.我们假设现在我们在起居室里!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_086.jpg&quot; alt=&quot;cs_08.jpg&quot; /&gt;&lt;br /&gt;
为了能找到起居室的描述,describe-locatin函数首先需要从地图中找到起居&lt;br /&gt;
室.(location game-map)就是进行从game-map中查找内容的,并返回起居室的描&lt;br /&gt;
述.然后first命令来处理返回值,取得返回的list的第一个元素,这个就是起居室&lt;br /&gt;
的描述了.&lt;br /&gt;
现在我们来测试一下&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-location 'living-room game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (describe-location 'living-room game-map)
(you are in the living-room of a wizard's house -
there is a wizard snoring loudly on the couch -)
&lt;/pre&gt;
&lt;p&gt;
很完美!这就是我们要的结果!请注意我们在living-room前添加了一个单引号,因&lt;br /&gt;
为这个符号是地点map的一个名称!但是,为什么我们没有在game-map前面添加单&lt;br /&gt;
引号呢?这是因为我们需要编译器去查询这个符号所指向的数据(就是那个map)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 函数式编码风格&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
你可能已经发现了describe-location函数有几个让人不太舒服的地方.第一,为&lt;br /&gt;
什么要传递位置和map参数,而不是直接使用已经定义的全局变量?原因是Lisp程&lt;br /&gt;
序员喜欢写函数式风格的代码.函数式风格的代码,主要遵循下面三条规则:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;只读取函数传递的参数或在函数内创建的变量
&lt;/li&gt;
&lt;li&gt;不改变已经被设值的变量的值
&lt;/li&gt;
&lt;li&gt;除了返回值,不去影响函数外的任何内容
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
你也许会怀疑在这种限制下你还能写代码吗?答案是:可以!为什么很多人对这些&lt;br /&gt;
规则感到疑惑呢?一个很重要的原因是:遵循此种风格的代码更加的引用透明&lt;br /&gt;
(referential transparency):这意味着,对于给定的代码,你传入相同的参数,永&lt;br /&gt;
远返回相同的结果&amp;#x2014;这能减少程序的错误,也能提高程序的生产力!&lt;/p&gt;
&lt;p&gt;
当然了,你也会有一些非函数式风格的代码,因为不这么做,你无法和其它用户或&lt;br /&gt;
外部内容进行交互.教程后面会有这些函数,他们不遵循上面的规则.&lt;/p&gt;
&lt;p&gt;
describe-location函数的另一个问题是,它没告诉我们怎么进入一个位置或者怎&lt;br /&gt;
么从某个位置出来.让我们来编写这样的函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-path&lt;/span&gt; [path]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;there is a ~&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; path&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; going ~&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; path&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; from here -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数看起来很明了:它看起来更像是数据而不是函数.我们先来尝试调用它,看&lt;br /&gt;
它做了些什么:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-path '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;west door garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (describe-path '(west door garden))
(user/there user/is user/a door user/going west user/from user/here clojure.core/-)
&lt;/pre&gt;
&lt;p&gt;
这是什么?!结果看起来很乱,包含了很多的/和一些其它的文字!这是因为Clojure&lt;br /&gt;
会将命名空间的名字添加到表达式的前面.我们这里不深究细节,只给你提供消除&lt;br /&gt;
这些内容的函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;spel-print&lt;/span&gt; [list] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;symbol&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt; list&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
修改调用方式&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-path '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;west door garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (spel-print (describe-path '(west door garden)))
(there is a door going west from here -)
&lt;/pre&gt;
&lt;p&gt;
现在结果很清晰了:这个函数接收一个描述路径的list然后将其解析到一个句子&lt;br /&gt;
里面.我们回过头来看这个函数,这个函数和它产生的数据非常的像:它就是拼接&lt;br /&gt;
第一个和第二个list的元素到语句中!它是怎么做到的?使用语法quote!&lt;/p&gt;
&lt;p&gt;
还记得我们使用quote来从代码模式切换到数据模式吗?语法quote的功能类似,但&lt;br /&gt;
是还不只这样.在语法quote里,我们还能使用'~'再次从数据模式切换回代码模式.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_096.png&quot; alt=&quot;cs_09.png&quot; /&gt;&lt;br /&gt;
语法quote是List的一个很强大的功能!它能使我们的代码看起来像它创建的数据.这&lt;br /&gt;
在函数式编码中很常见:创建这种样子的函数,使得我们的代码更易读也更稳健:&lt;br /&gt;
只要数据不变,函数就不需要修改.想象一下,你能否在VB或C中编写类似的代码?&lt;br /&gt;
你可能需要将文字切成小块,然后在一点点的组装-这和数据本身看起来差距很大,更&lt;br /&gt;
别说代码的稳健性了!&lt;/p&gt;
&lt;p&gt;
现在我们能描述一个路径,但是一个地点可能会有多个路径,所以让我们来创建一&lt;br /&gt;
个函数叫做describe-paths:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-paths&lt;/span&gt; [location game-map]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; concat &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; describe-path &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;rest&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; game-map location&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数使用了另一个在函数式编程中很常用的技术:高阶函数.apply和map这两&lt;br /&gt;
个函数能将其它的函数作为参数.map函数将另一个函数分别作用到list中的每个&lt;br /&gt;
对象上,这里是调用describe-path函数.apply concat是为了减少多余的括号,没&lt;br /&gt;
有多少功能性操作!我们来试试新函数&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-paths 'living-room game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (spel-print (describe-paths 'living-room game-map))
(there is a door going west from here -
there is a stairway going upstairs from here -)
&lt;/pre&gt;
&lt;p&gt;
漂亮!&lt;br /&gt;
最后,我们还剩下一件事要做:描述某个地点的某个对象!我们先写个帮助函数来&lt;br /&gt;
告诉我们在某个地方是否有某个对象!&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;is-at?&lt;/span&gt; [obj loc obj-loc] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;obj obj-loc&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; loc&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
=也是个函数,它判断对象的地点是否和当前地点相同!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_096.jpg&quot; alt=&quot;cs_09.jpg&quot; /&gt;&lt;br /&gt;
我们来尝试一下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? 'whiskey-bottle 'living-room object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (is-at? 'whiskey-bottle 'living-room object-locations)
true
&lt;/pre&gt;
&lt;p&gt;
返回结果是true,意味着whiskey-bottle在起居室.&lt;/p&gt;
&lt;p&gt;
现在让我们来使用这个函数描述地板:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;describe-floor&lt;/span&gt; [loc objs obj-loc]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; concat &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x]
                       `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you see a ~x on the floor -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
                     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] 
                               &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? x loc obj-loc&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; objs&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数包含了很多新事物:首先,它有匿名函数(fn定义的函数).第一个fn干的&lt;br /&gt;
事,和下面的函数做的事情是一样的:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;blabla&lt;/span&gt; [x] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you see a ~x on the floor.&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
然后将这个blabla函数传递给map函数.filter函数是过滤掉那些在当前位置没有&lt;br /&gt;
出现的物体.我们来试一下新函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-floor 'living-room objects object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (spel-print (describe-floor 'living-room objects object-locations))
(you see a whiskey-bottle on the floor - you see a bucket on the floor -)
&lt;/pre&gt;
&lt;p&gt;
现在,让我们来将这些函数串联起来,定义一个叫look的函数,使用全局变量(这个&lt;br /&gt;
函数就不是函数式的了!)来描述所有的内容:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;look&lt;/span&gt; []
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;concat&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-location location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-paths location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;describe-floor location objects object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;img src=&quot;assets/wpid-cs_106.jpg&quot; alt=&quot;cs_10.jpg&quot; /&gt;&lt;br /&gt;
我们来试一下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (look)
(you are in the living room of a wizards house -
there is a wizard snoring loudly on the couch -
there is a door going west from here -
there is a stairway going upstairs from here -
you see a whiskey-bottle on the floor -
you see a bucket on the floor -)
&lt;/pre&gt;
&lt;p&gt;
很酷吧!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 环游我们的游戏世界&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
好了,现在我们能看我们的世界了,让我们来写一些代码来环游我们的世&lt;br /&gt;
界.walk-direction包含了一些方向可以使我们走到那里:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;walk-direction&lt;/span&gt; [direction]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [next &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; direction &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
                            &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;rest&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;location game-map&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; next &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;location&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;nth&lt;/span&gt; next 2&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;look&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
          &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot go that way -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这里的let用来创建局部变量next,用来描述玩家的方向.rest返回一个list,包含&lt;br /&gt;
原list中除了第一个元素外的全部元素.如果用户输入了错误的方向,next会返回&lt;br /&gt;
().cond类似于if-then条件:每个cond都包含一个值,lisp检查该值是否为真,如&lt;br /&gt;
果为真则执行其后的动作.在这里,如果下一个位置不是nil,则会定义玩家的&lt;br /&gt;
location到新位置,然后告诉玩家该位置的描述!如果next是nil,则告诉玩家,无&lt;br /&gt;
法到达,请重试:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;walk-direction 'west&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (walk-direction 'west)
(you are in a beautiful garden -
there is a well in front of you -
there is a door going east from here -
you see a frog on the floor -
you see a chain on the floor -)
&lt;/pre&gt;
&lt;p&gt;
现在,我们通过创建look函数来简化描述.walk-direction也是类似的功能.但是&lt;br /&gt;
它需要输入方向,而且还有个quote.我们能否告诉编译器west仅仅是个数据,而不是&lt;br /&gt;
代码呢?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 构建SPELs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
现在我们开始学习Lisp中一个很强大的功能:创建SPELs!&lt;br /&gt;
SPEL是&quot;语义增强逻辑&quot;的简称,它能够从语言级别,按照我们的需求定制,对我们的代码添加新的行为-这&lt;br /&gt;
是Lisp最为强大的一部分.为了开启SPELs,我们需要先激活Lisp编译器的SPEL&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;defspel&lt;/span&gt; [&amp;amp; rest] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;~@rest&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
现在,我们来编写我们的SPEL,叫做walk:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;walk&lt;/span&gt; [direction] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;walk-direction '~direction&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这段代码干了什么?它告诉编译器walk不是实际的名称,实际的名字叫&lt;br /&gt;
walk-direction,并且direction前面有个quote.SPEL的主要功能就是能在我们的&lt;br /&gt;
代码被编译器编译之前插入一些内容!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_116.jpg&quot; alt=&quot;cs_11.jpg&quot; /&gt;&lt;br /&gt;
注意到了吗?这段代码和我们之前写的describe-path很类似:在Lisp中,不只是代&lt;br /&gt;
码和数据看起来很像,代码和特殊形式对于编译器来说也是一样的-高度的统一带&lt;br /&gt;
来简明的设计!我们来试试新代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;walk&lt;/span&gt; east&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (walk east)                                             
(you are in the living room of a wizards house -
there is a wizard snoring loudly on the couch -
there is a door going west from here -
there is a stairway going upstairs from here -
you see a whiskey-bottle on the floor -
you see a bucket on the floor -)
&lt;/pre&gt;
&lt;p&gt;
感觉好多了!&lt;br /&gt;
现在我们来创建一个命令来收集游戏里的物品&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;pickup-object&lt;/span&gt; [object]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? object location object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt;
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;object-locations&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;assoc&lt;/span&gt; object-locations object 'body&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
          `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you are now carrying the ~object&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot get that.&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这个函数检查物品是否在当前地点的地上-如果在,则将它放到list里面,并返回&lt;br /&gt;
成功提示!否则提示失败!&lt;br /&gt;
现在我们来创建另一个SPEL来简化这条命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;pickup&lt;/span&gt; [object] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pickup-object '~object&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
调用&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pickup whiskey-bottle&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (pickup whiskey-bottle)
(you are now carrying the whiskey-bottle)
&lt;/pre&gt;
&lt;p&gt;
现在我们来添加更多有用的命令-首先,一个能让我们查看我们捡到的物品的函&lt;br /&gt;
数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;inventory&lt;/span&gt; []
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;is-at? x 'body object-locations&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; objects&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
以及一个检查我们是否有某个物品的函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;have?&lt;/span&gt; [object]
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;some&lt;/span&gt; #{object} &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;inventory&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 创建特殊操作&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
现在我们只剩下一件事情需要做了:添加一些特殊动作,使得玩家能够赢得游戏.第&lt;br /&gt;
一条命令是让玩家在阁楼里给水桶焊接链条.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;chain-welded&lt;/span&gt; false&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;weld&lt;/span&gt; [subject object]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; location 'attic&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; subject 'chain&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; object 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'chain&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;not&lt;/span&gt; chain-welded&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;chain-welded&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
            '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the chain is now securely welded to the bucket -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot weld like that -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
首先我们创建了一个新的全局变量来进行判断,我们是否进行了此操作.然后我们&lt;br /&gt;
创建了一个weld函数,来确认此操作的条件是否完成,如果已完成则进行此操作.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_126.jpg&quot; alt=&quot;cs_12.jpg&quot; /&gt;&lt;br /&gt;
来试一下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;weld 'chain 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (weld 'chain 'bucket)
(you cannot weld like that -)
&lt;/pre&gt;
&lt;p&gt;
Oops&amp;#x2026;我们没有水桶,也没有链条,是吧?周围也没有焊接的机器!&lt;br /&gt;
现在,让我们创建一条命令来将链条和水桶放到井里:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;bucket-filled&lt;/span&gt; false&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;dunk&lt;/span&gt; [subject object]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; location 'garden&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; subject 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; object 'well&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
             chain-welded&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;bucket-filled&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
            '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the bucket is now full of water&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you cannot dunk like that -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
注意到了吗?这个命令和weld命令看起来好像!两条命令都需要检查位置,物体和&lt;br /&gt;
对象!但是它们还是有不同,以至于我们不能将它们抽到一个函数里.太可惜了!&lt;br /&gt;
但是&amp;#x2026;这可是Lisp.我们不止能写函数,还能写SPEL!我们来创建了SPEL来处理:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;game-action&lt;/span&gt; [command subj obj place &amp;amp; args]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defspel&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;~command&lt;/span&gt; [subject# object#]
     `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;spel-print &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; location '~'~place&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; '~subject# '~'~subj&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; '~object# '~'~obj&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? '~'~subj&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
                        ~@'~args
                        &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;i cannot ~'~command like that -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
非常复杂的SPEL!它有很多怪异的quote,语法quote,逗号以及很多怪异的符号!更&lt;br /&gt;
重要的是他是一个构建SPEL的SPEL!!即使是很有经验的Lisp程序员,也需要费下&lt;br /&gt;
脑细胞才能写出这么个玩样!!(这里我们不管)&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_135.jpg&quot; alt=&quot;cs_13.jpg&quot; /&gt;&lt;br /&gt;
这个SPEL的只是向你展示,你是否够聪明来理解这么复杂的SPEL.而且,即使这段&lt;br /&gt;
代码很丑陋,如果它只需要写依次,并且能生成几百个命令,那么也是可以接受的!&lt;br /&gt;
让我们使用这个新的SPEL来替换我们的weld命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;game-action weld chain bucket attic
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;chain-welded&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
              '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the chain is now securely welded to the bucket -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;you do not have a bucket -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
现在我们来看看这条命令变得多容易理解- game-action这个SPEL使得我们能编&lt;br /&gt;
写我们想要的核心代码,而不需要额外的信息.这就像我们创建了我们自己的专门&lt;br /&gt;
创建游戏命令的编程语言.使用SPEL创建伪语言称为领域特定语言编程(DSL),它&lt;br /&gt;
使得你的编码更加的快捷优美!&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;weld chain bucket&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
user=&amp;gt; (weld chain bucket)
(you do not have a chain -)
&lt;/pre&gt;
&lt;p&gt;
&amp;#x2026;我们还没有做好焊接前的准备工作,但是这条命令生效了!&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_144.jpg&quot; alt=&quot;cs_14.jpg&quot; /&gt;&lt;br /&gt;
下面我们重写dunk命令:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;game-action dunk bucket well garden
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; chain-welded 
                   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;bucket-filled&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                       '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the bucket is now full of water&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
                   &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the water level is too low to reach -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
注意weld命令需要检验我们是否有物体,但是dunk不需要.我们的game-action这&lt;br /&gt;
个SPEL使得这段代码易写易读.&lt;br /&gt;
&lt;img src=&quot;assets/wpid-cs_153.jpg&quot; alt=&quot;cs_15.jpg&quot; /&gt;&lt;br /&gt;
最后,就是将水泼到巫师身上:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;game-action splash bucket wizard living-room
             &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;not&lt;/span&gt; bucket-filled&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the bucket has nothing in it -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;have? 'frog&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the wizard awakens and sees that you stole
                                       his frog -
                                       he is so upset he banishes you to the
                                       netherworlds - you lose! the end -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
                   &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;the wizard awakens from his slumber and greets you
                               warmly -
                               he hands you the magic low-carb donut - you win!
                               the end -&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;img src=&quot;assets/wpid-cs_162.jpg&quot; alt=&quot;cs_16.jpg&quot; /&gt;&lt;br /&gt;
现在你已经编写完成了一个文字冒险游戏了!&lt;br /&gt;
点击&lt;a href=&quot;http://www.lisperati.com/clojure-spels/cheat.html&quot;&gt;这里&lt;/a&gt;是完整的游戏.&lt;br /&gt;
点击&lt;a href=&quot;http://www.lisperati.com/clojure-spels/code.html&quot;&gt;这里&lt;/a&gt;是代码.&lt;br /&gt;
为了使教程尽可能的简单,很多Lisp的执行细节被忽略了,所以最后,让我们来看&lt;br /&gt;
看这些细节!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; 附录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
现在,我们来聊一聊被忽略的细节!&lt;br /&gt;
首先,Clojure有一套很成熟的定义变量以及改变变量值的系统.在此教程中,我们&lt;br /&gt;
只使用了def来设置和改变全局变量的值.而在真正的Clojure代码里,你不会这么&lt;br /&gt;
做.取而代之,你会使用&lt;a href=&quot;http://clojure.org/refs&quot;&gt;Refs&lt;/a&gt;,&lt;a href=&quot;http://clojure.org/atoms&quot;&gt;Atoms和&lt;/a&gt;&lt;a href=&quot;http://clojure.org/agents&quot;&gt;Agents&lt;/a&gt;,它们提供了更清晰,以及线程安全的&lt;br /&gt;
方式来管理数据.&lt;/p&gt;
&lt;p&gt;
另一个问题就是我们在代码中大量使用了符号(symbol)&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;'&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;this is not how &lt;span style=&quot;color: #cb4b16;&quot;&gt;Lispers&lt;/span&gt; usually write text&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Lispers write text using double quotes&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
符号在Clojure有特殊含义,主要是用来持有函数,变量或其它内容的.所以,在&lt;br /&gt;
Lisp中将符号作为文本信息描述是很奇怪的事情!使用字符串来显示文本信息可&lt;br /&gt;
以避免这样的尴尬!不过,使用字符串的话,在教程里就没法讲很多关于符号的内&lt;br /&gt;
容了!&lt;/p&gt;
&lt;p&gt;
还有就是SPEL在Lisp里面更普遍的叫法是&quot;宏&quot;,使用defmacro来定义,但是这个名&lt;br /&gt;
字不易于教学,所以没有提及.你可以阅读&lt;a href=&quot;http://www.lisperati.com/clojure-spels/no_macros.html&quot;&gt;此文&lt;/a&gt;,这是我为什么没有使用&quot;宏&quot;这个&lt;br /&gt;
名字的原因.最后,在编写类似game-action这样的SPEL的时候,很可能会发生命名&lt;br /&gt;
重复的问题.当你编写了足够多的lisp的时候,你会越来越能体会到这个问题了.&lt;/p&gt;
&lt;p&gt;
Q. 后面我该阅读哪些内容来扩充我的Lisp知识?&lt;br /&gt;
A. 在&lt;a href=&quot;http://www.cliki.net/Lisp%2520books&quot;&gt;cliki网站&lt;/a&gt;有很多Lisp书籍可以下载.&lt;/p&gt;
&lt;p&gt;
如果你对于理论上的内容很感兴趣,那么我推荐Paul Graham的&lt;br /&gt;
&lt;a href=&quot;http://www.paulgraham.com/onlisp.html&quot;&gt;On Lisp&lt;/a&gt;电子书,它是免费的.他网站上的一些短文也很精彩.&lt;br /&gt;
如果你对实际应用比较感兴趣,那么大多数Lisp程序员对Perter Seibel编写的&quot;Practical Common&lt;br /&gt;
Lisp&quot;这本书推崇有加,你可以从&lt;a href=&quot;http://www.gigamonkeys.com/book/&quot;&gt;这里&lt;/a&gt;获得&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; 为什么没有使用&quot;宏&quot;这个词&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;
编写这个教程的一个意图是使用宏来解决真实的难题.而经常的,当我向没有Lisp&lt;br /&gt;
经验的人解释宏这个概念的时候,我得到的答复往往是,&quot;哦!C++里也有宏&quot;.当发&lt;br /&gt;
生这种事情的时候,我就很难去解释宏的概念了.的确,Lisp中的宏和C++中的宏的&lt;br /&gt;
确有几分相似,它们都是为了能通过编译器来改进代码的编写&amp;#x2026;&lt;/p&gt;
&lt;p&gt;
&amp;#x2026;所以,假设一下,如果John McCarthy使用了&quot;add&quot;而不是&quot;cons&quot;这个词来将元&lt;br /&gt;
素添加到list中:我就真的很难解释cons是如何工作的了!&lt;/p&gt;
&lt;p&gt;
所以,我决定在此文中使用一个新的词汇:SPEL,语义增强逻辑的简称,它更易理解&lt;br /&gt;
一些:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;它解释了Lisp宏的核心功能,能改变Lisp运行环境的行为
&lt;/li&gt;
&lt;li&gt;SPEL这个术语可以被用来很高雅的解释很多语言上观念.
&lt;/li&gt;
&lt;li&gt;这个术语不会导致Lisp中的宏与其它的宏被混为一谈
&lt;/li&gt;
&lt;li&gt;SPEL这个词重复的可能性非常低.Google搜索&quot;macro 或者 macros 程序 -lisp&lt;br /&gt;
-scheme&quot;返回大概1150000条结果.而搜索&quot;spel 或者 spels 程序 -lisp&lt;br /&gt;
-scheme&quot;值返回28400条结果.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
所以,我希望,作为一个Lisp程序员,你能接受这个术语-当然了,像这样的新词汇&lt;br /&gt;
会被接受的可能性非常低.&lt;/p&gt;
&lt;p&gt;
如果你有一个库或者是一个Lisp实现者,请先放下你手头上的工作,先在你的库里,添&lt;br /&gt;
加下面这行代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;defspel&lt;/span&gt; [&amp;amp; rest] `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;~@rest&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt; 译者感想&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;本人对Lisp的宏还是有些了解的,所以个人无法接受SPEL这个新词汇
&lt;/li&gt;
&lt;li&gt;且SPEL使得代码不易阅读,就game-action这个SPEL来说,使用了两层,而使用宏&lt;br /&gt;
只需要一层
&lt;/li&gt;
&lt;li&gt;附录中是我使用Clojure的惯用法重新改写的代码,且文字翻译成了中文.以及&lt;br /&gt;
使用了宏而不是SPEL.各位可比较,自行选择
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2014/05/wpid-game.zip&quot;&gt;源代码&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure教程:Record和Protocol</title>
        <link href="http://liyouhai.com/clojure/clojure%25e6%2595%2599%25e7%25a8%258brecord%25e5%2592%258cprotocol.html"/>
        <updated>2014-05-11T12:34:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e6%95%99%e7%a8%8brecord%e5%92%8cprotocol</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 个人感受&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
本文翻译自:&lt;a href=&quot;http://www.jayway.com/2013/02/05/learn-clojure-using-records-and-protocols/&quot;&gt;Learn Clojure using records and protocols&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
当我对Clojure的括号不再疑惑后,另一个让我质疑为何要学习Clojure的问题是&lt;br /&gt;
使用REPL很爽,但是我怎么来构建大型项目?&quot;.实际上,由于我的面向对象编程经&lt;br /&gt;
验,我其实要问的是&quot;我怎么才能将函数封装到类似class的东西里面去?&quot;.在本文&lt;br /&gt;
中,我将会介绍一种类似于Java的方式来构建大型的Clojure项目.通过这种方式,&lt;br /&gt;
希望你在学习Clojure的时候不会有太大的差异感!&lt;/p&gt;
&lt;p&gt;
在Java中,我们出于各种目的而使用类.例如典型的使用Spring的web应用,你会看&lt;br /&gt;
到类似下面的结构:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Data transfer objects(DTO)
&lt;/li&gt;
&lt;li&gt;Services(REST API,controllers,DAO)
&lt;/li&gt;
&lt;li&gt;Rich object
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
DTO实际上就是个结构体,他没有任何的行为(即方法).为了最小化样板代码,我趋&lt;br /&gt;
向于使用pulibc final属性去实现DTO.我认为DTO就是个模板(schema),它就像&lt;br /&gt;
一个REST服务输出的文件.但是我发现很多客户端开发人员可不关注这个,&lt;br /&gt;
而只关注代码形式.有时你会看到DTO被作为数据库访问的一部分.这些DTO被称为&lt;br /&gt;
贫血模型.&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;
Service实际上是包含了方法和注入了辅助Service的单例对象.不同的辅助&lt;br /&gt;
Service提供了不同的服务.除了实现了接口外,Service只是包含了方法,和占位符很类似.单例模式导致的一个问题就是,新手无法预见到多线程里共享相同的实例出现意外的结果.他们将状态保存到私有属性里,而不需要从一个对象传递到另一个对象.很方便,但是是错误的做法.&lt;/p&gt;
&lt;p&gt;
Rich object是面向对象语言中的思想.即将数据及和数据相关的操作封装到一个&lt;br /&gt;
类里面.我可没说getter和setter是相关操作!但是,rich object类在项目中用得&lt;br /&gt;
较少.取而代之的是使用DTO作为Service的输入和输出.使用DAO来访问数据库,然&lt;br /&gt;
后返回DTO.我没说这种方法是错误的,我好奇的是,既然对于目前的Java架构是好&lt;br /&gt;
是坏我们都无法确认,那为什么还要强求使用Clojure去实现类似的东西呢?&lt;/p&gt;
&lt;p&gt;
先不管这么多,我们先看怎么在Clojure中做类似的事情?我直接给出如何做!&lt;/p&gt;
&lt;p&gt;
首先,DTO就是数据,而Clojure擅长数据处理,例如map,list和set.但是如果你想&lt;br /&gt;
要类似结构体的东西,Clojure里提供了record.如果你了解Scala你会发现这玩样&lt;br /&gt;
和case class很像.定义record的方式如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Person&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;lastName&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这实际上创建了一个叫Person的Java类,它包含两个不可变的属性以及实现了&lt;br /&gt;
hashCode和equals方法.record的行为模式和map很像,所以大部分适用于map的方&lt;br /&gt;
法都适用与record!需要注意的是,虽然Clojure是动态类型,但是你可以使用类型&lt;br /&gt;
提示来标示特定类型:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Person&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;^String&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;^String&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;lastName&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
好,那现在我们来看看如何定义Service!让我们将问题分解为组织相关函数,定义&lt;br /&gt;
接口及依赖注入!&lt;/p&gt;
&lt;p&gt;
和Java不同,Clojure提供了多种组织相关函数的方法.使用哪种方式完全取决于&lt;br /&gt;
你想做什么.首先,在Clojure中,函数不需要定义到一个类里面.取而代之的是,他&lt;br /&gt;
们通过命名空间类管理,命名空间类似于Java中的包.如果你没有任何特别的要求,那么建议使用命名空间来管理函数.&lt;/p&gt;
&lt;p&gt;
如果你想定义类似class的东西,你需要先定义接口!那你需要使用protocol!你可&lt;br /&gt;
以把它当做和Java中的接口类似的东西.实际上,除了使用protocol你也可以直接&lt;br /&gt;
使用Java的接口,因为Clojure可以直接访问Java代码!创建protocol的方式如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defprotocol&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Greet&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;sayHello&lt;/span&gt; [this]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这和下面的代码功能相同:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #859900;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #859900;&quot;&gt;interface&lt;/span&gt; &lt;span style=&quot;color: #b58900;&quot;&gt;Greet&lt;/span&gt;{
    &lt;span style=&quot;color: #b58900;&quot;&gt;Object&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;sayHello&lt;/span&gt;();
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
有两点需要注意:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;你需要将this包含在参数列表中!在面向对象语言中默认都包含了this,在类内&lt;br /&gt;
部调用时默认包含了this.而在外部调用方法时,是使用对象名称.方法名,比如&lt;br /&gt;
person.sayHello().而Clojure是函数式的,方法在前,调用方式如下(sayHello&lt;br /&gt;
person)
&lt;/li&gt;
&lt;li&gt;方法返回的是Object.这是因为Clojure是函数式的,我们努力使其没有副作用.返&lt;br /&gt;
回值为void的方法,实际上大部分是为了其副作用的!
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
实现protocol可以使用如下代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Person&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;lastName&lt;/span&gt;]
    &lt;span style=&quot;color: #cb4b16;&quot;&gt;Greet&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;sayHello&lt;/span&gt; [this] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello,my name is &quot;&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
最后就是依赖注入了!结论是:依赖注入对与Clojure来说不是必要的!可以看看下&lt;br /&gt;
面两篇文章!&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.puredanger.com/2010/03/01/dependency-injection-clojure/&quot;&gt;Dependency injection in Clojure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13085370/what-is-the-clojure-equivalent-to-google-guice&quot;&gt;What is the Clojure equivalent to Google Guice?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
从Java过渡到Scala相对来说比较简单,因为你可以在Scala中编写类Java的代码,&lt;br /&gt;
然后再慢慢过渡到函数式代码编写上.但是对于Clojure来说,没有这个过渡过程,&lt;br /&gt;
所以比较难于适应!但是通过使用record和protocol可以使你能在Clojure中做类&lt;br /&gt;
似Java的事情,从而简化你的过渡难度!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 个人感受&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
不知道是英文不行,还是作者行文有问题!感觉作者的文字不够流畅!按照原文直&lt;br /&gt;
译,总感觉不通顺!故做了删减调整!&lt;br /&gt;
对于依赖注入提供的两篇文章,评论比文章好得多!特别是第二篇的第一个评论!&lt;br /&gt;
其实本文就简单介绍了Clojure的record和protocol入门而已!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
译者注:猜测作者的意思是,有些开发人员不管类是DTO还是DAO,只要结构&lt;br /&gt;
相同就随便用!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 个人感受&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
本文翻译自:&lt;a href=&quot;http://www.jayway.com/2013/02/05/learn-clojure-using-records-and-protocols/&quot;&gt;Learn Clojure using records and protocols&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
当我对Clojure的括号不再疑惑后,另一个让我质疑为何要学习Clojure的问题是&lt;br /&gt;
使用REPL很爽,但是我怎么来构建大型项目?&quot;.实际上,由于我的面向对象编程经&lt;br /&gt;
验,我其实要问的是&quot;我怎么才能将函数封装到类似class的东西里面去?&quot;.在本文&lt;br /&gt;
中,我将会介绍一种类似于Java的方式来构建大型的Clojure项目.通过这种方式,&lt;br /&gt;
希望你在学习Clojure的时候不会有太大的差异感!&lt;/p&gt;
&lt;p&gt;
在Java中,我们出于各种目的而使用类.例如典型的使用Spring的web应用,你会看&lt;br /&gt;
到类似下面的结构:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Data transfer objects(DTO)
&lt;/li&gt;
&lt;li&gt;Services(REST API,controllers,DAO)
&lt;/li&gt;
&lt;li&gt;Rich object
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
DTO实际上就是个结构体,他没有任何的行为(即方法).为了最小化样板代码,我趋&lt;br /&gt;
向于使用pulibc final属性去实现DTO.我认为DTO就是个模板(schema),它就像&lt;br /&gt;
一个REST服务输出的文件.但是我发现很多客户端开发人员可不关注这个,&lt;br /&gt;
而只关注代码形式.有时你会看到DTO被作为数据库访问的一部分.这些DTO被称为&lt;br /&gt;
贫血模型.&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;
Service实际上是包含了方法和注入了辅助Service的单例对象.不同的辅助&lt;br /&gt;
Service提供了不同的服务.除了实现了接口外,Service只是包含了方法,和占位符很类似.单例模式导致的一个问题就是,新手无法预见到多线程里共享相同的实例出现意外的结果.他们将状态保存到私有属性里,而不需要从一个对象传递到另一个对象.很方便,但是是错误的做法.&lt;/p&gt;
&lt;p&gt;
Rich object是面向对象语言中的思想.即将数据及和数据相关的操作封装到一个&lt;br /&gt;
类里面.我可没说getter和setter是相关操作!但是,rich object类在项目中用得&lt;br /&gt;
较少.取而代之的是使用DTO作为Service的输入和输出.使用DAO来访问数据库,然&lt;br /&gt;
后返回DTO.我没说这种方法是错误的,我好奇的是,既然对于目前的Java架构是好&lt;br /&gt;
是坏我们都无法确认,那为什么还要强求使用Clojure去实现类似的东西呢?&lt;/p&gt;
&lt;p&gt;
先不管这么多,我们先看怎么在Clojure中做类似的事情?我直接给出如何做!&lt;/p&gt;
&lt;p&gt;
首先,DTO就是数据,而Clojure擅长数据处理,例如map,list和set.但是如果你想&lt;br /&gt;
要类似结构体的东西,Clojure里提供了record.如果你了解Scala你会发现这玩样&lt;br /&gt;
和case class很像.定义record的方式如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Person&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;lastName&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这实际上创建了一个叫Person的Java类,它包含两个不可变的属性以及实现了&lt;br /&gt;
hashCode和equals方法.record的行为模式和map很像,所以大部分适用于map的方&lt;br /&gt;
法都适用与record!需要注意的是,虽然Clojure是动态类型,但是你可以使用类型&lt;br /&gt;
提示来标示特定类型:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Person&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;^String&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;^String&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;lastName&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
好,那现在我们来看看如何定义Service!让我们将问题分解为组织相关函数,定义&lt;br /&gt;
接口及依赖注入!&lt;/p&gt;
&lt;p&gt;
和Java不同,Clojure提供了多种组织相关函数的方法.使用哪种方式完全取决于&lt;br /&gt;
你想做什么.首先,在Clojure中,函数不需要定义到一个类里面.取而代之的是,他&lt;br /&gt;
们通过命名空间类管理,命名空间类似于Java中的包.如果你没有任何特别的要求,那么建议使用命名空间来管理函数.&lt;/p&gt;
&lt;p&gt;
如果你想定义类似class的东西,你需要先定义接口!那你需要使用protocol!你可&lt;br /&gt;
以把它当做和Java中的接口类似的东西.实际上,除了使用protocol你也可以直接&lt;br /&gt;
使用Java的接口,因为Clojure可以直接访问Java代码!创建protocol的方式如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defprotocol&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Greet&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;sayHello&lt;/span&gt; [this]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这和下面的代码功能相同:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #859900;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #859900;&quot;&gt;interface&lt;/span&gt; &lt;span style=&quot;color: #b58900;&quot;&gt;Greet&lt;/span&gt;{
    &lt;span style=&quot;color: #b58900;&quot;&gt;Object&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;sayHello&lt;/span&gt;();
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
有两点需要注意:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;你需要将this包含在参数列表中!在面向对象语言中默认都包含了this,在类内&lt;br /&gt;
部调用时默认包含了this.而在外部调用方法时,是使用对象名称.方法名,比如&lt;br /&gt;
person.sayHello().而Clojure是函数式的,方法在前,调用方式如下(sayHello&lt;br /&gt;
person)
&lt;/li&gt;
&lt;li&gt;方法返回的是Object.这是因为Clojure是函数式的,我们努力使其没有副作用.返&lt;br /&gt;
回值为void的方法,实际上大部分是为了其副作用的!
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
实现protocol可以使用如下代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;Person&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;lastName&lt;/span&gt;]
    &lt;span style=&quot;color: #cb4b16;&quot;&gt;Greet&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;sayHello&lt;/span&gt; [this] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello,my name is &quot;&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;firstName&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
最后就是依赖注入了!结论是:依赖注入对与Clojure来说不是必要的!可以看看下&lt;br /&gt;
面两篇文章!&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.puredanger.com/2010/03/01/dependency-injection-clojure/&quot;&gt;Dependency injection in Clojure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13085370/what-is-the-clojure-equivalent-to-google-guice&quot;&gt;What is the Clojure equivalent to Google Guice?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
从Java过渡到Scala相对来说比较简单,因为你可以在Scala中编写类Java的代码,&lt;br /&gt;
然后再慢慢过渡到函数式代码编写上.但是对于Clojure来说,没有这个过渡过程,&lt;br /&gt;
所以比较难于适应!但是通过使用record和protocol可以使你能在Clojure中做类&lt;br /&gt;
似Java的事情,从而简化你的过渡难度!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 个人感受&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
不知道是英文不行,还是作者行文有问题!感觉作者的文字不够流畅!按照原文直&lt;br /&gt;
译,总感觉不通顺!故做了删减调整!&lt;br /&gt;
对于依赖注入提供的两篇文章,评论比文章好得多!特别是第二篇的第一个评论!&lt;br /&gt;
其实本文就简单介绍了Clojure的record和protocol入门而已!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
译者注:猜测作者的意思是,有些开发人员不管类是DTO还是DAO,只要结构&lt;br /&gt;
相同就随便用!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>手动安装Org-mode</title>
        <link href="http://liyouhai.com/emacs-vim/%25e6%2589%258b%25e5%258a%25a8%25e5%25ae%2589%25e8%25a3%2585org-mode.html"/>
        <updated>2014-04-26T16:00:00+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/%e6%89%8b%e5%8a%a8%e5%ae%89%e8%a3%85org-mode</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. Org-mode安装文件下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Emacs自带的Org-mode版本偏旧,对于有强迫症的我来说比较纠结,想升级到最新&lt;br /&gt;
版本.不过使用list-packages命令来升级有bug,升级后无法正常使用.故手动升&lt;br /&gt;
级.&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Org-mode安装文件下载&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://orgmode.org/&quot;&gt;官方网站&lt;/a&gt;直接下载zip包&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 安装&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;将zip包解压缩到本地
&lt;/li&gt;
&lt;li&gt;修改local.mk文件.将prefix,lispdir,datadir,infodir这些变量配置为你的emacs安装的对应目录
&lt;/li&gt;
&lt;li&gt;sudo make install
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
搞定&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. Org-mode安装文件下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Emacs自带的Org-mode版本偏旧,对于有强迫症的我来说比较纠结,想升级到最新&lt;br /&gt;
版本.不过使用list-packages命令来升级有bug,升级后无法正常使用.故手动升&lt;br /&gt;
级.&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Org-mode安装文件下载&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://orgmode.org/&quot;&gt;官方网站&lt;/a&gt;直接下载zip包&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 安装&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;将zip包解压缩到本地
&lt;/li&gt;
&lt;li&gt;修改local.mk文件.将prefix,lispdir,datadir,infodir这些变量配置为你的emacs安装的对应目录
&lt;/li&gt;
&lt;li&gt;sudo make install
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
搞定&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>开通了微信公众账号</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%25e5%25bc%2580%25e9%2580%259a%25e4%25ba%2586%25e5%25be%25ae%25e4%25bf%25a1%25e5%2585%25ac%25e4%25bc%2597%25e8%25b4%25a6%25e5%258f%25b7.html"/>
        <updated>2014-03-23T12:22:50+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%e5%bc%80%e9%80%9a%e4%ba%86%e5%be%ae%e4%bf%a1%e5%85%ac%e4%bc%97%e8%b4%a6%e5%8f%b7</id>
        <content type="html">&lt;p&gt;
	开通了微信公众账号,&lt;span style=&quot;line-height: 1.6em;&quot;&gt;欢迎大家关注: &amp;nbsp;&lt;strong&gt;PigCode&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	不定期推送博客文章,及编程相关内容.方便手机阅读.&lt;/p&gt;
&lt;p&gt;
	1. n (最新文章)&lt;br /&gt;
	2. r (随机文章)&lt;br /&gt;
	3. h (热门文章)&lt;br /&gt;
	4. help(帮助信息)&lt;br /&gt;
	5. 其它字符进行关键字搜索.&lt;br /&gt;
	推荐关键字&lt;br /&gt;
	(Java,Clojure,Luminus,Scala,Tomcat,设计模式,Maven,Vim,Emacs)&lt;/p&gt;
&lt;p&gt;
	&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2014/03/qrcode_for_gh_e7c2a64f8d46_4301.jpg&quot;&gt;&lt;img alt=&quot;qrcode_for_gh_e7c2a64f8d46_430&quot; class=&quot;alignnone size-full wp-image-746&quot; height=&quot;430&quot; src=&quot;assets/qrcode_for_gh_e7c2a64f8d46_4301.jpg&quot; width=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	开通了微信公众账号,&lt;span style=&quot;line-height: 1.6em;&quot;&gt;欢迎大家关注: &amp;nbsp;&lt;strong&gt;PigCode&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	不定期推送博客文章,及编程相关内容.方便手机阅读.&lt;/p&gt;
&lt;p&gt;
	1. n (最新文章)&lt;br /&gt;
	2. r (随机文章)&lt;br /&gt;
	3. h (热门文章)&lt;br /&gt;
	4. help(帮助信息)&lt;br /&gt;
	5. 其它字符进行关键字搜索.&lt;br /&gt;
	推荐关键字&lt;br /&gt;
	(Java,Clojure,Luminus,Scala,Tomcat,设计模式,Maven,Vim,Emacs)&lt;/p&gt;
&lt;p&gt;
	&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2014/03/qrcode_for_gh_e7c2a64f8d46_4301.jpg&quot;&gt;&lt;img alt=&quot;qrcode_for_gh_e7c2a64f8d46_430&quot; class=&quot;alignnone size-full wp-image-746&quot; height=&quot;430&quot; src=&quot;assets/qrcode_for_gh_e7c2a64f8d46_4301.jpg&quot; width=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure教程:函数</title>
        <link href="http://liyouhai.com/clojure/clojure%25e6%2595%2599%25e7%25a8%258b%25e5%2587%25bd%25e6%2595%25b0.html"/>
        <updated>2014-03-15T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e6%95%99%e7%a8%8b%e5%87%bd%e6%95%b0</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 针对Clojure版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 如何定义函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4. 匿名函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5. 如何执行函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6. 多元数函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7. 解构函数参数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7-1&quot;&gt;7.1. 基于位置的解构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7-2&quot;&gt;7.2. 解构Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8. 变参函数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8-1&quot;&gt;8.1. 具名参数(Named Parameters)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9. 高阶函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10. 私有函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11. 关键字作为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-12&quot;&gt;12. Map作为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-13&quot;&gt;13. Set作为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-14&quot;&gt;14. 函数作为比较器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-15&quot;&gt;15. 结束语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-16&quot;&gt;16. 贡献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/language/functions.html&quot;&gt;Functions in Clojure&lt;/a&gt;&lt;br /&gt;
本文包括如下内容:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;如何定义函数
&lt;/li&gt;
&lt;li&gt;如何执行函数
&lt;/li&gt;
&lt;li&gt;多元数函数(Multi-arity Functions)
&lt;/li&gt;
&lt;li&gt;不定参函数(Variadic Functions)
&lt;/li&gt;
&lt;li&gt;高阶函数
&lt;/li&gt;
&lt;li&gt;其它函数相关内容
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
版权:&lt;br /&gt;
This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 针对Clojure版本&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Clojure 1.5&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
Clojure是函数式编程语言.自然的,函数是Clojure非常重要的一部分.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 如何定义函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
函数定义一般使用defn宏:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  [d precision]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
类型提示有时能避免编译器使用反射,从而能生成更高效的字节码.但是,基本上&lt;br /&gt;
你没必要使用类型提示.后期优化时再考虑.&lt;br /&gt;
函数可以添加注释文档,给API添加文档说明是个好习惯:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Round down a double to the given precision (number of significant digits)&quot;&lt;/span&gt;
  [d precision]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在Clojure中函数参数可以有类型提示,不过是可选的.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  [&lt;span style=&quot;color: #cb4b16;&quot;&gt;^double&lt;/span&gt; d &lt;span style=&quot;color: #cb4b16;&quot;&gt;^long&lt;/span&gt; precision]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
函数还可以定义前置和后置条件来限制函数的参数和返回值.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Round down a double to the given precision (number of significant digits)&quot;&lt;/span&gt;
  [&lt;span style=&quot;color: #cb4b16;&quot;&gt;^double&lt;/span&gt; d &lt;span style=&quot;color: #cb4b16;&quot;&gt;^long&lt;/span&gt; precision]
  {&lt;span style=&quot;color: #2aa198;&quot;&gt;:pre&lt;/span&gt; [&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;not-nil? d&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;not-nil? precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]}
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,我没使用了前置条件来检查两个参数是否为nil.not-nil?宏(或&lt;br /&gt;
函数),没有在该例子中展示,我们假设它已经在其它地方实现了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 匿名函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
匿名函数使用fn特殊形式来定义;&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 2 x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
匿名函数可以赋给局部变量,作为参数传递给函数或作为函数的返回值.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x]
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 2 x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; f &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Clojure提供了语法糖来简化匿名函数的编写:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 2 %&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; f &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
%表示第一个参数.如果要引用多个参数,可以使用%1,%2.以此类推:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#19968;&amp;#20010;&amp;#21253;&amp;#21547;&amp;#20102;&amp;#19977;&amp;#20010;&amp;#21442;&amp;#25968;&amp;#30340;&amp;#21311;&amp;#21517;&amp;#20989;&amp;#25968;,&amp;#36820;&amp;#22238;&amp;#19977;&amp;#20010;&amp;#21442;&amp;#25968;&amp;#30340;&amp;#21644;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;+&lt;/span&gt; %1 %2 %3&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;f 1 2 3&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
语法糖简化了代码,但是降低了代码的可读性.所以使用前请斟酌.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 如何执行函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
要执行函数,只需要将函数名放在list的第一个位置就行了:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
对于赋给局部变量,变量或这从参数传递的函数,此法同样适用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f format]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;f &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
另外你也可以使用clojure.core/apply来执行函数&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; format &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; format &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s %s&quot;&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Clojure&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
clojure.core/apply一般在调用不定参函数或者需要将参数作为集合传递时才会&lt;br /&gt;
使用&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 多元数函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
在Clojure中有多元数函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tax-amount&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[amount]
     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;tax-amount amount 35&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[amount rate]
     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/round&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;double&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; amount &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; rate 100&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,只有一个参数的函数调用了有两个参数的函数.这在多参函数中&lt;br /&gt;
很常见(相当于默认值的功能).Clojure没有提供默认值的功能,是因为JVM不支持.&lt;br /&gt;
在Clojure中,元数只和参数个数有关,而和参数类型无关.这是因为Clojure是动&lt;br /&gt;
态语言,类型信息可能在编译期是无效的.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;range&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 &lt;span style=&quot;color: #cb4b16;&quot;&gt;Double/POSITIVE_INFINITY&lt;/span&gt; 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[end]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 end 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[start end]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; start end 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[start end step]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Omitted&lt;/span&gt; for clarity&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 解构函数参数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
有时函数的参数是数据结构:向量,序列,map.当你想访问这些数据结构的其中一&lt;br /&gt;
部分数据时,你可能需要编写类似下面的代码&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [m]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [currency &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; m &lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
对向量来说,需要编写类似这样的代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [pair]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [amount   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt;  pair&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        currency &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; pair&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
但是呢,这样的样板代码可重用性并不高.所以Clojure提供了解构.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.1&lt;/span&gt; 基于位置的解构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-1&quot;&gt;
&lt;p&gt;
解构向量的方式如下:使用一个向量替换原来作为函数参数的数据结构,这个向量包含了占位符,&lt;br /&gt;
而占位符会将对应位置的数据结构的值绑定过来.举例来说,如果一个参数是一对&lt;br /&gt;
值,你想要获得第二个参数值,那么代码可以这样写:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [[amount currency]]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,参数的第一个值被绑定到了amount上,第二个参数是被绑定到了&lt;br /&gt;
currency上.看起来很棒,但是,这里我们并没有使用amount.在这种情况下,我们&lt;br /&gt;
可以使用下划线来忽略它:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [[_ currency]]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
解构是能够嵌套的:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;first-first&lt;/span&gt;
  [[[i _] _]]
  i&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
虽然本文不会涉及到let这个form和本地变量.但是需要提一下,解构对let也生效,而&lt;br /&gt;
且作用一模一样&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [pair         [10 &lt;span style=&quot;color: #2aa198;&quot;&gt;:gbp&lt;/span&gt;]
      [_ currency] pair]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.2&lt;/span&gt; 解构Map&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-2&quot;&gt;
&lt;p&gt;
对Map和Record的解构方式与解构向量略有不同:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{currency &lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt;}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,我们想把:currency这个key对应的value绑定到currency上.Key&lt;br /&gt;
并不一定需要是关键字:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{currency &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;currency&quot;&lt;/span&gt;}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{currency 'currency}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
我们可以一次性解构多个key:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:keys&lt;/span&gt; [currency amount]}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的例子中,keys需要为关键字,其名字与currency和amount相同&lt;br /&gt;
(即:currency,:amount).如果keys是字符串,则将上面的:keys改为:strs即可:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:strs&lt;/span&gt; [currency amount]}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当然也可以是symbol:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:syms&lt;/span&gt; [currency amount]}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当然了,使用关键字作为key在Clojure中是推荐做法.&lt;br /&gt;
解构Map时,如果找不到我们需要的key的值,我们可以设置默认值:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:keys&lt;/span&gt; [currency amount] &lt;span style=&quot;color: #2aa198;&quot;&gt;:or&lt;/span&gt; {currency &lt;span style=&quot;color: #2aa198;&quot;&gt;:gbp&lt;/span&gt;}}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
此功能对于编写包含额外属性的函数大有裨益.&lt;br /&gt;
和基于位置的解构相同,Map解构对let同样适用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [money               {&lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:gbp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:amount&lt;/span&gt; 10}
     {currency &lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt;} money]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 变参函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
参数数量可变的函数叫做变参函数.clojure.core/str和clojure.core/format就&lt;br /&gt;
是两个变参函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;      &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;ab&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;abc&quot;&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;               &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Hello, world&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Clojure&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Hello, Clojure world&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
要定义变参函数,只需要在变参前面加个&amp;amp;就可以了:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;log&lt;/span&gt;
  [message &amp;amp; args]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; ...&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,只有一个参数是必须的.变参函数的调用方式和普通函数相同:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;log&lt;/span&gt;
  [message &amp;amp; args]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;args: &quot;&lt;/span&gt; args&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;log &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;message from &quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;192.0.0.76&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在REPL中执行:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (log &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;message from &quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;192.0.0.76&quot;&lt;/span&gt;)
args:  (192.0.0.76)

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (log &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;message from &quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;192.0.0.76&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;service:xyz&quot;&lt;/span&gt;)
args:  (192.0.0.76 service:xyz)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
你可以看到,可选的参数被包装到了一个list里面.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt; 具名参数(Named Parameters)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;p&gt;
具名参数是通过对变参函数的解构来实现的.&lt;br /&gt;
从解构变参函数的立场上来看,具名参数具有较好的可读性.下面是一个例子:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;job-info&lt;/span&gt;
  [&amp;amp; {&lt;span style=&quot;color: #2aa198;&quot;&gt;:keys&lt;/span&gt; [name job income] &lt;span style=&quot;color: #2aa198;&quot;&gt;:or&lt;/span&gt; {job &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;unemployed&quot;&lt;/span&gt; income &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;$0.00&quot;&lt;/span&gt;}}]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; name
    [name job income]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;No name specified&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
使用函数方式如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (job-info :name &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Robert&quot;&lt;/span&gt; :job &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Engineer&quot;&lt;/span&gt;)
[&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Robert&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Engineer&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;$0.00&quot;&lt;/span&gt;]

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (job-info :job &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Engineer&quot;&lt;/span&gt;)
No name specified
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果不使用变参列表,那么你需要使用形如{:name &quot;Robert&quot; :job &quot;Engineer&quot;}这&lt;br /&gt;
样的map作为参数.&lt;br /&gt;
关键字的默认值依据:as后跟的map来确定.如果关键字没有传递值,且无默认值,&lt;br /&gt;
则为nil.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; 高阶函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
高阶函数是将其它函数作为参数的函数.高阶函数在函数式编程中是很重要的技&lt;br /&gt;
术,在Clojure中经常使用到.一个高阶函数的例子是将一个函数和一个集合作为&lt;br /&gt;
参数,返回符合这个函数条件的集合.在Clojure中,这叫做clojure.core/filter:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; even? &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt;(0 2 4 6 8)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的例子中,clojure.core/filter函数接收clojure.core/even?作为参数.&lt;br /&gt;
clojure.core中有很多高阶函数.经常使用的函数请参见&lt;a href=&quot;http://clojure-doc.org/articles/language/core_overview.html&quot;&gt;clojure.core&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; 私有函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;
在Clojure中,函数可以在其命名空间中设置为私有的.&lt;br /&gt;
具体细节请参考&lt;a href=&quot;http://clojure-doc.org/articles/language/namespaces.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt; 关键字作为函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;p&gt;
在Clojure中,关键字可以作为函数使用.他们接收map或record并从中查找信息:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 27 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Michael&quot;&lt;/span&gt;}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; 27&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
他们经常和高阶函数结合使用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 45 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Jill&quot;&lt;/span&gt;} {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 17 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Matt&quot;&lt;/span&gt;}]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; (45 42 17)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
也能和-&amp;gt;宏一起使用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;-&amp;gt;&lt;/span&gt; [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 45 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Jill&quot;&lt;/span&gt;}] first &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Joe&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;12&lt;/span&gt; Map作为函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;p&gt;
Clojure的Map也能作为函数使用,来查找key对应的value:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Joe&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;      &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; 42&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:unknown&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
需要注意的是,虽然大部分情况下map和record可以等同对待,但是这里不&lt;br /&gt;
行!record不能作为函数使用!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-13&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-13&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;13&lt;/span&gt; Set作为函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-13&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{1 2 3} 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; 1&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{1 2 3} 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; nil&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{&lt;span style=&quot;color: #2aa198;&quot;&gt;:us&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:au&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:ru&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:uk&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:uk&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; :uk&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{&lt;span style=&quot;color: #2aa198;&quot;&gt;:us&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:au&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:ru&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:uk&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:cn&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
此功能被用来验证某值是否set中:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;when&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;countries &lt;span style=&quot;color: #2aa198;&quot;&gt;:in&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; ...&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;countries &lt;span style=&quot;color: #2aa198;&quot;&gt;:in&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Implement&lt;/span&gt; positive case&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Implement&lt;/span&gt; negative case&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
因为在Clojure中除了false和nil,其它值都是true.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-14&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-14&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;14&lt;/span&gt; 函数作为比较器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-14&quot;&gt;
&lt;p&gt;
Clojure函数实现了java.util.Comparator接口,所以能作为比较器使用.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-15&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-15&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;15&lt;/span&gt; 结束语&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-15&quot;&gt;
&lt;p&gt;
函数是Clojure的核心.他们通过defn宏来定义,可以有多个元数,不定参数并支持&lt;br /&gt;
参数解构.函数参数和返回值可以有类型提示,当然这不是必须的.&lt;br /&gt;
函数是一等值,它能被传递给其它函数.这是函数式编程的基石.&lt;br /&gt;
有一些数据类型有函数特性.适时的使用这些特性可以是代码更简洁易读.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-16&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;16&lt;/span&gt; 贡献&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-16&quot;&gt;
&lt;p&gt;
Michael Klishin michael@defprotocol.org, 2012 (original author)&lt;br /&gt;
Translated by Ivan 2014&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 针对Clojure版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 如何定义函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4. 匿名函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5. 如何执行函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6. 多元数函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7. 解构函数参数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7-1&quot;&gt;7.1. 基于位置的解构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7-2&quot;&gt;7.2. 解构Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8. 变参函数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8-1&quot;&gt;8.1. 具名参数(Named Parameters)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9. 高阶函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10. 私有函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11. 关键字作为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-12&quot;&gt;12. Map作为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-13&quot;&gt;13. Set作为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-14&quot;&gt;14. 函数作为比较器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-15&quot;&gt;15. 结束语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-16&quot;&gt;16. 贡献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/language/functions.html&quot;&gt;Functions in Clojure&lt;/a&gt;&lt;br /&gt;
本文包括如下内容:&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;如何定义函数
&lt;/li&gt;
&lt;li&gt;如何执行函数
&lt;/li&gt;
&lt;li&gt;多元数函数(Multi-arity Functions)
&lt;/li&gt;
&lt;li&gt;不定参函数(Variadic Functions)
&lt;/li&gt;
&lt;li&gt;高阶函数
&lt;/li&gt;
&lt;li&gt;其它函数相关内容
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
版权:&lt;br /&gt;
This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 针对Clojure版本&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Clojure 1.5&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
Clojure是函数式编程语言.自然的,函数是Clojure非常重要的一部分.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 如何定义函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
函数定义一般使用defn宏:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  [d precision]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
类型提示有时能避免编译器使用反射,从而能生成更高效的字节码.但是,基本上&lt;br /&gt;
你没必要使用类型提示.后期优化时再考虑.&lt;br /&gt;
函数可以添加注释文档,给API添加文档说明是个好习惯:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Round down a double to the given precision (number of significant digits)&quot;&lt;/span&gt;
  [d precision]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在Clojure中函数参数可以有类型提示,不过是可选的.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  [&lt;span style=&quot;color: #cb4b16;&quot;&gt;^double&lt;/span&gt; d &lt;span style=&quot;color: #cb4b16;&quot;&gt;^long&lt;/span&gt; precision]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
函数还可以定义前置和后置条件来限制函数的参数和返回值.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;round&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Round down a double to the given precision (number of significant digits)&quot;&lt;/span&gt;
  [&lt;span style=&quot;color: #cb4b16;&quot;&gt;^double&lt;/span&gt; d &lt;span style=&quot;color: #cb4b16;&quot;&gt;^long&lt;/span&gt; precision]
  {&lt;span style=&quot;color: #2aa198;&quot;&gt;:pre&lt;/span&gt; [&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;not-nil? d&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;not-nil? precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]}
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [factor &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/pow&lt;/span&gt; 10 precision&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/floor&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; d factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; factor&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,我没使用了前置条件来检查两个参数是否为nil.not-nil?宏(或&lt;br /&gt;
函数),没有在该例子中展示,我们假设它已经在其它地方实现了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 匿名函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
匿名函数使用fn特殊形式来定义;&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 2 x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
匿名函数可以赋给局部变量,作为参数传递给函数或作为函数的返回值.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [x]
          &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 2 x&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; f &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Clojure提供了语法糖来简化匿名函数的编写:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 2 %&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; f &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
%表示第一个参数.如果要引用多个参数,可以使用%1,%2.以此类推:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#19968;&amp;#20010;&amp;#21253;&amp;#21547;&amp;#20102;&amp;#19977;&amp;#20010;&amp;#21442;&amp;#25968;&amp;#30340;&amp;#21311;&amp;#21517;&amp;#20989;&amp;#25968;,&amp;#36820;&amp;#22238;&amp;#19977;&amp;#20010;&amp;#21442;&amp;#25968;&amp;#30340;&amp;#21644;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;+&lt;/span&gt; %1 %2 %3&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;f 1 2 3&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
语法糖简化了代码,但是降低了代码的可读性.所以使用前请斟酌.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 如何执行函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
要执行函数,只需要将函数名放在list的第一个位置就行了:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
对于赋给局部变量,变量或这从参数传递的函数,此法同样适用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [f format]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;f &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
另外你也可以使用clojure.core/apply来执行函数&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; format &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; format &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s %s&quot;&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Clojure&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
clojure.core/apply一般在调用不定参函数或者需要将参数作为集合传递时才会&lt;br /&gt;
使用&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 多元数函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
在Clojure中有多元数函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tax-amount&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[amount]
     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;tax-amount amount 35&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[amount rate]
     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/round&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;double&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; amount &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;/&lt;/span&gt; rate 100&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,只有一个参数的函数调用了有两个参数的函数.这在多参函数中&lt;br /&gt;
很常见(相当于默认值的功能).Clojure没有提供默认值的功能,是因为JVM不支持.&lt;br /&gt;
在Clojure中,元数只和参数个数有关,而和参数类型无关.这是因为Clojure是动&lt;br /&gt;
态语言,类型信息可能在编译期是无效的.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;range&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 &lt;span style=&quot;color: #cb4b16;&quot;&gt;Double/POSITIVE_INFINITY&lt;/span&gt; 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[end]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 end 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[start end]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; start end 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[start end step]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Omitted&lt;/span&gt; for clarity&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 解构函数参数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
有时函数的参数是数据结构:向量,序列,map.当你想访问这些数据结构的其中一&lt;br /&gt;
部分数据时,你可能需要编写类似下面的代码&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [m]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [currency &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; m &lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
对向量来说,需要编写类似这样的代码:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [pair]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [amount   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt;  pair&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        currency &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; pair&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
但是呢,这样的样板代码可重用性并不高.所以Clojure提供了解构.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.1&lt;/span&gt; 基于位置的解构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-1&quot;&gt;
&lt;p&gt;
解构向量的方式如下:使用一个向量替换原来作为函数参数的数据结构,这个向量包含了占位符,&lt;br /&gt;
而占位符会将对应位置的数据结构的值绑定过来.举例来说,如果一个参数是一对&lt;br /&gt;
值,你想要获得第二个参数值,那么代码可以这样写:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [[amount currency]]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,参数的第一个值被绑定到了amount上,第二个参数是被绑定到了&lt;br /&gt;
currency上.看起来很棒,但是,这里我们并没有使用amount.在这种情况下,我们&lt;br /&gt;
可以使用下划线来忽略它:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [[_ currency]]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
解构是能够嵌套的:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;first-first&lt;/span&gt;
  [[[i _] _]]
  i&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
虽然本文不会涉及到let这个form和本地变量.但是需要提一下,解构对let也生效,而&lt;br /&gt;
且作用一模一样&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [pair         [10 &lt;span style=&quot;color: #2aa198;&quot;&gt;:gbp&lt;/span&gt;]
      [_ currency] pair]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.2&lt;/span&gt; 解构Map&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-2&quot;&gt;
&lt;p&gt;
对Map和Record的解构方式与解构向量略有不同:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{currency &lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt;}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,我们想把:currency这个key对应的value绑定到currency上.Key&lt;br /&gt;
并不一定需要是关键字:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{currency &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;currency&quot;&lt;/span&gt;}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{currency 'currency}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
我们可以一次性解构多个key:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:keys&lt;/span&gt; [currency amount]}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的例子中,keys需要为关键字,其名字与currency和amount相同&lt;br /&gt;
(即:currency,:amount).如果keys是字符串,则将上面的:keys改为:strs即可:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:strs&lt;/span&gt; [currency amount]}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当然也可以是symbol:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:syms&lt;/span&gt; [currency amount]}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当然了,使用关键字作为key在Clojure中是推荐做法.&lt;br /&gt;
解构Map时,如果找不到我们需要的key的值,我们可以设置默认值:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;currency-of&lt;/span&gt;
  [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:keys&lt;/span&gt; [currency amount] &lt;span style=&quot;color: #2aa198;&quot;&gt;:or&lt;/span&gt; {currency &lt;span style=&quot;color: #2aa198;&quot;&gt;:gbp&lt;/span&gt;}}]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
此功能对于编写包含额外属性的函数大有裨益.&lt;br /&gt;
和基于位置的解构相同,Map解构对let同样适用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [money               {&lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:gbp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:amount&lt;/span&gt; 10}
     {currency &lt;span style=&quot;color: #2aa198;&quot;&gt;:currency&lt;/span&gt;} money]
  currency&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 变参函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
参数数量可变的函数叫做变参函数.clojure.core/str和clojure.core/format就&lt;br /&gt;
是两个变参函数:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;      &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;ab&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;abc&quot;&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;               &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Hello, world&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello, %s %s&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Clojure&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Hello, Clojure world&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
要定义变参函数,只需要在变参前面加个&amp;amp;就可以了:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;log&lt;/span&gt;
  [message &amp;amp; args]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; ...&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的例子中,只有一个参数是必须的.变参函数的调用方式和普通函数相同:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;log&lt;/span&gt;
  [message &amp;amp; args]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;args: &quot;&lt;/span&gt; args&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;log &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;message from &quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;192.0.0.76&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在REPL中执行:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (log &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;message from &quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;192.0.0.76&quot;&lt;/span&gt;)
args:  (192.0.0.76)

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (log &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;message from &quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;192.0.0.76&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;service:xyz&quot;&lt;/span&gt;)
args:  (192.0.0.76 service:xyz)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
你可以看到,可选的参数被包装到了一个list里面.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt; 具名参数(Named Parameters)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;p&gt;
具名参数是通过对变参函数的解构来实现的.&lt;br /&gt;
从解构变参函数的立场上来看,具名参数具有较好的可读性.下面是一个例子:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;job-info&lt;/span&gt;
  [&amp;amp; {&lt;span style=&quot;color: #2aa198;&quot;&gt;:keys&lt;/span&gt; [name job income] &lt;span style=&quot;color: #2aa198;&quot;&gt;:or&lt;/span&gt; {job &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;unemployed&quot;&lt;/span&gt; income &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;$0.00&quot;&lt;/span&gt;}}]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; name
    [name job income]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;No name specified&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
使用函数方式如下:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (job-info :name &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Robert&quot;&lt;/span&gt; :job &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Engineer&quot;&lt;/span&gt;)
[&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Robert&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Engineer&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;$0.00&quot;&lt;/span&gt;]

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (job-info :job &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Engineer&quot;&lt;/span&gt;)
No name specified
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果不使用变参列表,那么你需要使用形如{:name &quot;Robert&quot; :job &quot;Engineer&quot;}这&lt;br /&gt;
样的map作为参数.&lt;br /&gt;
关键字的默认值依据:as后跟的map来确定.如果关键字没有传递值,且无默认值,&lt;br /&gt;
则为nil.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; 高阶函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
高阶函数是将其它函数作为参数的函数.高阶函数在函数式编程中是很重要的技&lt;br /&gt;
术,在Clojure中经常使用到.一个高阶函数的例子是将一个函数和一个集合作为&lt;br /&gt;
参数,返回符合这个函数条件的集合.在Clojure中,这叫做clojure.core/filter:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;filter&lt;/span&gt; even? &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;range&lt;/span&gt; 0 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt;(0 2 4 6 8)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的例子中,clojure.core/filter函数接收clojure.core/even?作为参数.&lt;br /&gt;
clojure.core中有很多高阶函数.经常使用的函数请参见&lt;a href=&quot;http://clojure-doc.org/articles/language/core_overview.html&quot;&gt;clojure.core&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; 私有函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;
在Clojure中,函数可以在其命名空间中设置为私有的.&lt;br /&gt;
具体细节请参考&lt;a href=&quot;http://clojure-doc.org/articles/language/namespaces.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt; 关键字作为函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;p&gt;
在Clojure中,关键字可以作为函数使用.他们接收map或record并从中查找信息:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 27 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Michael&quot;&lt;/span&gt;}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; 27&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
他们经常和高阶函数结合使用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 45 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Jill&quot;&lt;/span&gt;} {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 17 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Matt&quot;&lt;/span&gt;}]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; (45 42 17)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
也能和-&amp;gt;宏一起使用:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;-&amp;gt;&lt;/span&gt; [{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 45 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} {&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Jill&quot;&lt;/span&gt;}] first &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Joe&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;12&lt;/span&gt; Map作为函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;p&gt;
Clojure的Map也能作为函数使用,来查找key对应的value:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; &quot;Joe&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;      &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; 42&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;:age&lt;/span&gt; 42 &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Joe&quot;&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:unknown&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
需要注意的是,虽然大部分情况下map和record可以等同对待,但是这里不&lt;br /&gt;
行!record不能作为函数使用!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-13&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-13&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;13&lt;/span&gt; Set作为函数&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-13&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{1 2 3} 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; 1&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{1 2 3} 10&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; nil&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{&lt;span style=&quot;color: #2aa198;&quot;&gt;:us&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:au&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:ru&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:uk&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:uk&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; :uk&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;#{&lt;span style=&quot;color: #2aa198;&quot;&gt;:us&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:au&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:ru&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:uk&lt;/span&gt;} &lt;span style=&quot;color: #2aa198;&quot;&gt;:cn&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#8658; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
此功能被用来验证某值是否set中:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;when&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;countries &lt;span style=&quot;color: #2aa198;&quot;&gt;:in&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; ...&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;countries &lt;span style=&quot;color: #2aa198;&quot;&gt;:in&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Implement&lt;/span&gt; positive case&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comment&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Implement&lt;/span&gt; negative case&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
因为在Clojure中除了false和nil,其它值都是true.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-14&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-14&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;14&lt;/span&gt; 函数作为比较器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-14&quot;&gt;
&lt;p&gt;
Clojure函数实现了java.util.Comparator接口,所以能作为比较器使用.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-15&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-15&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;15&lt;/span&gt; 结束语&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-15&quot;&gt;
&lt;p&gt;
函数是Clojure的核心.他们通过defn宏来定义,可以有多个元数,不定参数并支持&lt;br /&gt;
参数解构.函数参数和返回值可以有类型提示,当然这不是必须的.&lt;br /&gt;
函数是一等值,它能被传递给其它函数.这是函数式编程的基石.&lt;br /&gt;
有一些数据类型有函数特性.适时的使用这些特性可以是代码更简洁易读.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-16&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;16&lt;/span&gt; 贡献&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-16&quot;&gt;
&lt;p&gt;
Michael Klishin michael@defprotocol.org, 2012 (original author)&lt;br /&gt;
Translated by Ivan 2014&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure进阶:使用Clojure构建DSL</title>
        <link href="http://liyouhai.com/clojure/clojure%25e8%25bf%259b%25e9%2598%25b6%25e4%25bd%25bf%25e7%2594%25a8clojure%25e6%259e%2584%25e5%25bb%25badsl.html"/>
        <updated>2014-03-01T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e8%bf%9b%e9%98%b6%e4%bd%bf%e7%94%a8clojure%e6%9e%84%e5%bb%badsl</id>
        <content type="html">&lt;p&gt;翻译自&lt;a href=&quot;http://clojure-doc.org/articles/tutorials/growing_a_dsl_with_clojure.html&quot;&gt;Growing a DSL with Clojure&lt;/a&gt;.主要讲解如何使用Clojure来创建一个简单的DSL.包括如下知识点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多重方法(Multimethods)
&lt;/li&gt;
&lt;li&gt;继承(Hierarchies)
&lt;/li&gt;
&lt;li&gt;元编程及&quot;代码即数据&quot;哲学(Metaprogramming and the &quot;Code as data&quot; philosophy)
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Lisp及其方言(比如Clojure)可以很方便的创建DSL并能和源语言无缝的集成.&lt;br /&gt;
Lisp界鼓吹的优点中，提到最多的可能就是:数据即代码，代码即数据了。在此&lt;br /&gt;
文中我们将依此特性来定义一个DSL。&lt;/p&gt;
&lt;p&gt;
我们将渐进式的开发这个DSL，不断的加入Clojure的特性和抽象。&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 任务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 第一步:构建我们的领域语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Echo和Print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 Lisp代码即数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5 细窥Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6 使用多重方法对分支进行抽象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7 扩展我们的DSL实现Windows批处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8 Ad-hoc继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9 多重方法中使用继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10 饭后甜点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11 总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-12&quot;&gt;12 Copyright&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;任务&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;我们的目标是定义一个可以生成各种脚本语言的DSL.而且DSL代码看起来和普通&lt;br /&gt;
的Clojure代码没有区别。&lt;/p&gt;
&lt;p&gt;
例如,我们使用Clojure形式(form)来生成Bash脚本或者Windows批处理脚本:&lt;br /&gt;
输入(Clojure形式):&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; 1 2&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
输出(Bash脚本):&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; [ 1 -eq 2 ]; &lt;span style=&quot;color: #859900;&quot;&gt;then&lt;/span&gt;
  &lt;span style=&quot;color: #859900;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span style=&quot;color: #859900;&quot;&gt;else&lt;/span&gt;
  &lt;span style=&quot;color: #859900;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt;
&lt;span style=&quot;color: #859900;&quot;&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
输出(Windows批处理):&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;IF &lt;span style=&quot;color: #268bd2;&quot;&gt;1&lt;/span&gt;==2 (
  ECHO a
) ELSE (
  ECHO b
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第一步:构建我们的领域语言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;我们先从Bash脚本开始。&lt;br /&gt;
在开始之前，我们先看看Clojure核心类型是否有什么类型我们可以直接拿到领域&lt;br /&gt;
语言中使用。在Clojure类型中是否有和Bash脚本类似的类型呢？&lt;br /&gt;
那就是字符串和基本类型，我们先从这里开始。&lt;br /&gt;
我们来定义一个emit-bash-form函数，它接受一个Clojure形式并返回一个符合&lt;br /&gt;
Bash脚本定义的字符串。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash-form&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Returns a String containing the equivalent Bash script&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;  to its argument.&quot;&lt;/span&gt;
  [a]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; 
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; a
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Exception.&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Fell through&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
cond表达式根据传入参数的类型来进行相应的操作。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form 1)
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
那么我们为什么要选择Long而不是Integer呢？因为在Clojure中，默认数据类型&lt;br /&gt;
是Long.&lt;br /&gt;
虽然Clojure支持Java所有的基本类型,但是默认情况下Clojure使用的是long和&lt;br /&gt;
double.Clojure会自动将int转成long，float转成double.可以简单的测试一下:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (class 7)
java.lang.Long
&lt;/pre&gt;
&lt;p&gt;
现在，如果我们想添加条件判断，我们只需要在cond表达式中添加相应的分支即&lt;br /&gt;
可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Echo和Print&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;让我们继续添加功能。&lt;br /&gt;
Bash使用echo在屏幕上打印信息。如果你玩过Linux shell那么你应该对此不陌&lt;br /&gt;
生。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;ambrose@ambrose-desktop&amp;gt; echo asdf
asdf
&lt;/pre&gt;
&lt;p&gt;
clojure.core命名空间也包含了一个和Bash的echo类似功能的函数，叫println.&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;)
asdf
;=&amp;gt; nil
&lt;/pre&gt;
&lt;p&gt;
如果我们能直接将(println &quot;a&quot;)传递给emit-bash-form是不是很酷?&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;))
asdf
;=&amp;gt; nil
&lt;/pre&gt;
&lt;p&gt;
那么首先，需要看看这是否可行.&lt;br /&gt;
我们使用Java来进行一下类比，假设我们要调用的是这样一段Java代码，它的第一个参数&lt;br /&gt;
类似于System.out.println(&quot;asdf&quot;).&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot;&gt;foo(System.out.println(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;));
&lt;/pre&gt;
&lt;p&gt;
(我们先忽略System.out.println(&amp;hellip;)返回的是void)&lt;br /&gt;
在Java中，参数会被先求值，然后再传递，也就是说，这里会先打印出asdf，然&lt;br /&gt;
后将println的返回值给foo方法。&lt;br /&gt;
我们如何能阻止参数被先求值呢?&lt;br /&gt;
很遗憾，在Java中这是不可能完成的任务。即使这在Java中可以实现，那后续我们能对&lt;br /&gt;
这段源代码做什么处理呢?&lt;br /&gt;
System.out.println(&quot;asdf&quot;)不是集合,所以我们不能遍历它；它也不是字符串，&lt;br /&gt;
我们也不能用正则表达式来切割它。不管System.out.println(&quot;asdf&quot;)是什么类&lt;br /&gt;
型，除了编译器，没人认识它。&lt;br /&gt;
Lisp则不会有这样的尴尬!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Lisp代码即数据&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;上节说到的Java的主要问题是没有能处理源代码的工具。Clojure是怎么解决这个问题的呢?&lt;br /&gt;
首先，为了能获得源码，Clojure提供了quote来阻止求值过程。&lt;br /&gt;
只需要在不需要求值的形式前面添加quote即可阻止该形式被求值。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;)&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;;=&amp;gt; (println &quot;a&quot;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
那么我们的返回值是什么类型呢?&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (class &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;;=&amp;gt; clojure.lang.PersistentList&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们可以将返回值当成原始的Clojure列表(实际上它就是)&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (first &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;;=&amp;gt; println&lt;/span&gt;

&lt;span style=&quot;color: #2aa198;&quot;&gt;user=&amp;gt; (second '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;))
;=&amp;gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这就是Lisp代码即数据所带来的一个好处.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;细窥Clojure&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;使用了quote，我们就离DSL近了一步。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;emit-bash-form
  '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
让我们将这个分支添加到emit-bash-form函数中。我们需要添加一个新的判断条&lt;br /&gt;
件。&lt;br /&gt;
但是这个分支该用什么类型来判断呢?&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (class &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
所以让我们来添加一个clojure.lang.PersistentList判断分支.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash-form&lt;/span&gt; [a]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; 
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
      &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;

    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; a
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Exception.&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Fell through&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
看看调用:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;user=&amp;gt; (emit-bash-form '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;hello&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo hello&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;使用多重方法对分支进行抽象&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;我们有一个好的开始，现在在我们进行下一步前，先进行一下重构。&lt;br /&gt;
现在，我们要添加新的分支，那么就要在emit-bash-form函数中添加新的判断逻&lt;br /&gt;
辑。随着添加的分支越来越多，这个函数将越来越难维护了。我们需要将这个函&lt;br /&gt;
数切分成易于维护的片段.&lt;br /&gt;
emit-bash-form的调度是依据其参数的类型来进行的。而这可以通过Clojure的&lt;br /&gt;
多重方法来进行抽象。&lt;br /&gt;
我们来定义一个叫emit-bash的多重方法。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
多重方法的分派和cond很类似，但是不需要去写实际的分派代码。让我们来对比&lt;br /&gt;
一下多重方法和之前的代码。defmulti用来创建一个新的多重方法，并和分派函&lt;br /&gt;
数来关联。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
defmethod用来添加具体的方法到多重方法中。在这里java.lang.String是指派&lt;br /&gt;
所依赖的值,而方法直接返回form自身.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
添加新方法和扩展cond表达式的效果相同，差别就是:&lt;br /&gt;
多重方法来控制指派，不需要你去写控制代码。&lt;br /&gt;
那么我们该如何使用emit-bash呢？调用多重方法和调用普通的Clojure函数一模&lt;br /&gt;
一样:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
分支判断由多重方法自己去判断了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;扩展我们的DSL实现Windows批处理&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;现在我们来实现Windows批处理.我们来定义一个新的多重方法,emit-batch:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    nil&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
现在我们能使用emit-batch和emit-bash了。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-batch &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO a&quot;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;user=&amp;gt; (emit-bash '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Ad-hoc继承&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;比较一下两个实现，有很多相似的地方。实际上，只有&lt;br /&gt;
clojure.lang.PersistentList分支有区别。&lt;br /&gt;
我们想到了继承，Clojure可以很方便的实现继承。&lt;br /&gt;
当我说继承的时候，我可不是指依赖于类或者命名空间的那种继承，实际上继承&lt;br /&gt;
是一个与类或命名空间无关的独立功能。&lt;br /&gt;
但是像Java这样的语言，继承是绑定到了类层级上的.&lt;br /&gt;
我们能从一个名字派生到另一个名字，或者从类派生到名字。而这个名字可以是symbol&lt;br /&gt;
或者keyword.这样的话继承就更加的灵活和强大!&lt;br /&gt;
我们将使用(derive child parent)来定义父子关系。isa?来判断第一个参数是&lt;br /&gt;
不是派生自第二个参数。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (derive ::child ::parent)
nil

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (isa? ::child ::parent)
true
&lt;/pre&gt;
&lt;p&gt;
我们来定义Bash和Batch的继承关系&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;derive&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;derive&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::batch&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
测试一下&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (parents ::bash)
;=&amp;gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;{:user/common}&lt;/span&gt;

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (parents ::batch)
;=&amp;gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;{:user/common}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;多重方法中使用继承&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;现在我们可以利用继承关系来定义一个新的多重方法emit了。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form]
    [*current-implementation* &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这个函数返回了一个包含两个元素的vector。一个是当前的实现(::bash或&lt;br /&gt;
者::batch)和指派类型。*current-implementation*是个动态var,你可以把他看&lt;br /&gt;
做一个线程安全的全局变量。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; ^{&lt;span style=&quot;color: #2aa198;&quot;&gt;:dynamic&lt;/span&gt; true}
  &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;The current script language implementation to generate&quot;&lt;/span&gt;
  *current-implementation*&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
在我们的继承关系中，::common是父，这就意味着它需要提供公共方法。&lt;br /&gt;
需要记住的是，现在的指派值是个vector。所以在每个defmethod中，都需要包&lt;br /&gt;
含一个vector，其中第一个元素是指派值.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;]
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
代码很类似。只有clojure.lang.PersistentList分支需要特别处理，其vector&lt;br /&gt;
的第一个元素需要为::bash或者::batch，而不能是::common了。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    nil&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    nil&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们来测试一下&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;

user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::batch&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO a&quot;&lt;/span&gt;

user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;

user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
#&amp;lt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;CompilerException&lt;/span&gt; java.lang.IllegalArgumentException:
&lt;span style=&quot;color: #cb4b16;&quot;&gt;No&lt;/span&gt; method in multimethod 'emit' for dispatch value:
[&lt;span style=&quot;color: #2aa198;&quot;&gt;:user/common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;REPL:31&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
因为我们没有定义[::common clojure.lang.PersistentList]的实现，多重方法&lt;br /&gt;
报错了。&lt;br /&gt;
多重方法非常强大且非常灵活，但是能力越强责任越大。我们可以将我们的多重&lt;br /&gt;
方法放在同一个命名空间下，但是不代表我们就需要这么做。当我们的DSL越来&lt;br /&gt;
越大的时候，我们需要将其分开到独立的命名空间下去。&lt;/p&gt;
&lt;p&gt;
这是个小例子，但是很好的展示了命名空间和继承的功能。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;饭后甜点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;我们使用多重方法，动态var和ad-hoc继承创建了一个漂亮的，细粒度的DSL，但&lt;br /&gt;
是在使用的时候还是有些许的不便。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们来消除样板代码.但是它在哪呢？&lt;br /&gt;
binding表达式就是个样板代码，我们可以将binding的工作封装到&lt;br /&gt;
with-implementation中&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;with-implementation &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这是个改进。但是还有个改进没有这么的明显:用来延迟求值的quote。我们使用&lt;br /&gt;
script来消除这个quote.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;with-implementation &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;script
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这样看起来好多了，但我们如何来实现script呢？Clojure函数会在求函数值前&lt;br /&gt;
对所有的参数进行求值，而quote就是用来解决这个问题。而现在我们要消除这&lt;br /&gt;
个quote。只能使用Lisp中的宏来处理。&lt;br /&gt;
宏不会去立即对参数求值，这正是我们需要的。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;script&lt;/span&gt; [form]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '~form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
看看调用结果&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;(script (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;))
=&amp;gt;
(emit &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
比起欣赏宏美化语法的功能，记住宏的特性对你更有帮助。&lt;br /&gt;
对于with-implementation来说，也需要宏来解决，与script不同，它不是为了&lt;br /&gt;
延迟求值这个功能，而是对于其中的script来说，需要先将script的内容添加到binding&lt;br /&gt;
形式中，才能进行求值.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;with-implementation&lt;/span&gt;
  [impl &amp;amp; body]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* impl]
    ~@body&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
好了,这就是DSL的所有内容了,实际上就添加了语法糖.&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;(with-implementation ::bash
  (script
    (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;)))
=&amp;gt;
(with-implementation ::bash
  (emit
    &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;(binding [*current-implementation* ::bash]&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;  (emit&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;)))
&lt;/pre&gt;
&lt;p&gt;
可以看出一个定义良好的宏如何来给代码添加语法糖.我们的DSL和普通的&lt;br /&gt;
Clojure代码看起来没啥区别.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;p&gt;在这个DSL中,我们看到了Clojure的很多高级特性.&lt;br /&gt;
我们来回顾一下我们构建DSL的过程.&lt;br /&gt;
一开始,我们使用了简单的cond表达式,然后变成了两个多重方法.接着我们使用&lt;br /&gt;
了继承和动态var来消除重复代码.最后我们使用宏来简化调用.&lt;br /&gt;
这个DSL是&lt;a href=&quot;https://github.com/pallet/stevedore&quot;&gt;Stevedore&lt;/a&gt;的一个简化版本,Stevedore是Hugo Duncan开发的开源项目.如&lt;br /&gt;
果你对这个DSL的实现感兴趣,那么最好的方法就是去看Stevedore的源码了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;Copyright&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;p&gt;Copyright Ambrose Bonnaire-Sergeant, 2013&lt;br /&gt;
Translated By Ivan 2014.02&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;p&gt;翻译自&lt;a href=&quot;http://clojure-doc.org/articles/tutorials/growing_a_dsl_with_clojure.html&quot;&gt;Growing a DSL with Clojure&lt;/a&gt;.主要讲解如何使用Clojure来创建一个简单的DSL.包括如下知识点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多重方法(Multimethods)
&lt;/li&gt;
&lt;li&gt;继承(Hierarchies)
&lt;/li&gt;
&lt;li&gt;元编程及&quot;代码即数据&quot;哲学(Metaprogramming and the &quot;Code as data&quot; philosophy)
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Lisp及其方言(比如Clojure)可以很方便的创建DSL并能和源语言无缝的集成.&lt;br /&gt;
Lisp界鼓吹的优点中，提到最多的可能就是:数据即代码，代码即数据了。在此&lt;br /&gt;
文中我们将依此特性来定义一个DSL。&lt;/p&gt;
&lt;p&gt;
我们将渐进式的开发这个DSL，不断的加入Clojure的特性和抽象。&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 任务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 第一步:构建我们的领域语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Echo和Print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 Lisp代码即数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5 细窥Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6 使用多重方法对分支进行抽象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7 扩展我们的DSL实现Windows批处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8 Ad-hoc继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9 多重方法中使用继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10 饭后甜点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11 总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-12&quot;&gt;12 Copyright&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;任务&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;我们的目标是定义一个可以生成各种脚本语言的DSL.而且DSL代码看起来和普通&lt;br /&gt;
的Clojure代码没有区别。&lt;/p&gt;
&lt;p&gt;
例如,我们使用Clojure形式(form)来生成Bash脚本或者Windows批处理脚本:&lt;br /&gt;
输入(Clojure形式):&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; 1 2&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
输出(Bash脚本):&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; [ 1 -eq 2 ]; &lt;span style=&quot;color: #859900;&quot;&gt;then&lt;/span&gt;
  &lt;span style=&quot;color: #859900;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span style=&quot;color: #859900;&quot;&gt;else&lt;/span&gt;
  &lt;span style=&quot;color: #859900;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;b&quot;&lt;/span&gt;
&lt;span style=&quot;color: #859900;&quot;&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
输出(Windows批处理):&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;IF &lt;span style=&quot;color: #268bd2;&quot;&gt;1&lt;/span&gt;==2 (
  ECHO a
) ELSE (
  ECHO b
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第一步:构建我们的领域语言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;我们先从Bash脚本开始。&lt;br /&gt;
在开始之前，我们先看看Clojure核心类型是否有什么类型我们可以直接拿到领域&lt;br /&gt;
语言中使用。在Clojure类型中是否有和Bash脚本类似的类型呢？&lt;br /&gt;
那就是字符串和基本类型，我们先从这里开始。&lt;br /&gt;
我们来定义一个emit-bash-form函数，它接受一个Clojure形式并返回一个符合&lt;br /&gt;
Bash脚本定义的字符串。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash-form&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Returns a String containing the equivalent Bash script&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;  to its argument.&quot;&lt;/span&gt;
  [a]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; 
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; a
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Exception.&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Fell through&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
cond表达式根据传入参数的类型来进行相应的操作。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form 1)
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
那么我们为什么要选择Long而不是Integer呢？因为在Clojure中，默认数据类型&lt;br /&gt;
是Long.&lt;br /&gt;
虽然Clojure支持Java所有的基本类型,但是默认情况下Clojure使用的是long和&lt;br /&gt;
double.Clojure会自动将int转成long，float转成double.可以简单的测试一下:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (class 7)
java.lang.Long
&lt;/pre&gt;
&lt;p&gt;
现在，如果我们想添加条件判断，我们只需要在cond表达式中添加相应的分支即&lt;br /&gt;
可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Echo和Print&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;让我们继续添加功能。&lt;br /&gt;
Bash使用echo在屏幕上打印信息。如果你玩过Linux shell那么你应该对此不陌&lt;br /&gt;
生。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;ambrose@ambrose-desktop&amp;gt; echo asdf
asdf
&lt;/pre&gt;
&lt;p&gt;
clojure.core命名空间也包含了一个和Bash的echo类似功能的函数，叫println.&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;)
asdf
;=&amp;gt; nil
&lt;/pre&gt;
&lt;p&gt;
如果我们能直接将(println &quot;a&quot;)传递给emit-bash-form是不是很酷?&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;))
asdf
;=&amp;gt; nil
&lt;/pre&gt;
&lt;p&gt;
那么首先，需要看看这是否可行.&lt;br /&gt;
我们使用Java来进行一下类比，假设我们要调用的是这样一段Java代码，它的第一个参数&lt;br /&gt;
类似于System.out.println(&quot;asdf&quot;).&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot;&gt;foo(System.out.println(&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;));
&lt;/pre&gt;
&lt;p&gt;
(我们先忽略System.out.println(&amp;hellip;)返回的是void)&lt;br /&gt;
在Java中，参数会被先求值，然后再传递，也就是说，这里会先打印出asdf，然&lt;br /&gt;
后将println的返回值给foo方法。&lt;br /&gt;
我们如何能阻止参数被先求值呢?&lt;br /&gt;
很遗憾，在Java中这是不可能完成的任务。即使这在Java中可以实现，那后续我们能对&lt;br /&gt;
这段源代码做什么处理呢?&lt;br /&gt;
System.out.println(&quot;asdf&quot;)不是集合,所以我们不能遍历它；它也不是字符串，&lt;br /&gt;
我们也不能用正则表达式来切割它。不管System.out.println(&quot;asdf&quot;)是什么类&lt;br /&gt;
型，除了编译器，没人认识它。&lt;br /&gt;
Lisp则不会有这样的尴尬!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Lisp代码即数据&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;上节说到的Java的主要问题是没有能处理源代码的工具。Clojure是怎么解决这个问题的呢?&lt;br /&gt;
首先，为了能获得源码，Clojure提供了quote来阻止求值过程。&lt;br /&gt;
只需要在不需要求值的形式前面添加quote即可阻止该形式被求值。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;)&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;;=&amp;gt; (println &quot;a&quot;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
那么我们的返回值是什么类型呢?&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (class &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;;=&amp;gt; clojure.lang.PersistentList&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们可以将返回值当成原始的Clojure列表(实际上它就是)&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (first &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;;=&amp;gt; println&lt;/span&gt;

&lt;span style=&quot;color: #2aa198;&quot;&gt;user=&amp;gt; (second '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;))
;=&amp;gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这就是Lisp代码即数据所带来的一个好处.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;细窥Clojure&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;使用了quote，我们就离DSL近了一步。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;emit-bash-form
  '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
让我们将这个分支添加到emit-bash-form函数中。我们需要添加一个新的判断条&lt;br /&gt;
件。&lt;br /&gt;
但是这个分支该用什么类型来判断呢?&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (class &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
所以让我们来添加一个clojure.lang.PersistentList判断分支.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash-form&lt;/span&gt; [a]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;cond&lt;/span&gt; 
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
      &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;

    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; a
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; a&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;:else&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Exception.&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Fell through&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
看看调用:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash-form &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;user=&amp;gt; (emit-bash-form '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;hello&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo hello&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;使用多重方法对分支进行抽象&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;我们有一个好的开始，现在在我们进行下一步前，先进行一下重构。&lt;br /&gt;
现在，我们要添加新的分支，那么就要在emit-bash-form函数中添加新的判断逻&lt;br /&gt;
辑。随着添加的分支越来越多，这个函数将越来越难维护了。我们需要将这个函&lt;br /&gt;
数切分成易于维护的片段.&lt;br /&gt;
emit-bash-form的调度是依据其参数的类型来进行的。而这可以通过Clojure的&lt;br /&gt;
多重方法来进行抽象。&lt;br /&gt;
我们来定义一个叫emit-bash的多重方法。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
多重方法的分派和cond很类似，但是不需要去写实际的分派代码。让我们来对比&lt;br /&gt;
一下多重方法和之前的代码。defmulti用来创建一个新的多重方法，并和分派函&lt;br /&gt;
数来关联。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
defmethod用来添加具体的方法到多重方法中。在这里java.lang.String是指派&lt;br /&gt;
所依赖的值,而方法直接返回form自身.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-bash&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
添加新方法和扩展cond表达式的效果相同，差别就是:&lt;br /&gt;
多重方法来控制指派，不需要你去写控制代码。&lt;br /&gt;
那么我们该如何使用emit-bash呢？调用多重方法和调用普通的Clojure函数一模&lt;br /&gt;
一样:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-bash &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
分支判断由多重方法自己去判断了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;扩展我们的DSL实现Windows批处理&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;现在我们来实现Windows批处理.我们来定义一个新的多重方法,emit-batch:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    nil&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit-batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
现在我们能使用emit-batch和emit-bash了。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (emit-batch &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO a&quot;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;user=&amp;gt; (emit-bash '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Ad-hoc继承&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;比较一下两个实现，有很多相似的地方。实际上，只有&lt;br /&gt;
clojure.lang.PersistentList分支有区别。&lt;br /&gt;
我们想到了继承，Clojure可以很方便的实现继承。&lt;br /&gt;
当我说继承的时候，我可不是指依赖于类或者命名空间的那种继承，实际上继承&lt;br /&gt;
是一个与类或命名空间无关的独立功能。&lt;br /&gt;
但是像Java这样的语言，继承是绑定到了类层级上的.&lt;br /&gt;
我们能从一个名字派生到另一个名字，或者从类派生到名字。而这个名字可以是symbol&lt;br /&gt;
或者keyword.这样的话继承就更加的灵活和强大!&lt;br /&gt;
我们将使用(derive child parent)来定义父子关系。isa?来判断第一个参数是&lt;br /&gt;
不是派生自第二个参数。&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (derive ::child ::parent)
nil

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (isa? ::child ::parent)
true
&lt;/pre&gt;
&lt;p&gt;
我们来定义Bash和Batch的继承关系&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;derive&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;derive&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::batch&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
测试一下&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (parents ::bash)
;=&amp;gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;{:user/common}&lt;/span&gt;

&lt;span style=&quot;color: #268bd2;&quot;&gt;user&lt;/span&gt;=&amp;gt; (parents ::batch)
;=&amp;gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;{:user/common}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;多重方法中使用继承&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;现在我们可以利用继承关系来定义一个新的多重方法emit了。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmulti&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [form]
    [*current-implementation* &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;class&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这个函数返回了一个包含两个元素的vector。一个是当前的实现(::bash或&lt;br /&gt;
者::batch)和指派类型。*current-implementation*是个动态var,你可以把他看&lt;br /&gt;
做一个线程安全的全局变量。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; ^{&lt;span style=&quot;color: #2aa198;&quot;&gt;:dynamic&lt;/span&gt; true}
  &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;The current script language implementation to generate&quot;&lt;/span&gt;
  *current-implementation*&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
在我们的继承关系中，::common是父，这就意味着它需要提供公共方法。&lt;br /&gt;
需要记住的是，现在的指派值是个vector。所以在每个defmethod中，都需要包&lt;br /&gt;
含一个vector，其中第一个元素是指派值.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.String&lt;/span&gt;]
  [form]
  form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Long&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;java.lang.Double&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
代码很类似。只有clojure.lang.PersistentList分支需要特别处理，其vector&lt;br /&gt;
的第一个元素需要为::bash或者::batch，而不能是::common了。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    nil&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;emit&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;::batch&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;]
  [form]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;println&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO &quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;second&lt;/span&gt; form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    nil&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们来测试一下&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;

user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::batch&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;ECHO a&quot;&lt;/span&gt;

user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;echo a&quot;&lt;/span&gt;

user=&amp;gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::common&lt;/span&gt;]
         &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
#&amp;lt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;CompilerException&lt;/span&gt; java.lang.IllegalArgumentException:
&lt;span style=&quot;color: #cb4b16;&quot;&gt;No&lt;/span&gt; method in multimethod 'emit' for dispatch value:
[&lt;span style=&quot;color: #2aa198;&quot;&gt;:user/common&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;clojure.lang.PersistentList&lt;/span&gt;] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;REPL:31&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
因为我们没有定义[::common clojure.lang.PersistentList]的实现，多重方法&lt;br /&gt;
报错了。&lt;br /&gt;
多重方法非常强大且非常灵活，但是能力越强责任越大。我们可以将我们的多重&lt;br /&gt;
方法放在同一个命名空间下，但是不代表我们就需要这么做。当我们的DSL越来&lt;br /&gt;
越大的时候，我们需要将其分开到独立的命名空间下去。&lt;/p&gt;
&lt;p&gt;
这是个小例子，但是很好的展示了命名空间和继承的功能。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;饭后甜点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;我们使用多重方法，动态var和ad-hoc继承创建了一个漂亮的，细粒度的DSL，但&lt;br /&gt;
是在使用的时候还是有些许的不便。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们来消除样板代码.但是它在哪呢？&lt;br /&gt;
binding表达式就是个样板代码，我们可以将binding的工作封装到&lt;br /&gt;
with-implementation中&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;with-implementation &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这是个改进。但是还有个改进没有这么的明显:用来延迟求值的quote。我们使用&lt;br /&gt;
script来消除这个quote.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;with-implementation &lt;span style=&quot;color: #2aa198;&quot;&gt;::bash&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;script
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这样看起来好多了，但我们如何来实现script呢？Clojure函数会在求函数值前&lt;br /&gt;
对所有的参数进行求值，而quote就是用来解决这个问题。而现在我们要消除这&lt;br /&gt;
个quote。只能使用Lisp中的宏来处理。&lt;br /&gt;
宏不会去立即对参数求值，这正是我们需要的。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;script&lt;/span&gt; [form]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b58900;&quot;&gt;emit&lt;/span&gt; '~form&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
看看调用结果&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;(script (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;))
=&amp;gt;
(emit &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
比起欣赏宏美化语法的功能，记住宏的特性对你更有帮助。&lt;br /&gt;
对于with-implementation来说，也需要宏来解决，与script不同，它不是为了&lt;br /&gt;
延迟求值这个功能，而是对于其中的script来说，需要先将script的内容添加到binding&lt;br /&gt;
形式中，才能进行求值.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defmacro&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;with-implementation&lt;/span&gt;
  [impl &amp;amp; body]
  `&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*current-implementation* impl]
    ~@body&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
好了,这就是DSL的所有内容了,实际上就添加了语法糖.&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;(with-implementation ::bash
  (script
    (println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;)))
=&amp;gt;
(with-implementation ::bash
  (emit
    &lt;span style=&quot;color: #2aa198;&quot;&gt;'(println &quot;a&quot;))&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;(binding [*current-implementation* ::bash]&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;  (emit&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    '&lt;/span&gt;(println &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;a&quot;&lt;/span&gt;)))
&lt;/pre&gt;
&lt;p&gt;
可以看出一个定义良好的宏如何来给代码添加语法糖.我们的DSL和普通的&lt;br /&gt;
Clojure代码看起来没啥区别.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;p&gt;在这个DSL中,我们看到了Clojure的很多高级特性.&lt;br /&gt;
我们来回顾一下我们构建DSL的过程.&lt;br /&gt;
一开始,我们使用了简单的cond表达式,然后变成了两个多重方法.接着我们使用&lt;br /&gt;
了继承和动态var来消除重复代码.最后我们使用宏来简化调用.&lt;br /&gt;
这个DSL是&lt;a href=&quot;https://github.com/pallet/stevedore&quot;&gt;Stevedore&lt;/a&gt;的一个简化版本,Stevedore是Hugo Duncan开发的开源项目.如&lt;br /&gt;
果你对这个DSL的实现感兴趣,那么最好的方法就是去看Stevedore的源码了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;Copyright&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;p&gt;Copyright Ambrose Bonnaire-Sergeant, 2013&lt;br /&gt;
Translated By Ivan 2014.02&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure进阶:数学计算</title>
        <link href="http://liyouhai.com/clojure/clojure%25e8%25bf%259b%25e9%2598%25b6%25e6%2595%25b0%25e5%25ad%25a6%25e8%25ae%25a1%25e7%25ae%2597.html"/>
        <updated>2014-02-19T13:11:37+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e8%bf%9b%e9%98%b6%e6%95%b0%e5%ad%a6%e8%ae%a1%e7%ae%97</id>
        <content type="html">&lt;div id=&quot;content&quot; style=&quot;color: #657a83; font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px;&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;本文翻译自&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojure-doc.org/articles/cookbooks/math.html&quot;&gt;Mathematics with Clojure&lt;/a&gt;&lt;br /&gt;
本文包含了使用Clojure的内建函数,扩展包和部分JDK功能进行数学计算.&lt;br /&gt;
版权:&lt;br /&gt;
This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2 style=&quot;margin: 5px;&quot;&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-1&quot;&gt;1 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2&quot;&gt;2 方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2-1&quot;&gt;2.1 简单计算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2-2&quot;&gt;2.2 三角函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2-3&quot;&gt;2.3 组合数学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot; style=&quot;margin: 5px;&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 准备&lt;/h2&gt;
&lt;div id=&quot;text-1&quot; class=&quot;outline-text-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;这里的一些例子使用了&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;https://github.com/clojure/math.numeric-tower&quot;&gt;math.numeric-tower&lt;/a&gt;和&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;https://github.com/clojure/math.combinatorics&quot;&gt;math.combinatorics&lt;/a&gt;库.所以需要&lt;br /&gt;
你在代码的命名空间中包含如下代码:&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;:require&lt;/span&gt; [clojure.math.numeric-tower &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; math]
          [clojure.math.combinatorics &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; combo]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;或者在REPL里载入:&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;require&lt;/span&gt; '[clojure.math.numeric-tower &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; math]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;require&lt;/span&gt; '[clojure.math.combinatorics &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; combo]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot; style=&quot;margin: 5px;&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 方法&lt;/h2&gt;
&lt;div id=&quot;text-2&quot; class=&quot;outline-text-2&quot;&gt; &lt;/div&gt;
&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 简单计算&lt;/h3&gt;
&lt;div id=&quot;text-2-1&quot; class=&quot;outline-text-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;+&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;-&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; -1&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;*&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 12&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;/&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 3/4  (an exact ratio)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;/&lt;/span&gt; 3.0 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 0.75&lt;/span&gt;

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;inc&lt;/span&gt; 5&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 6&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;dec&lt;/span&gt; 5&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 4&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;想要计算整数的除法,取余和取模,请看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojuredocs.org/clojure_core/clojure.core/quot&quot;&gt;quot&lt;/a&gt;,&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojuredocs.org/clojure_core/clojure.core/rem&quot;&gt;rem&lt;/a&gt;,&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojuredocs.org/clojure_core/clojure.core/mod&quot;&gt;mod&lt;/a&gt;&lt;br /&gt;
想计算指数的平方根,四舍五入,上下限,绝对值和最大公约数/最小公倍数,请看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojure.github.com/math.numeric-tower/&quot;&gt;math.numeric-tower&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 三角函数&lt;/h3&gt;
&lt;div id=&quot;text-2-2&quot; class=&quot;outline-text-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;使用Java平台提供的函数:&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/PI&lt;/span&gt;       &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 3.14159...&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/sin&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/cos&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/tan&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;还有很多的函数,你可以查看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html&quot;&gt;java.lang.Math&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 组合数学&lt;/h3&gt;
&lt;div id=&quot;text-2-3&quot; class=&quot;outline-text-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;对于组合数学相关函数(比如:combinations和permutations),请看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojure.github.com/math.combinatorics/&quot;&gt;math.combinatorics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;postamble&quot; style=&quot;margin-top: 15px; color: #657a83; font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px;&quot;&gt;
&lt;p class=&quot;author&quot; style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;Author: Ivan (&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;mailto:ivan.pig@foxmail.com&quot;&gt;ivan.pig@foxmail.com&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;date&quot; style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;Date: 2014-02-09 日&lt;/p&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;content&quot; style=&quot;color: #657a83; font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px;&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;本文翻译自&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojure-doc.org/articles/cookbooks/math.html&quot;&gt;Mathematics with Clojure&lt;/a&gt;&lt;br /&gt;
本文包含了使用Clojure的内建函数,扩展包和部分JDK功能进行数学计算.&lt;br /&gt;
版权:&lt;br /&gt;
This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2 style=&quot;margin: 5px;&quot;&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-1&quot;&gt;1 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2&quot;&gt;2 方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2-1&quot;&gt;2.1 简单计算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2-2&quot;&gt;2.2 三角函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;#sec-2-3&quot;&gt;2.3 组合数学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot; style=&quot;margin: 5px;&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 准备&lt;/h2&gt;
&lt;div id=&quot;text-1&quot; class=&quot;outline-text-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;这里的一些例子使用了&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;https://github.com/clojure/math.numeric-tower&quot;&gt;math.numeric-tower&lt;/a&gt;和&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;https://github.com/clojure/math.combinatorics&quot;&gt;math.combinatorics&lt;/a&gt;库.所以需要&lt;br /&gt;
你在代码的命名空间中包含如下代码:&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;:require&lt;/span&gt; [clojure.math.numeric-tower &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; math]
          [clojure.math.combinatorics &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; combo]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;或者在REPL里载入:&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;require&lt;/span&gt; '[clojure.math.numeric-tower &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; math]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;require&lt;/span&gt; '[clojure.math.combinatorics &lt;span style=&quot;color: #ae81ff;&quot;&gt;:as&lt;/span&gt; combo]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot; style=&quot;margin: 5px;&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 方法&lt;/h2&gt;
&lt;div id=&quot;text-2&quot; class=&quot;outline-text-2&quot;&gt; &lt;/div&gt;
&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 简单计算&lt;/h3&gt;
&lt;div id=&quot;text-2-1&quot; class=&quot;outline-text-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;+&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;-&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; -1&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;*&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 12&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;/&lt;/span&gt; 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 3/4  (an exact ratio)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;/&lt;/span&gt; 3.0 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 0.75&lt;/span&gt;

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;inc&lt;/span&gt; 5&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 6&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;dec&lt;/span&gt; 5&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 4&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;想要计算整数的除法,取余和取模,请看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojuredocs.org/clojure_core/clojure.core/quot&quot;&gt;quot&lt;/a&gt;,&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojuredocs.org/clojure_core/clojure.core/rem&quot;&gt;rem&lt;/a&gt;,&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojuredocs.org/clojure_core/clojure.core/mod&quot;&gt;mod&lt;/a&gt;&lt;br /&gt;
想计算指数的平方根,四舍五入,上下限,绝对值和最大公约数/最小公倍数,请看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojure.github.com/math.numeric-tower/&quot;&gt;math.numeric-tower&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 三角函数&lt;/h3&gt;
&lt;div id=&quot;text-2-2&quot; class=&quot;outline-text-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;使用Java平台提供的函数:&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot; style=&quot;border: 1pt solid #aebdcc; background-color: #272822; padding: 5pt; font-family: monaco, Consolas, courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/PI&lt;/span&gt;       &lt;span style=&quot;color: #75715e;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;=&amp;gt; 3.14159...&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/sin&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/cos&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22a;&quot;&gt;Math/tan&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;还有很多的函数,你可以查看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html&quot;&gt;java.lang.Math&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 组合数学&lt;/h3&gt;
&lt;div id=&quot;text-2-3&quot; class=&quot;outline-text-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;对于组合数学相关函数(比如:combinations和permutations),请看&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;http://clojure.github.com/math.combinatorics/&quot;&gt;math.combinatorics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;postamble&quot; style=&quot;margin-top: 15px; color: #657a83; font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px;&quot;&gt;
&lt;p class=&quot;author&quot; style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;Author: Ivan (&lt;a style=&quot;text-decoration: none; color: #5489de;&quot; href=&quot;mailto:ivan.pig@foxmail.com&quot;&gt;ivan.pig@foxmail.com&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;date&quot; style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;Date: 2014-02-09 日&lt;/p&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure专题:文件处理</title>
        <link href="http://liyouhai.com/clojure/clojure%25e4%25b8%2593%25e9%25a2%2598%25e6%2596%2587%25e4%25bb%25b6%25e5%25a4%2584%25e7%2590%2586.html"/>
        <updated>2014-02-08T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e4%b8%93%e9%a2%98%e6%96%87%e4%bb%b6%e5%a4%84%e7%90%86</id>
        <content type="html">&lt;p&gt;本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/cookbooks/files_and_directories.html&quot;&gt;Working with Files and Directories in Clojure&lt;/a&gt;&lt;br /&gt;
本文介绍使用Clojure的clojure.java.io命名空间下的函数以及JDK相关方法来&lt;br /&gt;
操作文件和目录.&lt;br /&gt;
版权:This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;2.1 将文件读到字符串中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;2.2 一行一行的读取文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;2.3 将字符串写到文件中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-4&quot;&gt;2.4 每次向文件中写一行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-5&quot;&gt;2.5 检查文件是否存在&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-6&quot;&gt;2.6 获取给定目录下的文件列表和目录列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 更多内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;准备&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;请注意,在下面的例子中,&quot;io&quot;是clojure.java.io命名空间的简写引用.请确保你&lt;br /&gt;
的ns宏包含如下代码:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:require&lt;/span&gt; [clojure.java.io &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; io]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;或者在REPL中加载了:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.java.io &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; io]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;将文件读到字符串中&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;a-long-string&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;注意,你可一给slurp函数传递url.请看&lt;a href=&quot;http://clojuredocs.org/clojure_core/clojure.core/slurp&quot;&gt;slurp文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;一行一行的读取文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;假设你想针对文件的每行内容调用my-func函数,并返回结果序列:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;with-open&lt;/span&gt; [rdr &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/reader &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;doall&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; my-func &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;line-seq&lt;/span&gt; rdr&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;doall函数是必须的,因为map函数返回的是个lazy序列.line-seq返回的每行内容&lt;br /&gt;
没有是去除了末尾的回车标记的,且空行将返回空字符串.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;将字符串写到文件中&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;spit&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;
      &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;A long&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;multi-line string.&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;Bye.&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;如果foo.txt文件不存在则会创建,如果存在,将会覆盖其内容.如果想追加内容,&lt;br /&gt;
而不是覆盖:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;spit&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;file content&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:append&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;每次向文件中写一行&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;假设你想将vector里的内容写到文件中,每个元素一行:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;with-open&lt;/span&gt; [wrtr &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/writer &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;doseq&lt;/span&gt; [i my-vec]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.write&lt;/span&gt; wrtr &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; i &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;检查文件是否存在&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.exists&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;filename.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;判断是否是目录:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.isDirectory&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;path/to/something&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;io/file是java.io.File对象(文件或目录).你能直接调用该对象上的方法,包括:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;exists        文件是否存在?
isDirectory   文件还是目录?
getName       获取文件名字
getParent     过去文件所在目录名称
getPath       获取文件全路径
mkdir         创建目录
&lt;/pre&gt;
&lt;p&gt;更多内容前查看&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/io/File.html&quot;&gt;java.io.File&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;获取给定目录下的文件列表和目录列表&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p&gt;对于File对象:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.listFiles&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;path/to/some-dir&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;上面的方法返回File对象序列,如果想返回字符串序列:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.list&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;path/to/some-dir&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;所有的结果都是列表形式的,可使用Clojure中的seq相关函数对其操作.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;更多内容&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Raynes/fs&quot;&gt;https://github.com/Raynes/fs&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://clojure.org/cheatsheet&quot;&gt;cheatsheet&lt;/a&gt;的I/O节&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;p&gt;本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/cookbooks/files_and_directories.html&quot;&gt;Working with Files and Directories in Clojure&lt;/a&gt;&lt;br /&gt;
本文介绍使用Clojure的clojure.java.io命名空间下的函数以及JDK相关方法来&lt;br /&gt;
操作文件和目录.&lt;br /&gt;
版权:This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets). The source is available on Github.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;2.1 将文件读到字符串中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;2.2 一行一行的读取文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;2.3 将字符串写到文件中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-4&quot;&gt;2.4 每次向文件中写一行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-5&quot;&gt;2.5 检查文件是否存在&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-6&quot;&gt;2.6 获取给定目录下的文件列表和目录列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 更多内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;准备&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;请注意,在下面的例子中,&quot;io&quot;是clojure.java.io命名空间的简写引用.请确保你&lt;br /&gt;
的ns宏包含如下代码:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:require&lt;/span&gt; [clojure.java.io &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; io]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;或者在REPL中加载了:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.java.io &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; io]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;将文件读到字符串中&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;a-long-string&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;注意,你可一给slurp函数传递url.请看&lt;a href=&quot;http://clojuredocs.org/clojure_core/clojure.core/slurp&quot;&gt;slurp文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;一行一行的读取文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;假设你想针对文件的每行内容调用my-func函数,并返回结果序列:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;with-open&lt;/span&gt; [rdr &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/reader &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;doall&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; my-func &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;line-seq&lt;/span&gt; rdr&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;doall函数是必须的,因为map函数返回的是个lazy序列.line-seq返回的每行内容&lt;br /&gt;
没有是去除了末尾的回车标记的,且空行将返回空字符串.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;将字符串写到文件中&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;spit&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;
      &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;A long&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;multi-line string.&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;Bye.&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;如果foo.txt文件不存在则会创建,如果存在,将会覆盖其内容.如果想追加内容,&lt;br /&gt;
而不是覆盖:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;spit&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;file content&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;:append&lt;/span&gt; true&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;每次向文件中写一行&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;假设你想将vector里的内容写到文件中,每个元素一行:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;with-open&lt;/span&gt; [wrtr &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/writer &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;doseq&lt;/span&gt; [i my-vec]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.write&lt;/span&gt; wrtr &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; i &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;检查文件是否存在&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.exists&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;filename.txt&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;判断是否是目录:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.isDirectory&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;path/to/something&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;io/file是java.io.File对象(文件或目录).你能直接调用该对象上的方法,包括:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;exists        文件是否存在?
isDirectory   文件还是目录?
getName       获取文件名字
getParent     过去文件所在目录名称
getPath       获取文件全路径
mkdir         创建目录
&lt;/pre&gt;
&lt;p&gt;更多内容前查看&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/io/File.html&quot;&gt;java.io.File&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;获取给定目录下的文件列表和目录列表&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p&gt;对于File对象:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.listFiles&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;path/to/some-dir&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;上面的方法返回File对象序列,如果想返回字符串序列:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.list&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;io/file &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;path/to/some-dir&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;所有的结果都是列表形式的,可使用Clojure中的seq相关函数对其操作.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;更多内容&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Raynes/fs&quot;&gt;https://github.com/Raynes/fs&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://clojure.org/cheatsheet&quot;&gt;cheatsheet&lt;/a&gt;的I/O节&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure专题:字符串处理</title>
        <link href="http://liyouhai.com/clojure/clojure%25e4%25b8%2593%25e9%25a2%2598%25e5%25ad%2597%25e7%25ac%25a6%25e4%25b8%25b2%25e5%25a4%2584%25e7%2590%2586.html"/>
        <updated>2014-02-05T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e4%b8%93%e9%a2%98%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%a4%84%e7%90%86</id>
        <content type="html">&lt;ul&gt;
&lt;li&gt;本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/cookbooks/strings.html&quot;&gt;Strings&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;本文内容包括使用Clojure内建的函数和标准库来操作字符串,以及JDK中的相关操作.
&lt;/li&gt;
&lt;li&gt;版权:This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets).
&lt;/li&gt;
&lt;li&gt;源代码在&lt;a href=&quot;https://github.com/clojuredocs/guides&quot;&gt;Github&lt;/a&gt;上.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 预备知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1 基础方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;3.2 解析复杂字符串&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2-1&quot;&gt;3.2.1 正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2-2&quot;&gt;3.2.2 上下文无关语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;3.3 构建复杂的字符串&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-1&quot;&gt;3.3.1 重定向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-2&quot;&gt;3.3.2 格式化字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-3&quot;&gt;3.3.3 CL-Format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 贡献者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;概述&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Clojure中的字符串就是Java字符串.你可以使用Java中的相应方法来对其进行处理.
&lt;/li&gt;
&lt;li&gt;Java字符串是不可变的,所以能很方便的在Clojure中使用
&lt;/li&gt;
&lt;li&gt;你不能给Java字符串添加元数据
&lt;/li&gt;
&lt;li&gt;Clojure提供一些方便的符号
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;&quot;foo&quot;    java.lang.String
#&quot;\d&quot;    java.util.regex.Pattern (正则表达式,匹配一个数字)
\f       java.lang.Character (表示'f')
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;注意&lt;/b&gt;: 人类的大脑和计算机之间还是有很大的差异的.所以Java的字符串(UTF-16编码)并不能像人们所认为的那样很好的和字符一一对应.比如说,一个Unicode的位和我们所认为的字符的一位是无法对应的(像韩国 韩语尊宝,这些词由多个字符组成.)同样的,一个Unicode位可能是由2个UTF-16字符组成.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;预备知识&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;一些例子用到了clojure.string,clojure.edn和clojure.pprint.我们假设你的ns宏里面已经包含了如下内容:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:require&lt;/span&gt; [clojure.string &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; str]
          [clojure.edn &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; edn]
          [clojure.pprint &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; pp]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;或者在REPL里面,你需要载入:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.string &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; str]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.edn &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; edn]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.pprint &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; pp]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;基础方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#38271;&amp;#24230;&amp;#35745;&amp;#31639;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;count&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;      &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 4&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;empty?&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;empty?&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;         &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/blank? &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;    &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#36830;&amp;#25509;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;            &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foobar&quot; &lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;012&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;.&quot;&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;0.1.2&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20351;&amp;#29992;Java&amp;#26041;&amp;#27861;&amp;#26469;&amp;#21305;&amp;#37197;.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23545;&amp;#20110;&amp;#19979;&amp;#38754;&amp;#30340;&amp;#24773;&amp;#20917;,&amp;#20320;&amp;#24212;&amp;#35813;&amp;#26356;&amp;#21916;&amp;#27426;&amp;#20351;&amp;#29992;&amp;#27491;&amp;#21017;&amp;#34920;&amp;#36798;&amp;#24335;.&amp;#27604;&amp;#22914;,&amp;#20320;&amp;#22312;&amp;#36827;&amp;#34892;&amp;#27979;&amp;#35797;,&amp;#24403;&amp;#22833;&amp;#36133;&amp;#26102;&amp;#38656;&amp;#35201;&amp;#36820;&amp;#22238;-1.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25110;&amp;#32773;&amp;#19968;&amp;#20010;&amp;#23383;&amp;#31526;\o&amp;#38656;&amp;#35201;&amp;#36716;&amp;#25442;&amp;#25104;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#25110;&amp;#25968;&amp;#23383;.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.indexOf&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;oo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;         &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 1&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.indexOf&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;          &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; -1&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.lastIndexOf&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;int&lt;/span&gt; \o&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 2&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#25130;&amp;#21462;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;subs&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt; 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;       &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;123&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;subs&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt; 1 3&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;12&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/trim &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;  foo  &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/triml &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;  foo  &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo  &quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/trimr &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;  foo  &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;  foo&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20999;&amp;#20998;&amp;#23383;&amp;#31526;&amp;#20018;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;seq&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                       &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; (\f \o \o)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo/bar/quux&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [&quot;foo&quot; &quot;bar&quot; &quot;quux&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo/bar/quux&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;/&quot;&lt;/span&gt; 2&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [&quot;foo&quot; &quot;bar/quux&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/split-lines &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                             &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [&quot;foo&quot; &quot;bar&quot;]&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22823;&amp;#23567;&amp;#20889;&amp;#36716;&amp;#25442;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/lower-case &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;fOo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/upper-case &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;fOo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;FOO&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/capitalize &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;fOo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;Foo&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36716;&amp;#25442; &lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/escape &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo|bar|quux&quot;&lt;/span&gt; {\| &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;||&quot;&lt;/span&gt;}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo||bar||quux&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#33719;&amp;#24471;&amp;#32473;&amp;#23450;&amp;#32534;&amp;#30721;&amp;#30340;&amp;#23383;&amp;#33410;&amp;#25968;&amp;#32452;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;(&amp;#36755;&amp;#20986;&amp;#21487;&amp;#33021;&amp;#21644;&amp;#19979;&amp;#38754;&amp;#30340;&quot;3c3660&quot;&amp;#19981;&amp;#21516;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.getBytes&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; #&amp;lt;byte[] [B@3c3660&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35299;&amp;#26512;&amp;#20026;keyword&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;keyword&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; :foo&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35299;&amp;#26512;&amp;#20026;&amp;#25968;&amp;#23383;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;bigint&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;20000000000000000000000000000&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 20000000000000000000000000000N&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;bigdec&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;20000000000000000000.00000000&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 20000000000000000000.00000000M&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Integer/parseInt&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Float/parseFloat&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 2.0&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35299;&amp;#26512;&amp;#20026;edn,&amp;#23427;&amp;#26159;Clojure&amp;#24418;&amp;#24335;&amp;#30340;&amp;#19968;&amp;#20010;&amp;#23376;&amp;#38598;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;edn/read-string &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0xffff&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 65535&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35835;&amp;#21462;Clojure&amp;#24418;&amp;#24335;&amp;#30340;&amp;#26041;&amp;#27861;.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23433;&amp;#20840;&amp;#35686;&amp;#21578;:&amp;#24403;&amp;#20320;&amp;#26080;&amp;#27861;&amp;#30830;&amp;#20445;&amp;#20320;&amp;#33021;100%&amp;#20449;&amp;#20219;&amp;#35201;&amp;#22788;&amp;#29702;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#26102;,&amp;#35831;&amp;#23558;*read-eval*&amp;#32622;&amp;#20026;false.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20174;Clojure1.5&amp;#24320;&amp;#22987;*read-eval*&amp;#40664;&amp;#35748;&amp;#20026;false,&amp;#20294;&amp;#20026;&amp;#20102;&amp;#23433;&amp;#20840;&amp;#36215;&amp;#35265;,&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22312;&amp;#22788;&amp;#29702;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#26102;&amp;#36824;&amp;#26159;&amp;#20808;&amp;#25163;&amp;#21160;&amp;#32622;&amp;#19968;&amp;#19979;false&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22240;&amp;#20026;&amp;#21487;&amp;#33021;&amp;#26377;&amp;#25805;&amp;#20316;&amp;#23558;&amp;#20854;&amp;#32622;&amp;#20026;&amp;#20102;true.&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*read-eval* false]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;read-string&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;#\&quot;[abc]\&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; #&quot;[abc]&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;解析复杂字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-2-1&quot;&gt;正则表达式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-2-1&quot;&gt;
&lt;p&gt;正则表达式增强了字符串匹配.你可以重复匹配,匹配其中之一,等等等等.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot;&gt;Regex reference&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Groups&lt;/b&gt;:当我们想匹配多余一个子串时,正则表达式的组就起到了作用. 在正则表达式#&quot;(group-1) (group-2)&quot;中, 第0个组为整个匹配表达式.第1个组从最左边的(开始,第2个组从左起第二个(开始,依次类推.你还可以嵌套组.也可以后续通过$0,$1等来引用组.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-3-2-1-1&quot;&gt;匹配
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#31616;&amp;#21333;&amp;#21305;&amp;#37197;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-find&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;\d+&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo 123 bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;123&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#21305;&amp;#37197;&amp;#19981;&amp;#21040;&amp;#26102;&amp;#20250;&amp;#24590;&amp;#26679;?&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-find&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;\d+&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; nil&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23545;&amp;#27599;&amp;#20010;&amp;#32452;&amp;#36820;&amp;#22238;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#28385;&amp;#36275;&amp;#21305;&amp;#37197;&amp;#26465;&amp;#20214;&amp;#30340;&amp;#20869;&amp;#23481;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-matches&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\w+)\s([.0-9]+)%&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley 19.8%&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt;[&quot;@shanley 19.8%&quot; &quot;@shanley&quot; &quot;19.8&quot;]&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36820;&amp;#22238;&amp;#25152;&amp;#26377;&amp;#21305;&amp;#37197;&amp;#30340;&amp;#32452;&amp;#30340;&amp;#32467;&amp;#26524;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-seq&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\w+)\s([.0-9]+)%&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber 12.3%,@shanley 19.8%&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; ([&quot;@davidgraeber 12.3%&quot; &quot;@davidgraeber&quot; &quot;12.3&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;    &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[&quot;@shanley 19.8%&quot; &quot;@shanley&quot; &quot;19.8&quot;])&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-3-2-1-2&quot;&gt;替换&lt;br /&gt;
我们使用str/replace来进行替换. 第一个参数是源字符串,下一个是匹配字符串,最后一个是替换的内容.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;match / replacement can be:
string / string
char / char
pattern / (string or function of match).
&lt;/pre&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22312;&amp;#26367;&amp;#25442;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#20013;,$0,$1&amp;#31561;&amp;#29992;&amp;#26469;&amp;#24341;&amp;#29992;&amp;#21305;&amp;#37197;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#20013;&amp;#30340;&amp;#32452;.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;replace&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber 12.3%,@shanley 19.8%&quot;&lt;/span&gt;
             #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\S+)\s([.0-9]+)%&quot;&lt;/span&gt;
             &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;$2 ($1)&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;12.3 (@davidgraeber),19.8 (@shanley)&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20351;&amp;#29992;&amp;#20989;&amp;#25968;&amp;#26469;&amp;#26367;&amp;#25442;&amp;#23383;&amp;#31526;&amp;#20018;,&amp;#26356;&amp;#28789;&amp;#27963;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;replace&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber 12.3%,@shanley 19.8%&quot;&lt;/span&gt;
               #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\w+)\s([.0-9]+)%,?&quot;&lt;/span&gt;
               &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [[_ person percent]]
                   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [points &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;-&amp;gt;&lt;/span&gt; percent &lt;span style=&quot;color: #cb4b16;&quot;&gt;Float/parseFloat&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 100&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/round&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
                     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; person &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;'s followers grew &quot;&lt;/span&gt; points &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; points.\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @davidgraeber's followers grew 1230 points.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @shanley's followers grew 1980 points.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-2-2&quot;&gt;上下文无关语法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-2-2&quot;&gt;
&lt;p&gt;和正则表达式相比上下文无关语法提供了更具表现力的匹配方式.你能使用例如嵌套来表达想法.&lt;br /&gt;
我们将在JSON语法上使用&lt;a href=&quot;https://github.com/Engelberg/instaparse&quot;&gt;Instapares&lt;/a&gt;.(这个例子没有经过严格的测试也没什么特色.如果想应用到实际开发中,请使用&lt;a href=&quot;https://github.com/clojure/data.json&quot;&gt;data.json&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20320;&amp;#39033;&amp;#30446;&amp;#20013;&amp;#30340;project.clj&amp;#38656;&amp;#35201;&amp;#21253;&amp;#21547;&amp;#22914;&amp;#19979;&amp;#20381;&amp;#36182;(&amp;#20320;&amp;#21487;&amp;#33021;&amp;#38656;&amp;#35201;&amp;#37325;&amp;#21551;JVM)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;:dependencies [[instaparse &quot;1.2.4&quot;]]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;  &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25105;&amp;#20204;&amp;#20551;&amp;#35774;&amp;#20320;&amp;#30340;ns&amp;#23439;&amp;#21253;&amp;#21547;&amp;#20102;&amp;#22914;&amp;#19979;&amp;#20869;&amp;#23481;:&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;(:require [instaparse.core :as insta])&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25110;&amp;#20320;&amp;#22312;REPL&amp;#37324;&amp;#21152;&amp;#36733;&amp;#20102;:&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;(require '[instaparse.core :as insta])&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;barely-tested-json-parser&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;insta/parser
   &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;object     = &amp;lt;'{'&amp;gt; &amp;lt;w*&amp;gt; (members &amp;lt;w*&amp;gt;)* &amp;lt;'}'&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;members&amp;gt;  = pair (&amp;lt;w*&amp;gt; &amp;lt;','&amp;gt; &amp;lt;w*&amp;gt; members)*&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;pair&amp;gt;     = string &amp;lt;w*&amp;gt; &amp;lt;':'&amp;gt; &amp;lt;w*&amp;gt; value&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;value&amp;gt;    = string | number | object | array | 'true' | 'false' | 'null'&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    array      = &amp;lt;'['&amp;gt; elements* &amp;lt;']'&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;elements&amp;gt; = value &amp;lt;w*&amp;gt; (&amp;lt;','&amp;gt; &amp;lt;w*&amp;gt; elements)*&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    number     = int frac? exp?&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;int&amp;gt;      = '-'? digits&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;frac&amp;gt;     = '.' digits&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;exp&amp;gt;      = e digits&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;e&amp;gt;        = ('e' | 'E') (&amp;lt;'+'&amp;gt; | '-')?&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;digits&amp;gt;   = #'[0-9]+'&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    (* First sketched state machine; then it was easier to figure out&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;       regex syntax and all the maddening escape-backslashes. *)&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    string     = &amp;lt;'\\&quot;'&amp;gt; #'([^\&quot;\\]|\\.)*' &amp;lt;'\\&quot;'&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;w&amp;gt;        = #'\s+'&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;barely-tested-json-parser &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;{\&quot;foo\&quot;: {\&quot;bar\&quot;: 99.9e-9, \&quot;quux\&quot;: [1, 2, -3]}}&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [:object&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;     &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:string &quot;foo&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;     &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:object&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:string &quot;bar&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:number &quot;99&quot; &quot;.&quot; &quot;9&quot; &quot;e&quot; &quot;-&quot; &quot;9&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:string &quot;quux&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:array [:number &quot;1&quot;] [:number &quot;2&quot;] [:number &quot;-&quot; &quot;3&quot;]]]]&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#26368;&amp;#21518;&amp;#30340;&amp;#36755;&amp;#20986;&amp;#26377;&amp;#28857;&amp;#21872;&amp;#21990;,&amp;#25105;&amp;#20204;&amp;#25913;&amp;#36827;&amp;#19968;&amp;#19979;.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;barely-tested-json-parser &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;{\&quot;foo\&quot;: {\&quot;bar\&quot;: 99.9e-9, \&quot;quux\&quot;: [1, 2, -3]}}&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;insta/transform {&lt;span style=&quot;color: #2aa198;&quot;&gt;:object&lt;/span&gt; hash-map
                       &lt;span style=&quot;color: #2aa198;&quot;&gt;:string&lt;/span&gt; str
                       &lt;span style=&quot;color: #2aa198;&quot;&gt;:array&lt;/span&gt; vector
                       &lt;span style=&quot;color: #2aa198;&quot;&gt;:number&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comp&lt;/span&gt; edn/read-string str&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; {&quot;foo&quot; {&quot;quux&quot; [1 2 -3], &quot;bar&quot; 9.99E-8}}&lt;/span&gt;


&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25152;&amp;#26377;&amp;#30340;&amp;#20869;&amp;#23481;&amp;#37117;&amp;#22312;&amp;#19978;&amp;#38754;&amp;#20102; &lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;#21491;&amp;#36793;&amp;#30340;&amp;#35821;&amp;#27861;&amp;#20027;&amp;#35201;&amp;#29992;&amp;#26469;&amp;#38544;&amp;#34255;&amp;#22810;&amp;#20313;&amp;#20449;&amp;#24687;.&amp;#27604;&amp;#22914;&amp;#35828;,&amp;#25105;&amp;#20204;&amp;#19981;&amp;#20851;&amp;#24515;&amp;#31354;&amp;#26684;,&amp;#25152;&amp;#20197;&amp;#25105;&amp;#20204;&amp;#36890;&amp;#36807;&amp;#35774;&amp;#32622;&amp;lt;w*&amp;gt;&amp;#26469;&amp;#38544;&amp;#34255;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;#24038;&amp;#36793;&amp;#30340;&amp;#35821;&amp;#27861;&amp;#21482;&amp;#26159;&amp;#29992;&amp;#26469;&amp;#36991;&amp;#20813;&amp;#23884;&amp;#22871;&amp;#36755;&amp;#20986;&amp;#30340;.&amp;#20363;&amp;#22914;,&quot;members&quot;&amp;#20165;&amp;#20165;&amp;#26159;&amp;#19968;&amp;#20010;&amp;#20154;&amp;#20026;&amp;#35774;&amp;#32622;&amp;#30340;&amp;#23454;&amp;#20307;, &lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25152;&amp;#20197;&amp;#25105;&amp;#20204;&amp;#38459;&amp;#27490;&amp;#20102;&amp;#36825;&amp;#20010;&amp;#26080;&amp;#24847;&amp;#20041;&amp;#30340;&amp;#23884;&amp;#22871;&amp;#20851;&amp;#31995;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;构建复杂的字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-1&quot;&gt;重定向&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-1&quot;&gt;
&lt;p&gt;with-out-str提供了一个简单的方法来构建字符串.它重定向标准输出(&lt;b&gt;out&lt;/b&gt;)到StringWriter,然后返回结果字符串.这样你就可以使用print这样的函数来获得字符串(即使在嵌套函数中)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [shrimp-varieties [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;shrimp-kabobs&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;shrimp creole&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;shrimp gumbo&quot;&lt;/span&gt;]]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;with-out-str&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;We have &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;doseq&lt;/span&gt; [name &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;, &quot;&lt;/span&gt; shrimp-varieties&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
      &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; name&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;We have shrimp-kabobs, shrimp creole, shrimp gumbo...&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-2&quot;&gt;格式化字符串&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-2&quot;&gt;
&lt;p&gt;Java里的模板能帮助你方便的构造字符串.&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;%s&amp;#32463;&amp;#24120;&amp;#20250;&amp;#20316;&amp;#20026;print&amp;#30340;&amp;#21442;&amp;#25968;. &amp;#32780;%&amp;#38656;&amp;#35201;&amp;#20351;&amp;#29992;%%&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;%s enjoyed %s%%.&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Mozambique&quot;&lt;/span&gt; 19.8&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;Mozambique enjoyed 19.8%.&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;1$&amp;#21069;&amp;#32512;&amp;#33021;&amp;#24341;&amp;#29992;&amp;#21040;&amp;#20854;&amp;#21518;&amp;#30340;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#21442;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;%1$tY-%1$tm-%1$latex td&quot;&lt;/span&gt; #inst&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2000-01-02T00:00:00&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;2000-01-02&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#21516;&amp;#19978;1$, 2$&amp;#21069;&amp;#32512;&amp;#21487;&amp;#20197;&amp;#24341;&amp;#29992;&amp;#20854;&amp;#21518;&amp;#38754;&amp;#30340;&amp;#21442;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;New year: %2$tY. Old year: %1$tY&quot;&lt;/span&gt;
        #inst&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2000-01-02T00:00:00&quot;&lt;/span&gt;
        #inst&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;3111-12-31T00:00:00&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;New year: 3111. Old year: 2000&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-3&quot;&gt;CL-Format&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-3&quot;&gt;
&lt;p&gt;cl-format是Common Lisp中的一个臭名昭著的功能.例如,你可以从序列来构建字符串(其怪异程度就像使用英文来表示数字,使用两种类型的罗马数字).但对于打印日期和上面的对无序参数的引用方面却又比普通的格式化功能弱.&lt;/p&gt;
&lt;p&gt;
你只需要记住cl-format就是个无人问津的不值一学的语言.但是如果你喜欢并想学习它,那么看&lt;a href=&quot;http://www.gigamonkeys.com/book/a-few-format-recipes.html&quot;&gt;Practical Common Lisp教程&lt;/a&gt;.或者&lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm&quot;&gt;Common Lisp手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;The first param prints to *out* if true. To string if false.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;To a stream if it's a stream.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format true &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;~{~{~a had ~s percentage point~:p.~}~^~%~}&quot;&lt;/span&gt;
              {&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber&quot;&lt;/span&gt; 12.3
               &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt; 19.8
               &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@tjgabbour&quot;&lt;/span&gt; 1}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @davidgraeber had 12.3 percentage points.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @tjgabbour had 1 percentage point.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @shanley had 19.8 percentage points.&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;format-string&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;~{~#[~;~a~;~a and ~a~:;~@{~a~#[~;, and ~:;, ~]~}~]~}&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string []&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;@shanley&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;@shanley and @davidgraeber&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@sarahkendzior&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;@shanley, @davidgraeber, and @sarahkendzior&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;贡献者&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;Tj Gabbour tjg@simplevalue.de, 2013 (original author)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;ul&gt;
&lt;li&gt;本文翻译自&lt;a href=&quot;http://clojure-doc.org/articles/cookbooks/strings.html&quot;&gt;Strings&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;本文内容包括使用Clojure内建的函数和标准库来操作字符串,以及JDK中的相关操作.
&lt;/li&gt;
&lt;li&gt;版权:This work is licensed under a Creative Commons Attribution 3.0 Unported License (including images &amp;amp; stylesheets).
&lt;/li&gt;
&lt;li&gt;源代码在&lt;a href=&quot;https://github.com/clojuredocs/guides&quot;&gt;Github&lt;/a&gt;上.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 预备知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1 基础方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;3.2 解析复杂字符串&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2-1&quot;&gt;3.2.1 正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2-2&quot;&gt;3.2.2 上下文无关语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;3.3 构建复杂的字符串&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-1&quot;&gt;3.3.1 重定向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-2&quot;&gt;3.3.2 格式化字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-3&quot;&gt;3.3.3 CL-Format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 贡献者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;概述&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Clojure中的字符串就是Java字符串.你可以使用Java中的相应方法来对其进行处理.
&lt;/li&gt;
&lt;li&gt;Java字符串是不可变的,所以能很方便的在Clojure中使用
&lt;/li&gt;
&lt;li&gt;你不能给Java字符串添加元数据
&lt;/li&gt;
&lt;li&gt;Clojure提供一些方便的符号
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;&quot;foo&quot;    java.lang.String
#&quot;\d&quot;    java.util.regex.Pattern (正则表达式,匹配一个数字)
\f       java.lang.Character (表示'f')
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;注意&lt;/b&gt;: 人类的大脑和计算机之间还是有很大的差异的.所以Java的字符串(UTF-16编码)并不能像人们所认为的那样很好的和字符一一对应.比如说,一个Unicode的位和我们所认为的字符的一位是无法对应的(像韩国 韩语尊宝,这些词由多个字符组成.)同样的,一个Unicode位可能是由2个UTF-16字符组成.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;预备知识&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;一些例子用到了clojure.string,clojure.edn和clojure.pprint.我们假设你的ns宏里面已经包含了如下内容:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:require&lt;/span&gt; [clojure.string &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; str]
          [clojure.edn &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; edn]
          [clojure.pprint &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; pp]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;或者在REPL里面,你需要载入:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.string &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; str]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.edn &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; edn]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; '[clojure.pprint &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; pp]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;基础方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#38271;&amp;#24230;&amp;#35745;&amp;#31639;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;count&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;      &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 4&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;empty?&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;empty?&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;         &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/blank? &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;    &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#36830;&amp;#25509;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;            &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foobar&quot; &lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;012&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;.&quot;&lt;/span&gt; [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;0.1.2&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20351;&amp;#29992;Java&amp;#26041;&amp;#27861;&amp;#26469;&amp;#21305;&amp;#37197;.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23545;&amp;#20110;&amp;#19979;&amp;#38754;&amp;#30340;&amp;#24773;&amp;#20917;,&amp;#20320;&amp;#24212;&amp;#35813;&amp;#26356;&amp;#21916;&amp;#27426;&amp;#20351;&amp;#29992;&amp;#27491;&amp;#21017;&amp;#34920;&amp;#36798;&amp;#24335;.&amp;#27604;&amp;#22914;,&amp;#20320;&amp;#22312;&amp;#36827;&amp;#34892;&amp;#27979;&amp;#35797;,&amp;#24403;&amp;#22833;&amp;#36133;&amp;#26102;&amp;#38656;&amp;#35201;&amp;#36820;&amp;#22238;-1.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25110;&amp;#32773;&amp;#19968;&amp;#20010;&amp;#23383;&amp;#31526;\o&amp;#38656;&amp;#35201;&amp;#36716;&amp;#25442;&amp;#25104;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#25110;&amp;#25968;&amp;#23383;.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.indexOf&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;oo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;         &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 1&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.indexOf&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;          &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; -1&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.lastIndexOf&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;int&lt;/span&gt; \o&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 2&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#25130;&amp;#21462;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;subs&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt; 1&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;       &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;123&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;subs&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0123&quot;&lt;/span&gt; 1 3&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;     &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;12&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/trim &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;  foo  &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/triml &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;  foo  &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo  &quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/trimr &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;  foo  &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;  foo&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20999;&amp;#20998;&amp;#23383;&amp;#31526;&amp;#20018;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;seq&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                       &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; (\f \o \o)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo/bar/quux&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [&quot;foo&quot; &quot;bar&quot; &quot;quux&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo/bar/quux&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;/&quot;&lt;/span&gt; 2&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [&quot;foo&quot; &quot;bar/quux&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/split-lines &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                             &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [&quot;foo&quot; &quot;bar&quot;]&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22823;&amp;#23567;&amp;#20889;&amp;#36716;&amp;#25442;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/lower-case &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;fOo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/upper-case &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;fOo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;FOO&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/capitalize &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;fOo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;Foo&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36716;&amp;#25442; &lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/escape &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo|bar|quux&quot;&lt;/span&gt; {\| &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;||&quot;&lt;/span&gt;}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;foo||bar||quux&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#33719;&amp;#24471;&amp;#32473;&amp;#23450;&amp;#32534;&amp;#30721;&amp;#30340;&amp;#23383;&amp;#33410;&amp;#25968;&amp;#32452;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;(&amp;#36755;&amp;#20986;&amp;#21487;&amp;#33021;&amp;#21644;&amp;#19979;&amp;#38754;&amp;#30340;&quot;3c3660&quot;&amp;#19981;&amp;#21516;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;.getBytes&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; #&amp;lt;byte[] [B@3c3660&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35299;&amp;#26512;&amp;#20026;keyword&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;keyword&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;    &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; :foo&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35299;&amp;#26512;&amp;#20026;&amp;#25968;&amp;#23383;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;bigint&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;20000000000000000000000000000&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 20000000000000000000000000000N&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;bigdec&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;20000000000000000000.00000000&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 20000000000000000000.00000000M&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Integer/parseInt&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #cb4b16;&quot;&gt;Float/parseFloat&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;                   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 2.0&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35299;&amp;#26512;&amp;#20026;edn,&amp;#23427;&amp;#26159;Clojure&amp;#24418;&amp;#24335;&amp;#30340;&amp;#19968;&amp;#20010;&amp;#23376;&amp;#38598;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;edn/read-string &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;0xffff&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; 65535&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#35835;&amp;#21462;Clojure&amp;#24418;&amp;#24335;&amp;#30340;&amp;#26041;&amp;#27861;.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23433;&amp;#20840;&amp;#35686;&amp;#21578;:&amp;#24403;&amp;#20320;&amp;#26080;&amp;#27861;&amp;#30830;&amp;#20445;&amp;#20320;&amp;#33021;100%&amp;#20449;&amp;#20219;&amp;#35201;&amp;#22788;&amp;#29702;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#26102;,&amp;#35831;&amp;#23558;*read-eval*&amp;#32622;&amp;#20026;false.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20174;Clojure1.5&amp;#24320;&amp;#22987;*read-eval*&amp;#40664;&amp;#35748;&amp;#20026;false,&amp;#20294;&amp;#20026;&amp;#20102;&amp;#23433;&amp;#20840;&amp;#36215;&amp;#35265;,&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22312;&amp;#22788;&amp;#29702;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#26102;&amp;#36824;&amp;#26159;&amp;#20808;&amp;#25163;&amp;#21160;&amp;#32622;&amp;#19968;&amp;#19979;false&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22240;&amp;#20026;&amp;#21487;&amp;#33021;&amp;#26377;&amp;#25805;&amp;#20316;&amp;#23558;&amp;#20854;&amp;#32622;&amp;#20026;&amp;#20102;true.&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;binding&lt;/span&gt; [*read-eval* false]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;read-string&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;#\&quot;[abc]\&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; #&quot;[abc]&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;解析复杂字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-2-1&quot;&gt;正则表达式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-2-1&quot;&gt;
&lt;p&gt;正则表达式增强了字符串匹配.你可以重复匹配,匹配其中之一,等等等等.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot;&gt;Regex reference&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Groups&lt;/b&gt;:当我们想匹配多余一个子串时,正则表达式的组就起到了作用. 在正则表达式#&quot;(group-1) (group-2)&quot;中, 第0个组为整个匹配表达式.第1个组从最左边的(开始,第2个组从左起第二个(开始,依次类推.你还可以嵌套组.也可以后续通过$0,$1等来引用组.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-3-2-1-1&quot;&gt;匹配
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#31616;&amp;#21333;&amp;#21305;&amp;#37197;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-find&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;\d+&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foo 123 bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;123&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#21305;&amp;#37197;&amp;#19981;&amp;#21040;&amp;#26102;&amp;#20250;&amp;#24590;&amp;#26679;?&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-find&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;\d+&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; nil&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#23545;&amp;#27599;&amp;#20010;&amp;#32452;&amp;#36820;&amp;#22238;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#28385;&amp;#36275;&amp;#21305;&amp;#37197;&amp;#26465;&amp;#20214;&amp;#30340;&amp;#20869;&amp;#23481;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-matches&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\w+)\s([.0-9]+)%&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley 19.8%&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt;[&quot;@shanley 19.8%&quot; &quot;@shanley&quot; &quot;19.8&quot;]&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36820;&amp;#22238;&amp;#25152;&amp;#26377;&amp;#21305;&amp;#37197;&amp;#30340;&amp;#32452;&amp;#30340;&amp;#32467;&amp;#26524;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;re-seq&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\w+)\s([.0-9]+)%&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber 12.3%,@shanley 19.8%&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; ([&quot;@davidgraeber 12.3%&quot; &quot;@davidgraeber&quot; &quot;12.3&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;    &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[&quot;@shanley 19.8%&quot; &quot;@shanley&quot; &quot;19.8&quot;])&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-3-2-1-2&quot;&gt;替换&lt;br /&gt;
我们使用str/replace来进行替换. 第一个参数是源字符串,下一个是匹配字符串,最后一个是替换的内容.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;match / replacement can be:
string / string
char / char
pattern / (string or function of match).
&lt;/pre&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#22312;&amp;#26367;&amp;#25442;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#20013;,$0,$1&amp;#31561;&amp;#29992;&amp;#26469;&amp;#24341;&amp;#29992;&amp;#21305;&amp;#37197;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#20013;&amp;#30340;&amp;#32452;.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;replace&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber 12.3%,@shanley 19.8%&quot;&lt;/span&gt;
             #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\S+)\s([.0-9]+)%&quot;&lt;/span&gt;
             &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;$2 ($1)&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;12.3 (@davidgraeber),19.8 (@shanley)&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20351;&amp;#29992;&amp;#20989;&amp;#25968;&amp;#26469;&amp;#26367;&amp;#25442;&amp;#23383;&amp;#31526;&amp;#20018;,&amp;#26356;&amp;#28789;&amp;#27963;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;replace&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber 12.3%,@shanley 19.8%&quot;&lt;/span&gt;
               #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;(@\w+)\s([.0-9]+)%,?&quot;&lt;/span&gt;
               &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [[_ person percent]]
                   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [points &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;-&amp;gt;&lt;/span&gt; percent &lt;span style=&quot;color: #cb4b16;&quot;&gt;Float/parseFloat&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;*&lt;/span&gt; 100&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;Math/round&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
                     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;str&lt;/span&gt; person &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;'s followers grew &quot;&lt;/span&gt; points &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; points.\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @davidgraeber's followers grew 1230 points.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @shanley's followers grew 1980 points.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-2-2&quot;&gt;上下文无关语法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-2-2&quot;&gt;
&lt;p&gt;和正则表达式相比上下文无关语法提供了更具表现力的匹配方式.你能使用例如嵌套来表达想法.&lt;br /&gt;
我们将在JSON语法上使用&lt;a href=&quot;https://github.com/Engelberg/instaparse&quot;&gt;Instapares&lt;/a&gt;.(这个例子没有经过严格的测试也没什么特色.如果想应用到实际开发中,请使用&lt;a href=&quot;https://github.com/clojure/data.json&quot;&gt;data.json&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20320;&amp;#39033;&amp;#30446;&amp;#20013;&amp;#30340;project.clj&amp;#38656;&amp;#35201;&amp;#21253;&amp;#21547;&amp;#22914;&amp;#19979;&amp;#20381;&amp;#36182;(&amp;#20320;&amp;#21487;&amp;#33021;&amp;#38656;&amp;#35201;&amp;#37325;&amp;#21551;JVM)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;:dependencies [[instaparse &quot;1.2.4&quot;]]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;  &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25105;&amp;#20204;&amp;#20551;&amp;#35774;&amp;#20320;&amp;#30340;ns&amp;#23439;&amp;#21253;&amp;#21547;&amp;#20102;&amp;#22914;&amp;#19979;&amp;#20869;&amp;#23481;:&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;(:require [instaparse.core :as insta])&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25110;&amp;#20320;&amp;#22312;REPL&amp;#37324;&amp;#21152;&amp;#36733;&amp;#20102;:&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;(require '[instaparse.core :as insta])&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;barely-tested-json-parser&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;insta/parser
   &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;object     = &amp;lt;'{'&amp;gt; &amp;lt;w*&amp;gt; (members &amp;lt;w*&amp;gt;)* &amp;lt;'}'&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;members&amp;gt;  = pair (&amp;lt;w*&amp;gt; &amp;lt;','&amp;gt; &amp;lt;w*&amp;gt; members)*&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;pair&amp;gt;     = string &amp;lt;w*&amp;gt; &amp;lt;':'&amp;gt; &amp;lt;w*&amp;gt; value&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;value&amp;gt;    = string | number | object | array | 'true' | 'false' | 'null'&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    array      = &amp;lt;'['&amp;gt; elements* &amp;lt;']'&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;elements&amp;gt; = value &amp;lt;w*&amp;gt; (&amp;lt;','&amp;gt; &amp;lt;w*&amp;gt; elements)*&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    number     = int frac? exp?&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;int&amp;gt;      = '-'? digits&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;frac&amp;gt;     = '.' digits&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;exp&amp;gt;      = e digits&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;e&amp;gt;        = ('e' | 'E') (&amp;lt;'+'&amp;gt; | '-')?&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;digits&amp;gt;   = #'[0-9]+'&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    (* First sketched state machine; then it was easier to figure out&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;       regex syntax and all the maddening escape-backslashes. *)&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    string     = &amp;lt;'\\&quot;'&amp;gt; #'([^\&quot;\\]|\\.)*' &amp;lt;'\\&quot;'&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #2aa198;&quot;&gt;    &amp;lt;w&amp;gt;        = #'\s+'&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;barely-tested-json-parser &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;{\&quot;foo\&quot;: {\&quot;bar\&quot;: 99.9e-9, \&quot;quux\&quot;: [1, 2, -3]}}&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; [:object&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;     &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:string &quot;foo&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;     &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:object&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:string &quot;bar&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:number &quot;99&quot; &quot;.&quot; &quot;9&quot; &quot;e&quot; &quot;-&quot; &quot;9&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:string &quot;quux&quot;]&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;       &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;[:array [:number &quot;1&quot;] [:number &quot;2&quot;] [:number &quot;-&quot; &quot;3&quot;]]]]&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#26368;&amp;#21518;&amp;#30340;&amp;#36755;&amp;#20986;&amp;#26377;&amp;#28857;&amp;#21872;&amp;#21990;,&amp;#25105;&amp;#20204;&amp;#25913;&amp;#36827;&amp;#19968;&amp;#19979;.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;barely-tested-json-parser &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;{\&quot;foo\&quot;: {\&quot;bar\&quot;: 99.9e-9, \&quot;quux\&quot;: [1, 2, -3]}}&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
     &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;insta/transform {&lt;span style=&quot;color: #2aa198;&quot;&gt;:object&lt;/span&gt; hash-map
                       &lt;span style=&quot;color: #2aa198;&quot;&gt;:string&lt;/span&gt; str
                       &lt;span style=&quot;color: #2aa198;&quot;&gt;:array&lt;/span&gt; vector
                       &lt;span style=&quot;color: #2aa198;&quot;&gt;:number&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comp&lt;/span&gt; edn/read-string str&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; {&quot;foo&quot; {&quot;quux&quot; [1 2 -3], &quot;bar&quot; 9.99E-8}}&lt;/span&gt;


&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25152;&amp;#26377;&amp;#30340;&amp;#20869;&amp;#23481;&amp;#37117;&amp;#22312;&amp;#19978;&amp;#38754;&amp;#20102; &lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;#21491;&amp;#36793;&amp;#30340;&amp;#35821;&amp;#27861;&amp;#20027;&amp;#35201;&amp;#29992;&amp;#26469;&amp;#38544;&amp;#34255;&amp;#22810;&amp;#20313;&amp;#20449;&amp;#24687;.&amp;#27604;&amp;#22914;&amp;#35828;,&amp;#25105;&amp;#20204;&amp;#19981;&amp;#20851;&amp;#24515;&amp;#31354;&amp;#26684;,&amp;#25152;&amp;#20197;&amp;#25105;&amp;#20204;&amp;#36890;&amp;#36807;&amp;#35774;&amp;#32622;&amp;lt;w*&amp;gt;&amp;#26469;&amp;#38544;&amp;#34255;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;;&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;#24038;&amp;#36793;&amp;#30340;&amp;#35821;&amp;#27861;&amp;#21482;&amp;#26159;&amp;#29992;&amp;#26469;&amp;#36991;&amp;#20813;&amp;#23884;&amp;#22871;&amp;#36755;&amp;#20986;&amp;#30340;.&amp;#20363;&amp;#22914;,&quot;members&quot;&amp;#20165;&amp;#20165;&amp;#26159;&amp;#19968;&amp;#20010;&amp;#20154;&amp;#20026;&amp;#35774;&amp;#32622;&amp;#30340;&amp;#23454;&amp;#20307;, &lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#25152;&amp;#20197;&amp;#25105;&amp;#20204;&amp;#38459;&amp;#27490;&amp;#20102;&amp;#36825;&amp;#20010;&amp;#26080;&amp;#24847;&amp;#20041;&amp;#30340;&amp;#23884;&amp;#22871;&amp;#20851;&amp;#31995;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;构建复杂的字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-1&quot;&gt;重定向&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-1&quot;&gt;
&lt;p&gt;with-out-str提供了一个简单的方法来构建字符串.它重定向标准输出(&lt;b&gt;out&lt;/b&gt;)到StringWriter,然后返回结果字符串.这样你就可以使用print这样的函数来获得字符串(即使在嵌套函数中)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [shrimp-varieties [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;shrimp-kabobs&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;shrimp creole&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;shrimp gumbo&quot;&lt;/span&gt;]]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;with-out-str&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;We have &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;doseq&lt;/span&gt; [name &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;str/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;, &quot;&lt;/span&gt; shrimp-varieties&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
      &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; name&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;We have shrimp-kabobs, shrimp creole, shrimp gumbo...&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-2&quot;&gt;格式化字符串&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-2&quot;&gt;
&lt;p&gt;Java里的模板能帮助你方便的构造字符串.&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;%s&amp;#32463;&amp;#24120;&amp;#20250;&amp;#20316;&amp;#20026;print&amp;#30340;&amp;#21442;&amp;#25968;. &amp;#32780;%&amp;#38656;&amp;#35201;&amp;#20351;&amp;#29992;%%&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;%s enjoyed %s%%.&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Mozambique&quot;&lt;/span&gt; 19.8&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;Mozambique enjoyed 19.8%.&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;1$&amp;#21069;&amp;#32512;&amp;#33021;&amp;#24341;&amp;#29992;&amp;#21040;&amp;#20854;&amp;#21518;&amp;#30340;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#21442;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;%1$tY-%1$tm-%1$latex td&quot;&lt;/span&gt; #inst&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2000-01-02T00:00:00&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;2000-01-02&quot;&lt;/span&gt;

&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#21516;&amp;#19978;1$, 2$&amp;#21069;&amp;#32512;&amp;#21487;&amp;#20197;&amp;#24341;&amp;#29992;&amp;#20854;&amp;#21518;&amp;#38754;&amp;#30340;&amp;#21442;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;New year: %2$tY. Old year: %1$tY&quot;&lt;/span&gt;
        #inst&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;2000-01-02T00:00:00&quot;&lt;/span&gt;
        #inst&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;3111-12-31T00:00:00&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;New year: 3111. Old year: 2000&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-3&quot;&gt;CL-Format&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-3&quot;&gt;
&lt;p&gt;cl-format是Common Lisp中的一个臭名昭著的功能.例如,你可以从序列来构建字符串(其怪异程度就像使用英文来表示数字,使用两种类型的罗马数字).但对于打印日期和上面的对无序参数的引用方面却又比普通的格式化功能弱.&lt;/p&gt;
&lt;p&gt;
你只需要记住cl-format就是个无人问津的不值一学的语言.但是如果你喜欢并想学习它,那么看&lt;a href=&quot;http://www.gigamonkeys.com/book/a-few-format-recipes.html&quot;&gt;Practical Common Lisp教程&lt;/a&gt;.或者&lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm&quot;&gt;Common Lisp手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;The first param prints to *out* if true. To string if false.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;To a stream if it's a stream.&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format true &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;~{~{~a had ~s percentage point~:p.~}~^~%~}&quot;&lt;/span&gt;
              {&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber&quot;&lt;/span&gt; 12.3
               &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt; 19.8
               &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@tjgabbour&quot;&lt;/span&gt; 1}&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @davidgraeber had 12.3 percentage points.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @tjgabbour had 1 percentage point.&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;print=&amp;gt; @shanley had 19.8 percentage points.&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;format-string&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;~{~#[~;~a~;~a and ~a~:;~@{~a~#[~;, and ~:;, ~]~}~]~}&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string []&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;@shanley&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;@shanley and @davidgraeber&quot;&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;pp/cl-format nil format-string [&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@shanley&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@davidgraeber&quot;&lt;/span&gt;, &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;@sarahkendzior&quot;&lt;/span&gt;]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;=&amp;gt; &quot;@shanley, @davidgraeber, and @sarahkendzior&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;贡献者&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;Tj Gabbour tjg@simplevalue.de, 2013 (original author)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>编程语言发展的编年史</title>
        <link href="http://liyouhai.com/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%25e7%25bc%2596%25e7%25a8%258b%25e8%25af%25ad%25e8%25a8%2580%25e5%258f%2591%25e5%25b1%2595%25e7%259a%2584%25e7%25bc%2596%25e5%25b9%25b4%25e5%258f%25b2.html"/>
        <updated>2014-01-30T01:25:54+08:00</updated>
        <id>http://liyouhai.com//%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80%e5%8f%91%e5%b1%95%e7%9a%84%e7%bc%96%e5%b9%b4%e5%8f%b2</id>
        <content type="html">&lt;h4 style=&quot;box-sizing: border-box; color: rgb(17, 17, 17); font-family: Georgia, ‘vardana’, Times, serif; line-height: 21.983333587646484px; margin: 0px 0px 1.571em; padding: 10px 10px 10px 45px; font-size: 18px; background-color: rgb(227, 240, 242); border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; border: 1px solid rgb(102, 204, 204); background-position: 7px 50%; background-repeat: no-repeat no-repeat;&quot;&gt;
	Development of Programming Language By Year :-&lt;br /&gt;
&lt;/h4&gt;
&lt;ul style=&quot;box-sizing: border-box; margin: 0px 0px 2.6rem 4rem; padding-right: 0px; padding-left: 0px; font-family: Verdana, Geneva, sans-serif; font-size: 16px; line-height: 26px;&quot;&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1951 &amp;ndash; Regional Assembly Language
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1952 &amp;ndash; Autocode
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1954 &amp;ndash; IPL (forerunner to LISP)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1955 &amp;ndash; FLOW-MATIC (forerunner to COBOL)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1957 &amp;ndash; FORTRAN (First compiler)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1957 &amp;ndash; COMTRAN (forerunner to COBOL)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1958 &amp;ndash; LISP
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1958 &amp;ndash; ALGOL 58
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1959 &amp;ndash; FACT (forerunner to COBOL)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1959 &amp;ndash; COBOL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1959 &amp;ndash; RPG
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1962 &amp;ndash; APL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1962 &amp;ndash; Simula
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1962 &amp;ndash; SNOBOL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1963 &amp;ndash; CPL (forerunner to C)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1964 &amp;ndash; BASIC
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1964 &amp;ndash; PL/I
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1966 &amp;ndash; JOSS
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1967 &amp;ndash; BCPL (forerunner to C)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1968 &amp;ndash; Logo
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1969 &amp;ndash; B (forerunner to C)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1970 &amp;ndash; Pascal
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1970 &amp;ndash; Forth
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1972 &amp;ndash; C
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1972 &amp;ndash; Smalltalk
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1972 &amp;ndash; Prolog
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1973 &amp;ndash; ML
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1975 &amp;ndash; Scheme
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1978 &amp;ndash; SQL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1980 &amp;ndash; C++ (as C with classes, name changed in July 1983)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1983 &amp;ndash; Ada
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1984 &amp;ndash; Common Lisp
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1984 &amp;ndash; MATLAB
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1985 &amp;ndash; Eiffel
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1986 &amp;ndash; Objective-C
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1986 &amp;ndash; Erlang
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1987 &amp;ndash; Perl
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1988 &amp;ndash; Tcl
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1988 &amp;ndash; Mathematica
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1989 &amp;ndash; FL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1990 &amp;ndash; Haskell
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1991 &amp;ndash; Python
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1991 &amp;ndash; Visual Basic
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1993 &amp;ndash; Ruby
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1993 &amp;ndash; Lua
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1994 &amp;ndash; CLOS (part of ANSI Common Lisp)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; Java
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; Delphi (Object Pascal)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; JavaScript
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; PHP
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1996 &amp;ndash; WebDNA
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1997 &amp;ndash; Rebol
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1999 &amp;ndash; D
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2000 &amp;ndash; ActionScript
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2001 &amp;ndash; C#
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2001 &amp;ndash; Visual Basic .NET
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2002 &amp;ndash; F#
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2003 &amp;ndash; Groovy
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2003 &amp;ndash; Scala
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2007 &amp;ndash; Clojure
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2009 &amp;ndash; Go
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2011 &amp;ndash; Dart
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&amp;nbsp;原文地址:&lt;a href=&quot;http://www.justwebworld.com/history-programming-languages-infographic.html&quot;&gt;http://www.justwebworld.com/history-programming-languages-infographic.html&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;h4 style=&quot;box-sizing: border-box; color: rgb(17, 17, 17); font-family: Georgia, ‘vardana’, Times, serif; line-height: 21.983333587646484px; margin: 0px 0px 1.571em; padding: 10px 10px 10px 45px; font-size: 18px; background-color: rgb(227, 240, 242); border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; border: 1px solid rgb(102, 204, 204); background-position: 7px 50%; background-repeat: no-repeat no-repeat;&quot;&gt;
	Development of Programming Language By Year :-&lt;br /&gt;
&lt;/h4&gt;
&lt;ul style=&quot;box-sizing: border-box; margin: 0px 0px 2.6rem 4rem; padding-right: 0px; padding-left: 0px; font-family: Verdana, Geneva, sans-serif; font-size: 16px; line-height: 26px;&quot;&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1951 &amp;ndash; Regional Assembly Language
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1952 &amp;ndash; Autocode
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1954 &amp;ndash; IPL (forerunner to LISP)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1955 &amp;ndash; FLOW-MATIC (forerunner to COBOL)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1957 &amp;ndash; FORTRAN (First compiler)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1957 &amp;ndash; COMTRAN (forerunner to COBOL)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1958 &amp;ndash; LISP
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1958 &amp;ndash; ALGOL 58
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1959 &amp;ndash; FACT (forerunner to COBOL)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1959 &amp;ndash; COBOL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1959 &amp;ndash; RPG
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1962 &amp;ndash; APL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1962 &amp;ndash; Simula
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1962 &amp;ndash; SNOBOL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1963 &amp;ndash; CPL (forerunner to C)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1964 &amp;ndash; BASIC
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1964 &amp;ndash; PL/I
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1966 &amp;ndash; JOSS
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1967 &amp;ndash; BCPL (forerunner to C)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1968 &amp;ndash; Logo
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1969 &amp;ndash; B (forerunner to C)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1970 &amp;ndash; Pascal
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1970 &amp;ndash; Forth
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1972 &amp;ndash; C
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1972 &amp;ndash; Smalltalk
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1972 &amp;ndash; Prolog
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1973 &amp;ndash; ML
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1975 &amp;ndash; Scheme
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1978 &amp;ndash; SQL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1980 &amp;ndash; C++ (as C with classes, name changed in July 1983)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1983 &amp;ndash; Ada
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1984 &amp;ndash; Common Lisp
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1984 &amp;ndash; MATLAB
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1985 &amp;ndash; Eiffel
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1986 &amp;ndash; Objective-C
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1986 &amp;ndash; Erlang
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1987 &amp;ndash; Perl
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1988 &amp;ndash; Tcl
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1988 &amp;ndash; Mathematica
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1989 &amp;ndash; FL
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1990 &amp;ndash; Haskell
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1991 &amp;ndash; Python
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1991 &amp;ndash; Visual Basic
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1993 &amp;ndash; Ruby
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1993 &amp;ndash; Lua
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1994 &amp;ndash; CLOS (part of ANSI Common Lisp)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; Java
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; Delphi (Object Pascal)
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; JavaScript
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1995 &amp;ndash; PHP
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1996 &amp;ndash; WebDNA
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1997 &amp;ndash; Rebol
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		1999 &amp;ndash; D
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2000 &amp;ndash; ActionScript
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2001 &amp;ndash; C#
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2001 &amp;ndash; Visual Basic .NET
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2002 &amp;ndash; F#
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2003 &amp;ndash; Groovy
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2003 &amp;ndash; Scala
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2007 &amp;ndash; Clojure
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2009 &amp;ndash; Go
	&lt;/li&gt;
&lt;li style=&quot;box-sizing: border-box; list-style-type: disc;&quot;&gt;
		2011 &amp;ndash; Dart
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&amp;nbsp;原文地址:&lt;a href=&quot;http://www.justwebworld.com/history-programming-languages-infographic.html&quot;&gt;http://www.justwebworld.com/history-programming-languages-infographic.html&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure教程-基本语法</title>
        <link href="http://liyouhai.com/clojure/clojure%25e6%2595%2599%25e7%25a8%258b-%25e5%259f%25ba%25e6%259c%25ac%25e8%25af%25ad%25e6%25b3%2595.html"/>
        <updated>2014-01-06T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e6%95%99%e7%a8%8b-%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 核心语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 代码功能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1 读取简繁字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;3.2 进行简繁翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;3.3 读取不需要翻译的文字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-4&quot;&gt;3.4 过滤不翻译的文字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-5&quot;&gt;3.5 提供给Java调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-6&quot;&gt;3.6 打包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 源码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;学习一门语言最好的方法就是去使用它。我们就从一个小例子来学习&lt;br /&gt;
Clojure语法.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;target&quot;&gt;核心语法&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;首先先来看一下Clojure的核心语法。&lt;br /&gt;
Clojure的使用的是Lisp语法,又叫S表达式。核心语法非常的简单。但是对于熟悉c系语法&lt;br /&gt;
(c,c++,java)的朋友来说，第一次接触会非常的不习惯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有代码以&quot;(&quot;开始,&quot;)&quot;结束。即所有的代码都被()包裹
&lt;/li&gt;
&lt;li&gt;&quot;(&quot;后的第一个数据被当作函数或者宏来调用
&lt;/li&gt;
&lt;li&gt;接着的数据被当作参数传递
&lt;/li&gt;
&lt;li&gt;如果想原样返回数据，在&quot;(&quot;前面添加&quot;'&quot;。此写法是(quote (&amp;hellip;))的简写
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前面的hello world程序为例。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
它以&quot;(&quot;开始，后面跟的是函数println，接着空格跟的是参数&quot;Hello World&quot;，最后&quot;)&quot;结尾。&lt;br /&gt;
了解了如上规则，你就基本学会了Clojure的大部分语法。下面比较一下&lt;br /&gt;
Clojure,Java,Python,Ruby的一些语法.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Clojure 表达式&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Java 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Python 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Ruby 语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(not k)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k or !k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(inc a)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a++、++a、a += 1、a + 1&lt;sup&gt;a&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1、a + 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(/ (+ x y) 2)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(instance? java. util.List al)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al instanceof java.util.List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;isinstance(al,list)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al.is&lt;sub&gt;a&lt;/sub&gt;? Array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(if (not a) (inc b) (dec b))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;b + 1 if not a else b-1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(Math/pow 2 10)&lt;sup&gt;c&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Math.pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2 ** 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(.someMethod someObj &quot;foo&quot; (.otherMethod otherObj 0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看出Clojure的语法有高度的一致性，即使你不熟悉S表达式，但是依据上面&lt;br /&gt;
的原则，可以看懂它想表达的是一个什么意思。而对于其他三门语言，如果你没&lt;br /&gt;
有一个个的学习相应的语法，你还是比较难理解它的意思的。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;代码功能&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;了解了核心语法，我们就可以来编写代码了。我们要编写的代码功能很简单，进&lt;br /&gt;
行简繁翻译，其中过滤不需要翻译以及需要特殊翻译的文字。我们将分几步来完成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取简繁字典
&lt;/li&gt;
&lt;li&gt;进行简繁翻译
&lt;/li&gt;
&lt;li&gt;读取不需要翻译的文字
&lt;/li&gt;
&lt;li&gt;过滤不翻译的文字
&lt;/li&gt;
&lt;li&gt;提供给Java调用
&lt;/li&gt;
&lt;li&gt;打包
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;读取简繁字典&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;语法点
&lt;ul&gt;
&lt;li&gt;查看Clojure API
&lt;/li&gt;
&lt;li&gt;第一个函数的编写
&lt;/li&gt;
&lt;li&gt;Namespace的引入
&lt;/li&gt;
&lt;li&gt;正则表达式
&lt;/li&gt;
&lt;li&gt;Clojure字面量
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
我们先看第一个功能。我们要读取简繁字典。简繁字典其实就是简繁对照的文件，&lt;br /&gt;
我这里叫jfmap.clj&lt;br /&gt;
格式如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;万 萬 与 與 丑 醜 专 專 业 業 丛 叢 东 東 丝 絲 丢 丟 两 兩 严 嚴 丧 喪 个 個 丬 爿 
&lt;/pre&gt;
&lt;p&gt;
这里只是简单的列了一点。具体内容请见附件。有了这个文件，我们如何把内容&lt;br /&gt;
读出来呢？熟悉Java的都知道，我们要创建文件流来读取，然后要打开流，循环&lt;br /&gt;
读取，最后关闭流，还要抓异常。很繁琐。在Clojure中如何处理呢？Clojure提&lt;br /&gt;
供了slurp函数，可以根据提供的路径将文件内容读入。API如下:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/slurp
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f &amp;amp; opts]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Opens&lt;/span&gt; a reader on f and reads all its contents, returning a string.
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;See&lt;/span&gt; clojure.java.io/reader for a complete list of supported arguments.
&lt;/pre&gt;
&lt;p&gt;
OK。我们知道了要用什么函数。那么根据API和上面说的总规则，我们来写代码.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是&quot;(&quot;
&lt;/li&gt;
&lt;li&gt;然后是函数名slurp
&lt;/li&gt;
&lt;li&gt;空格，参数。这里是要读取的文件路径
&lt;/li&gt;
&lt;li&gt;最后&quot;)&quot;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可以在REPL里面去实验这行代码的执行结果。执行此行代码，clojure会将jfmap.clj的内容以字符串的形式全部读&lt;br /&gt;
入。接着呢？要做简繁翻译，字符串肯定不方便我们的操作。很明显map才是最&lt;br /&gt;
适合的数据结构。那么我们如何将字符串变成map呢？&lt;br /&gt;
我们只能求助于API了，你可以在&lt;a href=&quot;http://clojure.github.io/clojure/api-index.html&quot;&gt;Clojure的Index页面&lt;/a&gt;搜索map,可以找到&lt;br /&gt;
hash-map函数。它的API说明如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;hash-map
function
Usage: (hash-map)
       (hash-map &amp;amp; keyvals)
keyval =&amp;gt; key val
Returns a new hash map with supplied mappings.  If any keys are
equal, they are handled as if by repeated uses of assoc.
&lt;/pre&gt;
&lt;p&gt;
根据提供的映射关系返回一个新的hashmap。而这里我们是一个字符串，如何提&lt;br /&gt;
供映射关系呢？按照空格将文字切开就行了嘛！！继续找API。Java里有split方&lt;br /&gt;
法，Clojure里有没有相应的函数呢？试试再说。。有了！在&lt;br /&gt;
clojure.string的Namespace&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;中，我们找到了叫split的函数！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;split
function
Usage: (split s re)
       (split s re limit)
Splits string on a regular expression.  Optional argument limit is
the maximum number of splits. Not lazy. Returns vector of the splits.
&lt;/pre&gt;
&lt;p&gt;
通过正则表达式来切割字符串。看着挺像，先用再说！我们有repl嘛！直接在&lt;br /&gt;
repl里面输入&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
执行!Oops,报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;CompilerException java.lang.RuntimeException: Unable to resolve symbol: split in this context
&lt;/pre&gt;
&lt;p&gt;
找不到split?!如果在Java中报类似的错误，你会想到什么？没有引入包阿！这&lt;br /&gt;
里也是。在Java中会默认引入java.lang包，同理在Clojure中会引入&lt;br /&gt;
clojure.core和java.lang包。其他包则要自己引入，这里split在clojure.string包中。所&lt;br /&gt;
以你需要引入clojure.string包。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; 'clojure.string&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这也就是调用了require函数来进行引入！为什么clojure.string前面有个单引&lt;br /&gt;
号呢？想想核心语法！这里暂不展开说！给大家留个思考题！！后续会专门对命名空间引入做详细介绍！&lt;br /&gt;
光引入还没用！调用代码也需要修改！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clojure.string/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可能要吐槽了！既然引入了，为什么还要加Namespace前缀？！我们可以和Java作个&lt;br /&gt;
比较！如果这里是Java的话，那么我们在调用split的时候，实际上是需要一个&lt;br /&gt;
类作为前缀的，比如StringUtils.split()!但是在clojure中并没有类的概念！&lt;br /&gt;
Namespace下面只有函数，所以它使用命名空间来确保函数的唯一性引用！&lt;br /&gt;
当然了每次都要写这么长的命名空间的名字也是挺烦人的。Clojure提供了简写.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; ['clojure.stirng &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; 'cstr]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
:as是Keyword,是Clojure字面量的一种。它和String很类似，不过有些区别，它比String有更多的功能。&lt;br /&gt;
下表是Clojure所包含的字面量。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Type&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Example(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Boolean&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;true,false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Character&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Keyword&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;:tag,:doc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(1 2 3),(println &quot;foo&quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Map&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;{:name &quot;Bill&quot;,:age 42}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Nil&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Number&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;1,4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Set&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;#{:snap :crackle :pop}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;String&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;hello&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Symbol&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;user/foo,java.lang.String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Vector&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[1 2 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
ok.终于得到了我们要的结果。这里的#&quot; &quot;是正则表达式(这是你遇到的第一个特殊语&lt;br /&gt;
法，学习方法&amp;mdash;死记！！)，它构建了Java中的Pattern，所以正则表达式内容&lt;br /&gt;
和Java完全相同，这里就不废话了。你只需要记住其语法就行了。&lt;br /&gt;
切开了字符串，我们来生成map吧！如何生成呢？你应该有答案了吧？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
又报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;IllegalArgumentException No value supplied for key: [&quot;万&quot; &quot;萬&quot;]  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)
&lt;/pre&gt;
&lt;p&gt;
不合法的参数！！split得到的是个Vector([]包裹的数据结构是Vector),而&lt;br /&gt;
hash-map要的参数类似于Java中的可变参数！如何匹配这两者呢？Clojure中提&lt;br /&gt;
供了apply函数!API如下&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/apply
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f args] [f x args] [f x y args] [f x y z args] [f a b c d &amp;amp; args]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Applies&lt;/span&gt; fn f to the argument list formed by prepending intervening arguments to args.
&lt;/pre&gt;
&lt;p&gt;
此函数有点特别！它的第一个参数是函数，后面是该函数所需要的参数！知道&lt;br /&gt;
怎么调用吗？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
终于成功了！！我们看到了结果&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975;&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#33836;&quot;&lt;/span&gt;}   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20197;{}&amp;#21253;&amp;#35065;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#32467;&amp;#26500;&amp;#26159;map&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
最后呢！我们需要对jfmap.clj的内容进行处理！So easy!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;进行简繁翻译&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ul&gt;
&lt;li&gt;语法点
&lt;ul&gt;
&lt;li&gt;var的定义
&lt;/li&gt;
&lt;li&gt;函数的定义
&lt;/li&gt;
&lt;li&gt;闭包的使用
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
上一节我们完成了对jfmap.clj的读取，并生成了hashmap。但是呢，如果我们&lt;br /&gt;
每次要使用jfmap.clj的时候都要写&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
太麻烦了。在Java中的可以将其封装为一个方法来进行调用。Clojure也可以将&lt;br /&gt;
其封装为函数:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;read-map&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Read trans map from file&quot;&lt;/span&gt;
  [path]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; path&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
defn是个宏，宏的定义后面讨论。defn是用来定义有名函数的。read-map就是函&lt;br /&gt;
数名，和Java中的驼峰式取名不同，List系的取名方式一般是使用-。给出的原&lt;br /&gt;
因是大写字母要按两个按键，-只需要按一个按键！！紧接着函数名的是注释，&lt;br /&gt;
类似Java中的注释，不同的是其双引号内的内容可以多行。后面的vector是参数&lt;br /&gt;
列表，最后就是函数体了。&lt;br /&gt;
现在当你再读取jfmap的时候。只需要这样调用:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;read-map &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
比刚才简单了很多。但是每次都要去读取，还是不够方便。在Java中会将其赋值&lt;br /&gt;
给一个变量，然后去调用。Clojure当然也可以。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;jfmap&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;read-map &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
然后你直接操作jfmap就可以了。&lt;br /&gt;
现在我们就来按照jfmap来进行简繁翻译吧！&lt;br /&gt;
你可能会想，很简单吧？只需要遍历需要翻译的字符串，然后到jfmap中去找对应的翻译，然&lt;br /&gt;
后将翻译组装成字符串就行了。so easy!但当你这么想的时候，你已经陷入到了&lt;br /&gt;
实现的细节中了！Clojure让你能够更加的关注业务而不是实现细节！&lt;br /&gt;
这里给出的建议是：&lt;br /&gt;
&lt;b&gt;请先查找Clojure是否可通过函数组合来解决问题？如果不能再考虑自己编写函 数！&lt;/b&gt;&lt;br /&gt;
为什么这么说呢？因为在Clojure中大部分的问题都可以通过其提供的函数组合&lt;br /&gt;
来解决。你需要做的就是根据需要来组合函数！这使你能更多的思考业务而非实&lt;br /&gt;
现细节！比如这里的问题！&lt;br /&gt;
我们需要一个函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接受一个字符串
&lt;/li&gt;
&lt;li&gt;返回翻译完成的字符串
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很简单，我们先编写函数的定义。这里我们叫translate。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
然后呢？需要翻译字符串。这里叫翻译字符串，实际上就是根据map的key找到&lt;br /&gt;
value而已。在Clojure中找到这样的函数就可以了。你可以找到get函数。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; map k default&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
很好理解吧？根据k从map中查找value，如果找不到则返回default。其实这就是&lt;br /&gt;
核心代码了！我们知道map就是我们这里的jfmap，k实际上是获取的字符串的每&lt;br /&gt;
个字符，而default呢？这里如果我们根据k找不到的话，就直接返回k，也就是&lt;br /&gt;
不翻译了。所以代码修改为:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
现在只需要解决k就行了！继续寻找函数！现在需要的是在Clojure中用得还比较&lt;br /&gt;
多的一个函数&amp;mdash;map!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/map
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 &amp;amp; colls]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Returns&lt;/span&gt; a lazy sequence consisting of the result of applying f to the
  set of first items of each coll, followed by applying f to the set
  of second items in each coll, until any one of the colls is
  exhausted.  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Any&lt;/span&gt; remaining items in other colls are ignored. &lt;span style=&quot;color: #cb4b16;&quot;&gt;Function&lt;/span&gt;
  f should accept number-of-colls arguments.
&lt;/pre&gt;
&lt;p&gt;
看到作用了吗？将函数应用到序列的每个元素上去！并返回一个由结果组成的&lt;br /&gt;
lazy序列！你可能会问了：这是针对序列的，对字符串有效吗？试试不就知道了？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; class &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
在repl里面输入如上的代码！你看到了什么？java.lang.Character?!没错，字&lt;br /&gt;
符串会被当作字符序列来操作！但是我们需要的是字符串啊？没关系，我们有&lt;br /&gt;
str函数!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comp&lt;/span&gt; class str&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
comp是个什么东东？它的作用是将多个函数组合起来，从右向左的执行！！这里&lt;br /&gt;
就是先执行str在执行class,可以看到结果打印的是java.lang.String,正是我们&lt;br /&gt;
需要的。&lt;br /&gt;
OK，现在我们来组合这两个函数就行了.但是问题又来了！map的第二个参数是个函数，&lt;br /&gt;
我们怎么办呢？既然它需要函数，那我们就定义一个给它咯！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tmp&lt;/span&gt; [k]
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; tmp s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可能要抱怨了！取了个什么烂名字！！居然叫tmp?!呵呵，别急！我把函数定&lt;br /&gt;
义为tmp，是因为我要将优化掉！可以看出，这个功能非常的简单，而且只会给&lt;br /&gt;
translate使用，那么我们需要特意定义一个单独的函数吗？&lt;br /&gt;
不需要吧？我们直接将两个函数合并好了！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tmp&lt;/span&gt; [k] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
很简单，但是呢！既然都放到函数内部了！还需要函数名吗？就像Java中的匿名&lt;br /&gt;
内部类一样，直接定义直接使用，不需要名字！在Clojure中有fn这个special&lt;br /&gt;
form来定义匿名函数！&lt;br /&gt;
上面说defn是个宏！它的功能就类似于(还有其他功能，比如注释)：&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tmp&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [k] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们使用fn来简化一下代码!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [k] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
舒服很多！还能更简单吗？当然！Clojure提供了#这个语法糖来定义匿名函数!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
好！问题来了！这里没有了参数列表！那get函数怎么知道k是个什么东西呢？所&lt;br /&gt;
以，这里使用%来替换，第一个参数用%或者%1替换，第二个则是%2,依次类推！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap % %&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
搞定了吗？没有！translate需要返回一个字符串，而map返回的是个lazy序列！&lt;br /&gt;
需要将序列转化为字符串！到clojure.string找找！有个join函数&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clstr/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap % %&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
不废话了！记得要引入Namespace哦！！&lt;br /&gt;
实际上一行代码我们就搞定了基本的翻译了！很简单吧？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;读取不需要翻译的文字&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;ul&gt;
&lt;li&gt;复习
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻译的字，是使用的map来存储的？那不需要翻译的文字该如何存储呢？这要看&lt;br /&gt;
你如何处理了！我这里采用的是一个很简单的方式！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先对文字全文翻译
&lt;/li&gt;
&lt;li&gt;然后对翻译后的文字再反翻译
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如说，&quot;阿里山&quot;直接翻译的话，那么就会变成&quot;阿裡山&quot;，但是&quot;里&quot;字是不需要&lt;br /&gt;
翻译的。那么我就新建一个map，保存&quot;阿裡山&quot;-&amp;gt;&quot;阿里山&quot;，将文字再翻回来！&lt;br /&gt;
那么这里我就再需要一个类似jfmap.clj的文件就可以了。我这里叫ntmap.clj。&lt;br /&gt;
格式和jfmap.clj类似！只不过里面存储的是需要反翻译的文字!&lt;br /&gt;
如何读取和组装map?不需要我废话吧？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;过滤不翻译的文字&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Special Form
&lt;ul&gt;
&lt;li&gt;let
&lt;/li&gt;
&lt;li&gt;loop
&lt;/li&gt;
&lt;li&gt;if
&lt;/li&gt;
&lt;li&gt;recur
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过滤不翻译的文字，实际上就是反翻译!如何进行呢？原来在翻译的过程中我们&lt;br /&gt;
是一个字符一个字符的匹配的！但是这里是一个一个的字符串！这就比较难办了！&lt;br /&gt;
不管怎么说我们先定义函数!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;do-trans&lt;/span&gt;
  [s tmap ntmap]
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
首先第一件事就是去全文翻译！然后获得结果！提供给后续函数使用！Java中有&lt;br /&gt;
局部变量！只需要将变量写在方法里就可以了！但是在Clojure中不同，它需要&lt;br /&gt;
通过let这个Special Form来处理。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;do-trans&lt;/span&gt;
  [s tmap ntmap]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [re &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;translate s tmap&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
let后面是个Vector，用来进行var绑定，这里translate翻译的结果会被绑定到&lt;br /&gt;
re这个var上！而re的作用范围就只在let这个括号内部！接着呢！就是对re进行&lt;br /&gt;
反翻译！没啥现成的函数了！只能自己处理！代码如下！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;do-trans&lt;/span&gt;
  [s tmap ntmap]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [re &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;translate s tmap&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;loop&lt;/span&gt; [result re
           k &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;keys&lt;/span&gt; ntmap&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
      &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;seq&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;recur&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clstr/&lt;span style=&quot;color: #b58900;&quot;&gt;replace&lt;/span&gt; result &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;ntmap &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;rest&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
          result&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
loop又是个Special Form，看起来像循环！实际上它是个递归！loop后面也是&lt;br /&gt;
个参数Vector，功能和let的相同！这里将re绑定到了result，以及ntmap的key&lt;br /&gt;
绑定到了k上！&lt;br /&gt;
然后是if判断，还是个Special Form，(seq k)判断k是否是个序列！如果是则执&lt;br /&gt;
行recur，如果不是则返回result.其实seq并不是判断函数！它是用来构建序列&lt;br /&gt;
的！这里之所以能用来判断，基于两个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Clojure中除了nil和false是假，其他全是真
&lt;/li&gt;
&lt;li&gt;(seq nil)和(seq ())返回nil
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后seq就可以用来作为判断条件了！&lt;br /&gt;
recur是递归调用！这里调用的是loop，传递的参数是替换后的s和剩余的k.&lt;br /&gt;
实际功能就是，遍历ntmap中的key，如果找到了，则使用value替换掉！&lt;br /&gt;
至此，就完成了翻译的所有功能！考虑下如果使用Java需要多少行代码？？&lt;br /&gt;
测试翻译一个页面的时间为70毫秒左右，速度还是不错的！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;提供给Java调用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p&gt;Clojure提供了将函数给Java调用的功能！&lt;br /&gt;
首先，在core.clj文件中编写函数，比如下面的翻译:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;-transAll&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;&amp;#32763;&amp;#35793;&amp;#25152;&amp;#26377;&quot;&lt;/span&gt;
  [source &lt;span style=&quot;color: #cb4b16;&quot;&gt;mapPath&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;trans/translate source &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;trans/read-map &lt;span style=&quot;color: #cb4b16;&quot;&gt;mapPath&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
函数名前面一定要有个&quot;-&quot;。&lt;br /&gt;
然后在命名空间里添加如下代码&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;ns&lt;/span&gt; jft.core
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36825;&amp;#37324;&amp;#24320;&amp;#22987; &lt;/span&gt;
 &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:gen-class&lt;/span&gt;
   &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;jft.core.Trans&lt;/span&gt;
   &lt;span style=&quot;color: #2aa198;&quot;&gt;:methods&lt;/span&gt; [#^{&lt;span style=&quot;color: #2aa198;&quot;&gt;:static&lt;/span&gt; true} [&lt;span style=&quot;color: #cb4b16;&quot;&gt;transAll&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;String&lt;/span&gt;] &lt;span style=&quot;color: #cb4b16;&quot;&gt;String&lt;/span&gt;]]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36825;&amp;#37324;&amp;#32467;&amp;#26463;&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:require&lt;/span&gt; [clojure.string &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; cstr]
            [jft.trans &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; trans]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
应该不难理解吧？name是在Java中import的时候的名字！methods是可以调用的&lt;br /&gt;
方法,这里注解为静态方法！注意这里的transAll前面是没有&quot;-&quot;的，后面是参数&lt;br /&gt;
和返回类型！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot;&gt;打包&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;p&gt;需要给Java调用，那就要先封装为jar包。非常简单&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein jar
&lt;/pre&gt;
&lt;p&gt;
然后就可以提供给Java调用了！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;源码&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2014/01/wpid-jft2.zip&quot;&gt;jft&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;脚注: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Namespace和Java中的包类似，但是在Clojure中叫Namespace。这里没有&lt;br /&gt;
将其翻译为命名空间，主要是怕有误解。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 核心语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 代码功能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1 读取简繁字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;3.2 进行简繁翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;3.3 读取不需要翻译的文字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-4&quot;&gt;3.4 过滤不翻译的文字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-5&quot;&gt;3.5 提供给Java调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-6&quot;&gt;3.6 打包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 源码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;学习一门语言最好的方法就是去使用它。我们就从一个小例子来学习&lt;br /&gt;
Clojure语法.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;target&quot;&gt;核心语法&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;首先先来看一下Clojure的核心语法。&lt;br /&gt;
Clojure的使用的是Lisp语法,又叫S表达式。核心语法非常的简单。但是对于熟悉c系语法&lt;br /&gt;
(c,c++,java)的朋友来说，第一次接触会非常的不习惯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有代码以&quot;(&quot;开始,&quot;)&quot;结束。即所有的代码都被()包裹
&lt;/li&gt;
&lt;li&gt;&quot;(&quot;后的第一个数据被当作函数或者宏来调用
&lt;/li&gt;
&lt;li&gt;接着的数据被当作参数传递
&lt;/li&gt;
&lt;li&gt;如果想原样返回数据，在&quot;(&quot;前面添加&quot;'&quot;。此写法是(quote (&amp;hellip;))的简写
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前面的hello world程序为例。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
它以&quot;(&quot;开始，后面跟的是函数println，接着空格跟的是参数&quot;Hello World&quot;，最后&quot;)&quot;结尾。&lt;br /&gt;
了解了如上规则，你就基本学会了Clojure的大部分语法。下面比较一下&lt;br /&gt;
Clojure,Java,Python,Ruby的一些语法.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Clojure 表达式&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Java 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Python 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Ruby 语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(not k)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k or !k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(inc a)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a++、++a、a += 1、a + 1&lt;sup&gt;a&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1、a + 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(/ (+ x y) 2)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(instance? java. util.List al)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al instanceof java.util.List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;isinstance(al,list)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al.is&lt;sub&gt;a&lt;/sub&gt;? Array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(if (not a) (inc b) (dec b))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;b + 1 if not a else b-1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(Math/pow 2 10)&lt;sup&gt;c&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Math.pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2 ** 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(.someMethod someObj &quot;foo&quot; (.otherMethod otherObj 0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看出Clojure的语法有高度的一致性，即使你不熟悉S表达式，但是依据上面&lt;br /&gt;
的原则，可以看懂它想表达的是一个什么意思。而对于其他三门语言，如果你没&lt;br /&gt;
有一个个的学习相应的语法，你还是比较难理解它的意思的。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;代码功能&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;了解了核心语法，我们就可以来编写代码了。我们要编写的代码功能很简单，进&lt;br /&gt;
行简繁翻译，其中过滤不需要翻译以及需要特殊翻译的文字。我们将分几步来完成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取简繁字典
&lt;/li&gt;
&lt;li&gt;进行简繁翻译
&lt;/li&gt;
&lt;li&gt;读取不需要翻译的文字
&lt;/li&gt;
&lt;li&gt;过滤不翻译的文字
&lt;/li&gt;
&lt;li&gt;提供给Java调用
&lt;/li&gt;
&lt;li&gt;打包
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;读取简繁字典&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;语法点
&lt;ul&gt;
&lt;li&gt;查看Clojure API
&lt;/li&gt;
&lt;li&gt;第一个函数的编写
&lt;/li&gt;
&lt;li&gt;Namespace的引入
&lt;/li&gt;
&lt;li&gt;正则表达式
&lt;/li&gt;
&lt;li&gt;Clojure字面量
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
我们先看第一个功能。我们要读取简繁字典。简繁字典其实就是简繁对照的文件，&lt;br /&gt;
我这里叫jfmap.clj&lt;br /&gt;
格式如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;万 萬 与 與 丑 醜 专 專 业 業 丛 叢 东 東 丝 絲 丢 丟 两 兩 严 嚴 丧 喪 个 個 丬 爿 
&lt;/pre&gt;
&lt;p&gt;
这里只是简单的列了一点。具体内容请见附件。有了这个文件，我们如何把内容&lt;br /&gt;
读出来呢？熟悉Java的都知道，我们要创建文件流来读取，然后要打开流，循环&lt;br /&gt;
读取，最后关闭流，还要抓异常。很繁琐。在Clojure中如何处理呢？Clojure提&lt;br /&gt;
供了slurp函数，可以根据提供的路径将文件内容读入。API如下:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/slurp
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f &amp;amp; opts]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Opens&lt;/span&gt; a reader on f and reads all its contents, returning a string.
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;See&lt;/span&gt; clojure.java.io/reader for a complete list of supported arguments.
&lt;/pre&gt;
&lt;p&gt;
OK。我们知道了要用什么函数。那么根据API和上面说的总规则，我们来写代码.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是&quot;(&quot;
&lt;/li&gt;
&lt;li&gt;然后是函数名slurp
&lt;/li&gt;
&lt;li&gt;空格，参数。这里是要读取的文件路径
&lt;/li&gt;
&lt;li&gt;最后&quot;)&quot;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可以在REPL里面去实验这行代码的执行结果。执行此行代码，clojure会将jfmap.clj的内容以字符串的形式全部读&lt;br /&gt;
入。接着呢？要做简繁翻译，字符串肯定不方便我们的操作。很明显map才是最&lt;br /&gt;
适合的数据结构。那么我们如何将字符串变成map呢？&lt;br /&gt;
我们只能求助于API了，你可以在&lt;a href=&quot;http://clojure.github.io/clojure/api-index.html&quot;&gt;Clojure的Index页面&lt;/a&gt;搜索map,可以找到&lt;br /&gt;
hash-map函数。它的API说明如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;hash-map
function
Usage: (hash-map)
       (hash-map &amp;amp; keyvals)
keyval =&amp;gt; key val
Returns a new hash map with supplied mappings.  If any keys are
equal, they are handled as if by repeated uses of assoc.
&lt;/pre&gt;
&lt;p&gt;
根据提供的映射关系返回一个新的hashmap。而这里我们是一个字符串，如何提&lt;br /&gt;
供映射关系呢？按照空格将文字切开就行了嘛！！继续找API。Java里有split方&lt;br /&gt;
法，Clojure里有没有相应的函数呢？试试再说。。有了！在&lt;br /&gt;
clojure.string的Namespace&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;中，我们找到了叫split的函数！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;split
function
Usage: (split s re)
       (split s re limit)
Splits string on a regular expression.  Optional argument limit is
the maximum number of splits. Not lazy. Returns vector of the splits.
&lt;/pre&gt;
&lt;p&gt;
通过正则表达式来切割字符串。看着挺像，先用再说！我们有repl嘛！直接在&lt;br /&gt;
repl里面输入&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
执行!Oops,报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;CompilerException java.lang.RuntimeException: Unable to resolve symbol: split in this context
&lt;/pre&gt;
&lt;p&gt;
找不到split?!如果在Java中报类似的错误，你会想到什么？没有引入包阿！这&lt;br /&gt;
里也是。在Java中会默认引入java.lang包，同理在Clojure中会引入&lt;br /&gt;
clojure.core和java.lang包。其他包则要自己引入，这里split在clojure.string包中。所&lt;br /&gt;
以你需要引入clojure.string包。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; 'clojure.string&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这也就是调用了require函数来进行引入！为什么clojure.string前面有个单引&lt;br /&gt;
号呢？想想核心语法！这里暂不展开说！给大家留个思考题！！后续会专门对命名空间引入做详细介绍！&lt;br /&gt;
光引入还没用！调用代码也需要修改！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clojure.string/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可能要吐槽了！既然引入了，为什么还要加Namespace前缀？！我们可以和Java作个&lt;br /&gt;
比较！如果这里是Java的话，那么我们在调用split的时候，实际上是需要一个&lt;br /&gt;
类作为前缀的，比如StringUtils.split()!但是在clojure中并没有类的概念！&lt;br /&gt;
Namespace下面只有函数，所以它使用命名空间来确保函数的唯一性引用！&lt;br /&gt;
当然了每次都要写这么长的命名空间的名字也是挺烦人的。Clojure提供了简写.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; ['clojure.stirng &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; 'cstr]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
:as是Keyword,是Clojure字面量的一种。它和String很类似，不过有些区别，它比String有更多的功能。&lt;br /&gt;
下表是Clojure所包含的字面量。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Type&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Example(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Boolean&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;true,false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Character&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Keyword&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;:tag,:doc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(1 2 3),(println &quot;foo&quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Map&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;{:name &quot;Bill&quot;,:age 42}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Nil&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Number&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;1,4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Set&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;#{:snap :crackle :pop}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;String&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;hello&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Symbol&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;user/foo,java.lang.String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Vector&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[1 2 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
ok.终于得到了我们要的结果。这里的#&quot; &quot;是正则表达式(这是你遇到的第一个特殊语&lt;br /&gt;
法，学习方法&amp;mdash;死记！！)，它构建了Java中的Pattern，所以正则表达式内容&lt;br /&gt;
和Java完全相同，这里就不废话了。你只需要记住其语法就行了。&lt;br /&gt;
切开了字符串，我们来生成map吧！如何生成呢？你应该有答案了吧？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
又报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;IllegalArgumentException No value supplied for key: [&quot;万&quot; &quot;萬&quot;]  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)
&lt;/pre&gt;
&lt;p&gt;
不合法的参数！！split得到的是个Vector([]包裹的数据结构是Vector),而&lt;br /&gt;
hash-map要的参数类似于Java中的可变参数！如何匹配这两者呢？Clojure中提&lt;br /&gt;
供了apply函数!API如下&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/apply
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f args] [f x args] [f x y args] [f x y z args] [f a b c d &amp;amp; args]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Applies&lt;/span&gt; fn f to the argument list formed by prepending intervening arguments to args.
&lt;/pre&gt;
&lt;p&gt;
此函数有点特别！它的第一个参数是函数，后面是该函数所需要的参数！知道&lt;br /&gt;
怎么调用吗？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
终于成功了！！我们看到了结果&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975;&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#33836;&quot;&lt;/span&gt;}   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20197;{}&amp;#21253;&amp;#35065;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#32467;&amp;#26500;&amp;#26159;map&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
最后呢！我们需要对jfmap.clj的内容进行处理！So easy!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;进行简繁翻译&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ul&gt;
&lt;li&gt;语法点
&lt;ul&gt;
&lt;li&gt;var的定义
&lt;/li&gt;
&lt;li&gt;函数的定义
&lt;/li&gt;
&lt;li&gt;闭包的使用
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
上一节我们完成了对jfmap.clj的读取，并生成了hashmap。但是呢，如果我们&lt;br /&gt;
每次要使用jfmap.clj的时候都要写&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
太麻烦了。在Java中的可以将其封装为一个方法来进行调用。Clojure也可以将&lt;br /&gt;
其封装为函数:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;read-map&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Read trans map from file&quot;&lt;/span&gt;
  [path]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; path&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
defn是个宏，宏的定义后面讨论。defn是用来定义有名函数的。read-map就是函&lt;br /&gt;
数名，和Java中的驼峰式取名不同，List系的取名方式一般是使用-。给出的原&lt;br /&gt;
因是大写字母要按两个按键，-只需要按一个按键！！紧接着函数名的是注释，&lt;br /&gt;
类似Java中的注释，不同的是其双引号内的内容可以多行。后面的vector是参数&lt;br /&gt;
列表，最后就是函数体了。&lt;br /&gt;
现在当你再读取jfmap的时候。只需要这样调用:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;read-map &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
比刚才简单了很多。但是每次都要去读取，还是不够方便。在Java中会将其赋值&lt;br /&gt;
给一个变量，然后去调用。Clojure当然也可以。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;jfmap&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;read-map &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
然后你直接操作jfmap就可以了。&lt;br /&gt;
现在我们就来按照jfmap来进行简繁翻译吧！&lt;br /&gt;
你可能会想，很简单吧？只需要遍历需要翻译的字符串，然后到jfmap中去找对应的翻译，然&lt;br /&gt;
后将翻译组装成字符串就行了。so easy!但当你这么想的时候，你已经陷入到了&lt;br /&gt;
实现的细节中了！Clojure让你能够更加的关注业务而不是实现细节！&lt;br /&gt;
这里给出的建议是：&lt;br /&gt;
&lt;b&gt;请先查找Clojure是否可通过函数组合来解决问题？如果不能再考虑自己编写函 数！&lt;/b&gt;&lt;br /&gt;
为什么这么说呢？因为在Clojure中大部分的问题都可以通过其提供的函数组合&lt;br /&gt;
来解决。你需要做的就是根据需要来组合函数！这使你能更多的思考业务而非实&lt;br /&gt;
现细节！比如这里的问题！&lt;br /&gt;
我们需要一个函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接受一个字符串
&lt;/li&gt;
&lt;li&gt;返回翻译完成的字符串
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很简单，我们先编写函数的定义。这里我们叫translate。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
然后呢？需要翻译字符串。这里叫翻译字符串，实际上就是根据map的key找到&lt;br /&gt;
value而已。在Clojure中找到这样的函数就可以了。你可以找到get函数。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; map k default&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
很好理解吧？根据k从map中查找value，如果找不到则返回default。其实这就是&lt;br /&gt;
核心代码了！我们知道map就是我们这里的jfmap，k实际上是获取的字符串的每&lt;br /&gt;
个字符，而default呢？这里如果我们根据k找不到的话，就直接返回k，也就是&lt;br /&gt;
不翻译了。所以代码修改为:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
现在只需要解决k就行了！继续寻找函数！现在需要的是在Clojure中用得还比较&lt;br /&gt;
多的一个函数&amp;mdash;map!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/map
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 &amp;amp; colls]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Returns&lt;/span&gt; a lazy sequence consisting of the result of applying f to the
  set of first items of each coll, followed by applying f to the set
  of second items in each coll, until any one of the colls is
  exhausted.  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Any&lt;/span&gt; remaining items in other colls are ignored. &lt;span style=&quot;color: #cb4b16;&quot;&gt;Function&lt;/span&gt;
  f should accept number-of-colls arguments.
&lt;/pre&gt;
&lt;p&gt;
看到作用了吗？将函数应用到序列的每个元素上去！并返回一个由结果组成的&lt;br /&gt;
lazy序列！你可能会问了：这是针对序列的，对字符串有效吗？试试不就知道了？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; class &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
在repl里面输入如上的代码！你看到了什么？java.lang.Character?!没错，字&lt;br /&gt;
符串会被当作字符序列来操作！但是我们需要的是字符串啊？没关系，我们有&lt;br /&gt;
str函数!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;comp&lt;/span&gt; class str&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
comp是个什么东东？它的作用是将多个函数组合起来，从右向左的执行！！这里&lt;br /&gt;
就是先执行str在执行class,可以看到结果打印的是java.lang.String,正是我们&lt;br /&gt;
需要的。&lt;br /&gt;
OK，现在我们来组合这两个函数就行了.但是问题又来了！map的第二个参数是个函数，&lt;br /&gt;
我们怎么办呢？既然它需要函数，那我们就定义一个给它咯！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tmp&lt;/span&gt; [k]
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; tmp s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可能要抱怨了！取了个什么烂名字！！居然叫tmp?!呵呵，别急！我把函数定&lt;br /&gt;
义为tmp，是因为我要将优化掉！可以看出，这个功能非常的简单，而且只会给&lt;br /&gt;
translate使用，那么我们需要特意定义一个单独的函数吗？&lt;br /&gt;
不需要吧？我们直接将两个函数合并好了！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tmp&lt;/span&gt; [k] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
很简单，但是呢！既然都放到函数内部了！还需要函数名吗？就像Java中的匿名&lt;br /&gt;
内部类一样，直接定义直接使用，不需要名字！在Clojure中有fn这个special&lt;br /&gt;
form来定义匿名函数！&lt;br /&gt;
上面说defn是个宏！它的功能就类似于(还有其他功能，比如注释)：&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;tmp&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [k] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
我们使用fn来简化一下代码!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;fn&lt;/span&gt; [k] &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
舒服很多！还能更简单吗？当然！Clojure提供了#这个语法糖来定义匿名函数!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap k k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
好！问题来了！这里没有了参数列表！那get函数怎么知道k是个什么东西呢？所&lt;br /&gt;
以，这里使用%来替换，第一个参数用%或者%1替换，第二个则是%2,依次类推！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap % %&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
搞定了吗？没有！translate需要返回一个字符串，而map返回的是个lazy序列！&lt;br /&gt;
需要将序列转化为字符串！到clojure.string找找！有个join函数&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;translate&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;Trans string by map&quot;&lt;/span&gt;
  [s]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clstr/&lt;span style=&quot;color: #b58900;&quot;&gt;join&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;get&lt;/span&gt; jfmap % %&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; s&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
不废话了！记得要引入Namespace哦！！&lt;br /&gt;
实际上一行代码我们就搞定了基本的翻译了！很简单吧？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;读取不需要翻译的文字&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;ul&gt;
&lt;li&gt;复习
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻译的字，是使用的map来存储的？那不需要翻译的文字该如何存储呢？这要看&lt;br /&gt;
你如何处理了！我这里采用的是一个很简单的方式！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先对文字全文翻译
&lt;/li&gt;
&lt;li&gt;然后对翻译后的文字再反翻译
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如说，&quot;阿里山&quot;直接翻译的话，那么就会变成&quot;阿裡山&quot;，但是&quot;里&quot;字是不需要&lt;br /&gt;
翻译的。那么我就新建一个map，保存&quot;阿裡山&quot;-&amp;gt;&quot;阿里山&quot;，将文字再翻回来！&lt;br /&gt;
那么这里我就再需要一个类似jfmap.clj的文件就可以了。我这里叫ntmap.clj。&lt;br /&gt;
格式和jfmap.clj类似！只不过里面存储的是需要反翻译的文字!&lt;br /&gt;
如何读取和组装map?不需要我废话吧？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;过滤不翻译的文字&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Special Form
&lt;ul&gt;
&lt;li&gt;let
&lt;/li&gt;
&lt;li&gt;loop
&lt;/li&gt;
&lt;li&gt;if
&lt;/li&gt;
&lt;li&gt;recur
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过滤不翻译的文字，实际上就是反翻译!如何进行呢？原来在翻译的过程中我们&lt;br /&gt;
是一个字符一个字符的匹配的！但是这里是一个一个的字符串！这就比较难办了！&lt;br /&gt;
不管怎么说我们先定义函数!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;do-trans&lt;/span&gt;
  [s tmap ntmap]
   &lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
首先第一件事就是去全文翻译！然后获得结果！提供给后续函数使用！Java中有&lt;br /&gt;
局部变量！只需要将变量写在方法里就可以了！但是在Clojure中不同，它需要&lt;br /&gt;
通过let这个Special Form来处理。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;do-trans&lt;/span&gt;
  [s tmap ntmap]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [re &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;translate s tmap&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
let后面是个Vector，用来进行var绑定，这里translate翻译的结果会被绑定到&lt;br /&gt;
re这个var上！而re的作用范围就只在let这个括号内部！接着呢！就是对re进行&lt;br /&gt;
反翻译！没啥现成的函数了！只能自己处理！代码如下！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;do-trans&lt;/span&gt;
  [s tmap ntmap]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;let&lt;/span&gt; [re &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;translate s tmap&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
    &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;loop&lt;/span&gt; [result re
           k &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;keys&lt;/span&gt; ntmap&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;]
      &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;seq&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;recur&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clstr/&lt;span style=&quot;color: #b58900;&quot;&gt;replace&lt;/span&gt; result &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;ntmap &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;first&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)))&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;rest&lt;/span&gt; k&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
          result&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
loop又是个Special Form，看起来像循环！实际上它是个递归！loop后面也是&lt;br /&gt;
个参数Vector，功能和let的相同！这里将re绑定到了result，以及ntmap的key&lt;br /&gt;
绑定到了k上！&lt;br /&gt;
然后是if判断，还是个Special Form，(seq k)判断k是否是个序列！如果是则执&lt;br /&gt;
行recur，如果不是则返回result.其实seq并不是判断函数！它是用来构建序列&lt;br /&gt;
的！这里之所以能用来判断，基于两个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Clojure中除了nil和false是假，其他全是真
&lt;/li&gt;
&lt;li&gt;(seq nil)和(seq ())返回nil
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后seq就可以用来作为判断条件了！&lt;br /&gt;
recur是递归调用！这里调用的是loop，传递的参数是替换后的s和剩余的k.&lt;br /&gt;
实际功能就是，遍历ntmap中的key，如果找到了，则使用value替换掉！&lt;br /&gt;
至此，就完成了翻译的所有功能！考虑下如果使用Java需要多少行代码？？&lt;br /&gt;
测试翻译一个页面的时间为70毫秒左右，速度还是不错的！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;提供给Java调用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p&gt;Clojure提供了将函数给Java调用的功能！&lt;br /&gt;
首先，在core.clj文件中编写函数，比如下面的翻译:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;-transAll&lt;/span&gt;
  &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&quot;&amp;#32763;&amp;#35793;&amp;#25152;&amp;#26377;&quot;&lt;/span&gt;
  [source &lt;span style=&quot;color: #cb4b16;&quot;&gt;mapPath&lt;/span&gt;]
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;trans/translate source &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;trans/read-map &lt;span style=&quot;color: #cb4b16;&quot;&gt;mapPath&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
函数名前面一定要有个&quot;-&quot;。&lt;br /&gt;
然后在命名空间里添加如下代码&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;ns&lt;/span&gt; jft.core
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36825;&amp;#37324;&amp;#24320;&amp;#22987; &lt;/span&gt;
 &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:gen-class&lt;/span&gt;
   &lt;span style=&quot;color: #2aa198;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;jft.core.Trans&lt;/span&gt;
   &lt;span style=&quot;color: #2aa198;&quot;&gt;:methods&lt;/span&gt; [#^{&lt;span style=&quot;color: #2aa198;&quot;&gt;:static&lt;/span&gt; true} [&lt;span style=&quot;color: #cb4b16;&quot;&gt;transAll&lt;/span&gt; [&lt;span style=&quot;color: #cb4b16;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #cb4b16;&quot;&gt;String&lt;/span&gt;] &lt;span style=&quot;color: #cb4b16;&quot;&gt;String&lt;/span&gt;]]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#36825;&amp;#37324;&amp;#32467;&amp;#26463;&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;:require&lt;/span&gt; [clojure.string &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; cstr]
            [jft.trans &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; trans]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
应该不难理解吧？name是在Java中import的时候的名字！methods是可以调用的&lt;br /&gt;
方法,这里注解为静态方法！注意这里的transAll前面是没有&quot;-&quot;的，后面是参数&lt;br /&gt;
和返回类型！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot;&gt;打包&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;p&gt;需要给Java调用，那就要先封装为jar包。非常简单&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein jar
&lt;/pre&gt;
&lt;p&gt;
然后就可以提供给Java调用了！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;源码&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2014/01/wpid-jft2.zip&quot;&gt;jft&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;脚注: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Namespace和Java中的包类似，但是在Clojure中叫Namespace。这里没有&lt;br /&gt;
将其翻译为命名空间，主要是怕有误解。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure教程-基本语法-01</title>
        <link href="http://liyouhai.com/clojure/clojure%25e6%2595%2599%25e7%25a8%258b-%25e5%259f%25ba%25e6%259c%25ac%25e8%25af%25ad%25e6%25b3%2595-01.html"/>
        <updated>2013-12-20T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e6%95%99%e7%a8%8b-%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95-01</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 核心语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 代码功能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1 读取简繁字典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;学习一门语言最好的方法就是去使用它。我们就从一个小例子来学习 Clojure语法.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;target&quot;&gt;核心语法&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;首先先来看一下Clojure的核心语法。&lt;br /&gt;
Clojure的使用的是Lisp语法,又叫S表达式。核心语法非常的简单。但是对于熟悉c系语法(c,c++,java)的朋友来说，第一次接触会非常的不习惯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有代码以&quot;(&quot;开始,&quot;)&quot;结束。即所有的代码都被()包裹
&lt;/li&gt;
&lt;li&gt;&quot;(&quot;后的第一个数据被当作函数或者宏来调用
&lt;/li&gt;
&lt;li&gt;接着的数据被当作参数传递
&lt;/li&gt;
&lt;li&gt;如果想原样返回数据，在&quot;(&quot;前面添加&quot;'&quot;。此写法是(quote (&amp;hellip;))的简写
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前面的hello world程序为例。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
它以&quot;(&quot;开始，后面跟的是函数println，接着空格跟的是参数&quot;Hello World&quot;，最后&quot;)&quot;结尾。了解了如上规则，你就基本学会了Clojure的大部分语法。下面比较一下Clojure,Java,Python,Ruby的一些语法.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Clojure 表达式&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Java 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Python 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Ruby 语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(not k)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k or !k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(inc a)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a++、++a、a += 1、a + 1&lt;sup&gt;a&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1、a + 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(/ (+ x y) 2)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(instance? java. util.List al)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al instanceof java.util.List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;isinstance(al,list)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al.is&lt;sub&gt;a&lt;/sub&gt;? Array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(if (not a) (inc b) (dec b))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;b + 1 if not a else b-1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(Math/pow 2 10)&lt;sup&gt;c&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Math.pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2 ** 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(.someMethod someObj &quot;foo&quot; (.otherMethod otherObj 0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看出Clojure的语法有高度的一致性，即使你不熟悉S表达式，但是依据上面的原则，可以看懂它想表达的是一个什么意思。而对于其他三门语言，如果你没有一个个的学习相应的语法，你还是比较难理解它的意思的。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;代码功能&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;了解了核心语法，我们就可以来编写代码了。我们要编写的代码功能很简单，进行简繁翻译，其中过滤不需要翻译的文字。我们将分几步来完成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取简繁字典
&lt;/li&gt;
&lt;li&gt;进行简繁翻译
&lt;/li&gt;
&lt;li&gt;读取不需要翻译的文字
&lt;/li&gt;
&lt;li&gt;过滤不翻译的文字
&lt;/li&gt;
&lt;li&gt;多线程执行
&lt;/li&gt;
&lt;li&gt;提供给Java调用
&lt;/li&gt;
&lt;li&gt;打包
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;读取简繁字典&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;语法点
&lt;ul&gt;
&lt;li&gt;查看Clojure API
&lt;/li&gt;
&lt;li&gt;第一个函数的编写
&lt;/li&gt;
&lt;li&gt;Namespace的引入
&lt;/li&gt;
&lt;li&gt;正则表达式
&lt;/li&gt;
&lt;li&gt;Clojure字面量
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
我们先看第一个功能。我们要读取简繁字典。简繁字典其实就是简繁对照的文件，我这里叫jfmap.clj&lt;br /&gt;
格式如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;万 萬 与 與 丑 醜 专 專 业 業 丛 叢 东 東 丝 絲 丢 丟 两 兩 严 嚴 丧 喪 个 個 丬 爿 
&lt;/pre&gt;
&lt;p&gt;
这里只是简单的列了一点。具体内容请见附件。有了这个文件，我们如何把内容读出来呢？熟悉Java的都知道，我们要创建文件流来读取，然后要打开流，循环读取，最后关闭流，还要抓异常。很繁琐。在Clojure中如何处理呢？Clojure提供了slurp函数，可以根据提供的路径将文件内容读入。API如下:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/slurp
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f &amp;amp; opts]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Opens&lt;/span&gt; a reader on f and reads all its contents, returning a string.
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;See&lt;/span&gt; clojure.java.io/reader for a complete list of supported arguments.
&lt;/pre&gt;
&lt;p&gt;
OK。我们知道了要用什么函数。那么根据API和上面说的总规则，我们来写代码.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是&quot;(&quot;
&lt;/li&gt;
&lt;li&gt;然后是函数名slurp
&lt;/li&gt;
&lt;li&gt;空格，参数。这里是要读取的文件路径
&lt;/li&gt;
&lt;li&gt;最后&quot;)&quot;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可以在REPL里面去实验这行代码的执行结果。执行此行代码，clojure会将jfmap.clj的内容以字符串的形式全部读入。接着呢？要做简繁翻译，字符串肯定不方便我们的操作。很明显map才是最适合的数据结构。那么我们如何将字符串变成map呢？&lt;br /&gt;
我们只能求助于API了，你可以在&lt;a href=&quot;http://clojure.github.io/clojure/api-index.html&quot;&gt;Clojure的Index页面&lt;/a&gt;搜索map,可以找到hash-map函数。它的API说明如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;hash-map
function
Usage: (hash-map)
       (hash-map &amp;amp; keyvals)
keyval =&amp;gt; key val
Returns a new hash map with supplied mappings.  If any keys are
equal, they are handled as if by repeated uses of assoc.
&lt;/pre&gt;
&lt;p&gt;
根据提供的映射关系返回一个新的hashmap。而这里我们是一个字符串，如何提供映射关系呢？按照空格将文字切开就行了嘛！！继续找API。Java里有split方法，Clojure里有没有相应的函数呢？试试再说。。有了！在clojure.string的Namespace&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;中，我们找到了叫split的函数！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;split
function
Usage: (split s re)
       (split s re limit)
Splits string on a regular expression.  Optional argument limit is
the maximum number of splits. Not lazy. Returns vector of the splits.
&lt;/pre&gt;
&lt;p&gt;
通过正则表达式来切割字符串。看着挺像，先用再说！我们有repl嘛！直接在repl里面输入&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
执行!Oops,报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;CompilerException java.lang.RuntimeException: Unable to resolve symbol: split in this context
&lt;/pre&gt;
&lt;p&gt;
找不到split?!如果在Java中报类似的错误，你会想到什么？没有引入包阿！这里也是。在Java中会默认引入java.lang包，同理在Clojure中会引入clojure.core包。其他包则要自己引入，这里split在clojure.string包中。所以你需要引入clojure.string包。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; 'clojure.string&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这也就是调用了require函数来进行引入！为什么clojure.string前面有个单引号呢？想想核心语法！这里暂不展开说！给大家留个思考题！！后续会专门对NameSpace引入做详细介绍！光引入还没用！调用代码也需要修改！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clojure.string/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可能要吐槽了！既然引入了，为什么还要加包名前缀？！我们可以和Java作个比较！如果这里是Java的话，那么我们在调用split的时候，实际上是需要一个类作为前缀的，比如StringUtils.split()!但是在clojure中并没有类的概念！包(Clojure叫NameSpace)下面只有函数，所以它使用NameSpace来确保函数的唯一性引用！&lt;br /&gt;
当然了每次都要写这么长的NameSpace的名字也是挺烦人的。Clojure提供了简写.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; ['clojure.stirng &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; 'cstr]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
:as是Keyword,是Clojure字面量的一种。它和String很类似，不过有些区别，它比String有更多的功能。下表是Clojure所包含的字面量。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Type&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Example(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Boolean&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;true,false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Character&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Keyword&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;:tag,:doc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(1 2 3),(println &quot;foo&quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Map&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;{:name &quot;Bill&quot;,:age 42}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Nil&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Number&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;1,4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Set&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;#{:snap :crackle :pop}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;String&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;hello&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Symbol&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;user/foo,java.lang.String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Vector&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[1 2 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
ok.终于得到了我们要的结果。这里的#&quot; &quot;是正则表达式(这是你遇到的第一个特殊语法，学习方法&amp;mdash;死记！！)，它构建了Java中的Pattern，所以正则表达式内容和Java完全相同，这里就不废话了。你只需要记住其语法就行了。&lt;br /&gt;
切开了字符串，我们来生成map吧！如何生成呢？你应该有答案了吧？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
又报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;IllegalArgumentException No value supplied for key: [&quot;万&quot; &quot;萬&quot;]  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)
&lt;/pre&gt;
&lt;p&gt;
不合法的参数！！split得到的是个Vector([]包裹的数据结构是Vector),而hash-map要的参数类似于Java中的可变参数！如何匹配这两者呢？Clojure中提供了apply函数!API如下&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/apply
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f args] [f x args] [f x y args] [f x y z args] [f a b c d &amp;amp; args]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Applies&lt;/span&gt; fn f to the argument list formed by prepending intervening arguments to args.
&lt;/pre&gt;
&lt;p&gt;
此函数有点特别！它的第一个参数是函数，后面是该函数所需要的参数！知道怎么调用吗？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
终于成功了！！我们看到了结果&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975;&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#33836;&quot;&lt;/span&gt;}   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20197;{}&amp;#21253;&amp;#35065;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#32467;&amp;#26500;&amp;#26159;map&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
最后呢！我们需要对jfmap.clj的内容进行处理！So easy!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;脚注: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Namespace和Java中的包类似，但是在Clojure中叫Namespace。这里没有将其翻&lt;br /&gt;
译为命名空间，主要是怕有误解。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 核心语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 代码功能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;3.1 读取简繁字典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;学习一门语言最好的方法就是去使用它。我们就从一个小例子来学习 Clojure语法.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;target&quot;&gt;核心语法&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;首先先来看一下Clojure的核心语法。&lt;br /&gt;
Clojure的使用的是Lisp语法,又叫S表达式。核心语法非常的简单。但是对于熟悉c系语法(c,c++,java)的朋友来说，第一次接触会非常的不习惯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有代码以&quot;(&quot;开始,&quot;)&quot;结束。即所有的代码都被()包裹
&lt;/li&gt;
&lt;li&gt;&quot;(&quot;后的第一个数据被当作函数或者宏来调用
&lt;/li&gt;
&lt;li&gt;接着的数据被当作参数传递
&lt;/li&gt;
&lt;li&gt;如果想原样返回数据，在&quot;(&quot;前面添加&quot;'&quot;。此写法是(quote (&amp;hellip;))的简写
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前面的hello world程序为例。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
它以&quot;(&quot;开始，后面跟的是函数println，接着空格跟的是参数&quot;Hello World&quot;，最后&quot;)&quot;结尾。了解了如上规则，你就基本学会了Clojure的大部分语法。下面比较一下Clojure,Java,Python,Ruby的一些语法.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Clojure 表达式&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Java 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Python 语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;对应的 Ruby 语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(not k)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;not k or !k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(inc a)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a++、++a、a += 1、a + 1&lt;sup&gt;a&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1、a + 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;a += 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(/ (+ x y) 2)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(x + y) / 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(instance? java. util.List al)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al instanceof java.util.List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;isinstance(al,list)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;al.is&lt;sub&gt;a&lt;/sub&gt;? Array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(if (not a) (inc b) (dec b))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;b + 1 if not a else b-1&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;!a ? b + 1 : b - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(Math/pow 2 10)&lt;sup&gt;c&lt;/sup&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Math.pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;pow(2, 10)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2 ** 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(.someMethod someObj &quot;foo&quot; (.otherMethod otherObj 0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;someObj.someMethod(&quot;foo&quot; , otherObj.otherMethod(0))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看出Clojure的语法有高度的一致性，即使你不熟悉S表达式，但是依据上面的原则，可以看懂它想表达的是一个什么意思。而对于其他三门语言，如果你没有一个个的学习相应的语法，你还是比较难理解它的意思的。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;代码功能&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;了解了核心语法，我们就可以来编写代码了。我们要编写的代码功能很简单，进行简繁翻译，其中过滤不需要翻译的文字。我们将分几步来完成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取简繁字典
&lt;/li&gt;
&lt;li&gt;进行简繁翻译
&lt;/li&gt;
&lt;li&gt;读取不需要翻译的文字
&lt;/li&gt;
&lt;li&gt;过滤不翻译的文字
&lt;/li&gt;
&lt;li&gt;多线程执行
&lt;/li&gt;
&lt;li&gt;提供给Java调用
&lt;/li&gt;
&lt;li&gt;打包
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;读取简繁字典&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;语法点
&lt;ul&gt;
&lt;li&gt;查看Clojure API
&lt;/li&gt;
&lt;li&gt;第一个函数的编写
&lt;/li&gt;
&lt;li&gt;Namespace的引入
&lt;/li&gt;
&lt;li&gt;正则表达式
&lt;/li&gt;
&lt;li&gt;Clojure字面量
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
我们先看第一个功能。我们要读取简繁字典。简繁字典其实就是简繁对照的文件，我这里叫jfmap.clj&lt;br /&gt;
格式如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;万 萬 与 與 丑 醜 专 專 业 業 丛 叢 东 東 丝 絲 丢 丟 两 兩 严 嚴 丧 喪 个 個 丬 爿 
&lt;/pre&gt;
&lt;p&gt;
这里只是简单的列了一点。具体内容请见附件。有了这个文件，我们如何把内容读出来呢？熟悉Java的都知道，我们要创建文件流来读取，然后要打开流，循环读取，最后关闭流，还要抓异常。很繁琐。在Clojure中如何处理呢？Clojure提供了slurp函数，可以根据提供的路径将文件内容读入。API如下:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/slurp
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f &amp;amp; opts]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Opens&lt;/span&gt; a reader on f and reads all its contents, returning a string.
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;See&lt;/span&gt; clojure.java.io/reader for a complete list of supported arguments.
&lt;/pre&gt;
&lt;p&gt;
OK。我们知道了要用什么函数。那么根据API和上面说的总规则，我们来写代码.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是&quot;(&quot;
&lt;/li&gt;
&lt;li&gt;然后是函数名slurp
&lt;/li&gt;
&lt;li&gt;空格，参数。这里是要读取的文件路径
&lt;/li&gt;
&lt;li&gt;最后&quot;)&quot;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可以在REPL里面去实验这行代码的执行结果。执行此行代码，clojure会将jfmap.clj的内容以字符串的形式全部读入。接着呢？要做简繁翻译，字符串肯定不方便我们的操作。很明显map才是最适合的数据结构。那么我们如何将字符串变成map呢？&lt;br /&gt;
我们只能求助于API了，你可以在&lt;a href=&quot;http://clojure.github.io/clojure/api-index.html&quot;&gt;Clojure的Index页面&lt;/a&gt;搜索map,可以找到hash-map函数。它的API说明如下:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;hash-map
function
Usage: (hash-map)
       (hash-map &amp;amp; keyvals)
keyval =&amp;gt; key val
Returns a new hash map with supplied mappings.  If any keys are
equal, they are handled as if by repeated uses of assoc.
&lt;/pre&gt;
&lt;p&gt;
根据提供的映射关系返回一个新的hashmap。而这里我们是一个字符串，如何提供映射关系呢？按照空格将文字切开就行了嘛！！继续找API。Java里有split方法，Clojure里有没有相应的函数呢？试试再说。。有了！在clojure.string的Namespace&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;中，我们找到了叫split的函数！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;split
function
Usage: (split s re)
       (split s re limit)
Splits string on a regular expression.  Optional argument limit is
the maximum number of splits. Not lazy. Returns vector of the splits.
&lt;/pre&gt;
&lt;p&gt;
通过正则表达式来切割字符串。看着挺像，先用再说！我们有repl嘛！直接在repl里面输入&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
执行!Oops,报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;CompilerException java.lang.RuntimeException: Unable to resolve symbol: split in this context
&lt;/pre&gt;
&lt;p&gt;
找不到split?!如果在Java中报类似的错误，你会想到什么？没有引入包阿！这里也是。在Java中会默认引入java.lang包，同理在Clojure中会引入clojure.core包。其他包则要自己引入，这里split在clojure.string包中。所以你需要引入clojure.string包。&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; 'clojure.string&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这也就是调用了require函数来进行引入！为什么clojure.string前面有个单引号呢？想想核心语法！这里暂不展开说！给大家留个思考题！！后续会专门对NameSpace引入做详细介绍！光引入还没用！调用代码也需要修改！&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;clojure.string/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
你可能要吐槽了！既然引入了，为什么还要加包名前缀？！我们可以和Java作个比较！如果这里是Java的话，那么我们在调用split的时候，实际上是需要一个类作为前缀的，比如StringUtils.split()!但是在clojure中并没有类的概念！包(Clojure叫NameSpace)下面只有函数，所以它使用NameSpace来确保函数的唯一性引用！&lt;br /&gt;
当然了每次都要写这么长的NameSpace的名字也是挺烦人的。Clojure提供了简写.&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;require&lt;/span&gt; ['clojure.stirng &lt;span style=&quot;color: #2aa198;&quot;&gt;:as&lt;/span&gt; 'cstr]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
:as是Keyword,是Clojure字面量的一种。它和String很类似，不过有些区别，它比String有更多的功能。下表是Clojure所包含的字面量。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Type&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Example(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Boolean&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;true,false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Character&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Keyword&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;:tag,:doc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;List&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(1 2 3),(println &quot;foo&quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Map&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;{:name &quot;Bill&quot;,:age 42}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Nil&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Number&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;1,4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Set&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;#{:snap :crackle :pop}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;String&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;hello&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Symbol&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;user/foo,java.lang.String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Vector&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[1 2 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
ok.终于得到了我们要的结果。这里的#&quot; &quot;是正则表达式(这是你遇到的第一个特殊语法，学习方法&amp;mdash;死记！！)，它构建了Java中的Pattern，所以正则表达式内容和Java完全相同，这里就不废话了。你只需要记住其语法就行了。&lt;br /&gt;
切开了字符串，我们来生成map吧！如何生成呢？你应该有答案了吧？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;hash-map&lt;/span&gt; &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
又报错了！&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;IllegalArgumentException No value supplied for key: [&quot;万&quot; &quot;萬&quot;]  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)
&lt;/pre&gt;
&lt;p&gt;
不合法的参数！！split得到的是个Vector([]包裹的数据结构是Vector),而hash-map要的参数类似于Java中的可变参数！如何匹配这两者呢？Clojure中提供了apply函数!API如下&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;clojure.core/apply
&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;[f args] [f x args] [f x y args] [f x y z args] [f a b c d &amp;amp; args]&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #cb4b16;&quot;&gt;Applies&lt;/span&gt; fn f to the argument list formed by prepending intervening arguments to args.
&lt;/pre&gt;
&lt;p&gt;
此函数有点特别！它的第一个参数是函数，后面是该函数所需要的参数！知道怎么调用吗？&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975; &amp;#33836;&quot;&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
终于成功了！！我们看到了结果&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;{&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#19975;&quot;&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;&amp;#33836;&quot;&lt;/span&gt;}   &lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #93a1a1; font-style: italic;&quot;&gt;&amp;#20197;{}&amp;#21253;&amp;#35065;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#32467;&amp;#26500;&amp;#26159;map&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
最后呢！我们需要对jfmap.clj的内容进行处理！So easy!&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;apply&lt;/span&gt; hash-map &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;cstr/split &lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;slurp&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;jfmap-path&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt; #&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;脚注: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Namespace和Java中的包类似，但是在Clojure中叫Namespace。这里没有将其翻&lt;br /&gt;
译为命名空间，主要是怕有误解。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Luminus手册-Useful Libraries</title>
        <link href="http://liyouhai.com/luminus/useful-libraries.html"/>
        <updated>2013-12-07T16:00:00+08:00</updated>
        <id>http://liyouhai.com//luminus/useful-libraries</id>
        <content type="html">&lt;p&gt;
Luminus的目标是从细粒度来方便你开发web应用。所以它默认包含了很多库包。&lt;br /&gt;
包括lib-noir提供一般工具，Selmer/Hiccup提供HTML模板,Timbre提供日志功能，&lt;br /&gt;
Tower提供国际化等等其他包。当然，还有很多的包能给web开发带来便利。这里&lt;br /&gt;
我们列出了已经包含在Luminus中的其他包。&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 Async HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5 ClojureScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6 Database clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7 Database Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8 Email Sending&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9 SVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10 Template Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11 Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-12&quot;&gt;12 Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Assets&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/edgecase/dieter&quot;&gt;Dieter&lt;/a&gt; - Asset pipeline ring middleware
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Async HTTP&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ztellman/aleph&quot;&gt;Aleph&lt;/a&gt; - Asynchronous communication
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/http-kit/http-kit&quot;&gt;http-kit&lt;/a&gt; - High-performance event-driven HTTP client/server
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Authentication&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cemerick/friend&quot;&gt;Friend&lt;/a&gt; - An extensible authentication and authorization library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brentonashworth/sandbar&quot;&gt;Sandbar&lt;/a&gt; - A web application library with higher level abstractions for Compojure, Ring
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/remvee/ring-basic-authentication&quot;&gt;ring-basic-authentication&lt;/a&gt; - Ring middleware to enforce basic authentication
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Caching&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojurewerkz/spyglass&quot;&gt;Spyglass&lt;/a&gt; - A Memcached client (also: Couchbase, Kestrel)
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojure/core.cache&quot;&gt;core.cache&lt;/a&gt; - A caching library implementing various cache strategies
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;ClojureScript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/levand/domina&quot;&gt;Domina&lt;/a&gt; - A jQuery inspired DOM manipulation library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Prismatic/dommy&quot;&gt;Dommy&lt;/a&gt; - A no-nonsense templating and (soon) dom manipulation library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ckirkendall/enfocus&quot;&gt;Enfocus&lt;/a&gt; - DOM manipulation and templating library inspired by Enlive
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ibdknox/fetch&quot;&gt;Fetch&lt;/a&gt; - A library for Client/Server interaction
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shoreleave&quot;&gt;Shoreleave&lt;/a&gt; - A smarter client-side with ClojureScript
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drcode/webfui&quot;&gt;Webfui&lt;/a&gt; - Client-Side Web Framework
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drcode/webfui&quot;&gt;Widje&lt;/a&gt; - Templating for ClojureScript
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Database clients&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aboekhoff/congomongo&quot;&gt;CongoMongo&lt;/a&gt; - Wrapper for the mongo-db java api
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojuremongodb.info/&quot;&gt;Monger&lt;/a&gt; - Monger, a client for MongoDB
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojure-clutch/clutch&quot;&gt;Clutch&lt;/a&gt; - A library for Apache CouchDB
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelklishin/neocons&quot;&gt;Neocons&lt;/a&gt; - A feature rich idiomatic client for the Neo4J REST API
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojureriak.info/&quot;&gt;Welle&lt;/a&gt; - An expressive client for Riak
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojurewerkz/cassaforte&quot;&gt;Cassaforte&lt;/a&gt; - A young client for Apache Cassandra 1.2+
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/rotary&quot;&gt;Rotary&lt;/a&gt; - DynamoDB API
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cemerick/rummage&quot;&gt;Rummage&lt;/a&gt; - A client library for Amazon's SimpleDB (SDB)
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ptaoussanis/carmine&quot;&gt;Carmine&lt;/a&gt; - Clojure Redis client &amp;amp; message queue
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Database Migrations&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/macourtney/drift&quot;&gt;Drift&lt;/a&gt; - A migration library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://budu.github.com/lobos/&quot;&gt;Lobos&lt;/a&gt; - Lobos is a library to help you create and modify database schemas
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pjstadig/migratus&quot;&gt;Migratus&lt;/a&gt; - A general migration framework
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/ragtime&quot;&gt;Ragtime&lt;/a&gt; - Database-independent migration library
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Email Sending&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojurewerkz/mailer&quot;&gt;Mailer&lt;/a&gt; - An ActionMailer-inspired mailer library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drewr/postal&quot;&gt;Postal&lt;/a&gt; - Clojure email support
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MayDaniel/clj-mail&quot;&gt;clj-mail&lt;/a&gt; - Send and receive emails from Clojure
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;SVG&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://liebke.github.com/analemma/&quot;&gt;Analemma&lt;/a&gt; - a Clojure-based SVG DSL and charting library
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;Template Languages&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kumarshantanu/basil&quot;&gt;Basil&lt;/a&gt; - A general purpose template library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fhd/clostache&quot;&gt;Clostache&lt;/a&gt; -  for Clojure
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cgrand/enlive&quot;&gt;Enlive&lt;/a&gt; - A selector-based (à la CSS) templating and transformation system
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Flamefork/fleet&quot;&gt;Fleet&lt;/a&gt; - Templating System for Clojure
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Raynes/laser&quot;&gt;Laser&lt;/a&gt; - HTML transformation/templating
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidsantiago/stencil&quot;&gt;Stencil&lt;/a&gt; - A fast, compliant implementation of Mustache
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidsantiago/tinsel&quot;&gt;Tinsel&lt;/a&gt; - Selector-based templates with Hiccup
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;Web Services&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure-liberator.github.com/&quot;&gt;Liberator&lt;/a&gt; - a library for creating REST services
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brehaut/necessary-evil&quot;&gt;necessary-evil&lt;/a&gt; - XML RPC library for Clojure
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;Miscellaneous&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelklishin/urly&quot;&gt;Urly&lt;/a&gt; - a library that unifies parsing of URIs, URLs and URL-like values like relative href values
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/ring-anti-forgery&quot;&gt;ring-anti-forgery&lt;/a&gt; - CSRF attack prevention using randomly-generated anti-forgery tokens
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yogthos/clj-rss&quot;&gt;clj-rss&lt;/a&gt; - a library for generating RSS feeds
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yogthos/clj-pdf&quot;&gt;clj-pdf&lt;/a&gt; - PDF report generation library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojurevalidations.info/articles/getting_started.html&quot;&gt;Validateur&lt;/a&gt; - a validation library inspired by Ruby's ActiveModel
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ebaxt/ring-rewrite&quot;&gt;ring-rewrite&lt;/a&gt; - Ring middleware for defining and applying rewrite rules
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelklishin/pantomime&quot;&gt;Pantomime&lt;/a&gt; - a Library For Working With MIME Types
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
为数不多的几个目录包含了很多web开发所需要的包：测试，数据验证，JSON，&lt;br /&gt;
异常处理，SQL和其他你能在&lt;a href=&quot;http://www.clojure-toolbox.com/&quot;&gt;Clojure Toobox&lt;/a&gt;,&lt;a href=&quot;http://www.clojuresphere.com/&quot;&gt;ClojureSphere&lt;/a&gt;和&lt;a href=&quot;http://clojurewerkz.org/&quot;&gt;ClojureWerkz&lt;/a&gt;中&lt;br /&gt;
找到的包。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;p&gt;
Luminus的目标是从细粒度来方便你开发web应用。所以它默认包含了很多库包。&lt;br /&gt;
包括lib-noir提供一般工具，Selmer/Hiccup提供HTML模板,Timbre提供日志功能，&lt;br /&gt;
Tower提供国际化等等其他包。当然，还有很多的包能给web开发带来便利。这里&lt;br /&gt;
我们列出了已经包含在Luminus中的其他包。&lt;/p&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 Async HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;5 ClojureScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;6 Database clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;7 Database Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;8 Email Sending&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-9&quot;&gt;9 SVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-10&quot;&gt;10 Template Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-11&quot;&gt;11 Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-12&quot;&gt;12 Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Assets&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/edgecase/dieter&quot;&gt;Dieter&lt;/a&gt; - Asset pipeline ring middleware
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Async HTTP&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ztellman/aleph&quot;&gt;Aleph&lt;/a&gt; - Asynchronous communication
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/http-kit/http-kit&quot;&gt;http-kit&lt;/a&gt; - High-performance event-driven HTTP client/server
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Authentication&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cemerick/friend&quot;&gt;Friend&lt;/a&gt; - An extensible authentication and authorization library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brentonashworth/sandbar&quot;&gt;Sandbar&lt;/a&gt; - A web application library with higher level abstractions for Compojure, Ring
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/remvee/ring-basic-authentication&quot;&gt;ring-basic-authentication&lt;/a&gt; - Ring middleware to enforce basic authentication
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Caching&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojurewerkz/spyglass&quot;&gt;Spyglass&lt;/a&gt; - A Memcached client (also: Couchbase, Kestrel)
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojure/core.cache&quot;&gt;core.cache&lt;/a&gt; - A caching library implementing various cache strategies
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;ClojureScript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/levand/domina&quot;&gt;Domina&lt;/a&gt; - A jQuery inspired DOM manipulation library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Prismatic/dommy&quot;&gt;Dommy&lt;/a&gt; - A no-nonsense templating and (soon) dom manipulation library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ckirkendall/enfocus&quot;&gt;Enfocus&lt;/a&gt; - DOM manipulation and templating library inspired by Enlive
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ibdknox/fetch&quot;&gt;Fetch&lt;/a&gt; - A library for Client/Server interaction
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shoreleave&quot;&gt;Shoreleave&lt;/a&gt; - A smarter client-side with ClojureScript
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drcode/webfui&quot;&gt;Webfui&lt;/a&gt; - Client-Side Web Framework
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drcode/webfui&quot;&gt;Widje&lt;/a&gt; - Templating for ClojureScript
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Database clients&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aboekhoff/congomongo&quot;&gt;CongoMongo&lt;/a&gt; - Wrapper for the mongo-db java api
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojuremongodb.info/&quot;&gt;Monger&lt;/a&gt; - Monger, a client for MongoDB
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojure-clutch/clutch&quot;&gt;Clutch&lt;/a&gt; - A library for Apache CouchDB
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelklishin/neocons&quot;&gt;Neocons&lt;/a&gt; - A feature rich idiomatic client for the Neo4J REST API
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojureriak.info/&quot;&gt;Welle&lt;/a&gt; - An expressive client for Riak
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojurewerkz/cassaforte&quot;&gt;Cassaforte&lt;/a&gt; - A young client for Apache Cassandra 1.2+
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/rotary&quot;&gt;Rotary&lt;/a&gt; - DynamoDB API
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cemerick/rummage&quot;&gt;Rummage&lt;/a&gt; - A client library for Amazon's SimpleDB (SDB)
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ptaoussanis/carmine&quot;&gt;Carmine&lt;/a&gt; - Clojure Redis client &amp;amp; message queue
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Database Migrations&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/macourtney/drift&quot;&gt;Drift&lt;/a&gt; - A migration library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://budu.github.com/lobos/&quot;&gt;Lobos&lt;/a&gt; - Lobos is a library to help you create and modify database schemas
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pjstadig/migratus&quot;&gt;Migratus&lt;/a&gt; - A general migration framework
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/ragtime&quot;&gt;Ragtime&lt;/a&gt; - Database-independent migration library
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Email Sending&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojurewerkz/mailer&quot;&gt;Mailer&lt;/a&gt; - An ActionMailer-inspired mailer library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drewr/postal&quot;&gt;Postal&lt;/a&gt; - Clojure email support
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MayDaniel/clj-mail&quot;&gt;clj-mail&lt;/a&gt; - Send and receive emails from Clojure
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;SVG&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://liebke.github.com/analemma/&quot;&gt;Analemma&lt;/a&gt; - a Clojure-based SVG DSL and charting library
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;Template Languages&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kumarshantanu/basil&quot;&gt;Basil&lt;/a&gt; - A general purpose template library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fhd/clostache&quot;&gt;Clostache&lt;/a&gt; -  for Clojure
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cgrand/enlive&quot;&gt;Enlive&lt;/a&gt; - A selector-based (à la CSS) templating and transformation system
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Flamefork/fleet&quot;&gt;Fleet&lt;/a&gt; - Templating System for Clojure
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Raynes/laser&quot;&gt;Laser&lt;/a&gt; - HTML transformation/templating
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidsantiago/stencil&quot;&gt;Stencil&lt;/a&gt; - A fast, compliant implementation of Mustache
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidsantiago/tinsel&quot;&gt;Tinsel&lt;/a&gt; - Selector-based templates with Hiccup
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;Web Services&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure-liberator.github.com/&quot;&gt;Liberator&lt;/a&gt; - a library for creating REST services
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brehaut/necessary-evil&quot;&gt;necessary-evil&lt;/a&gt; - XML RPC library for Clojure
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;Miscellaneous&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelklishin/urly&quot;&gt;Urly&lt;/a&gt; - a library that unifies parsing of URIs, URLs and URL-like values like relative href values
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/ring-anti-forgery&quot;&gt;ring-anti-forgery&lt;/a&gt; - CSRF attack prevention using randomly-generated anti-forgery tokens
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yogthos/clj-rss&quot;&gt;clj-rss&lt;/a&gt; - a library for generating RSS feeds
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yogthos/clj-pdf&quot;&gt;clj-pdf&lt;/a&gt; - PDF report generation library
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojurevalidations.info/articles/getting_started.html&quot;&gt;Validateur&lt;/a&gt; - a validation library inspired by Ruby's ActiveModel
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ebaxt/ring-rewrite&quot;&gt;ring-rewrite&lt;/a&gt; - Ring middleware for defining and applying rewrite rules
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelklishin/pantomime&quot;&gt;Pantomime&lt;/a&gt; - a Library For Working With MIME Types
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
为数不多的几个目录包含了很多web开发所需要的包：测试，数据验证，JSON，&lt;br /&gt;
异常处理，SQL和其他你能在&lt;a href=&quot;http://www.clojure-toolbox.com/&quot;&gt;Clojure Toobox&lt;/a&gt;,&lt;a href=&quot;http://www.clojuresphere.com/&quot;&gt;ClojureSphere&lt;/a&gt;和&lt;a href=&quot;http://clojurewerkz.org/&quot;&gt;ClojureWerkz&lt;/a&gt;中&lt;br /&gt;
找到的包。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Luminus手册-Deployment</title>
        <link href="http://liyouhai.com/luminus/deployment.html"/>
        <updated>2013-12-06T16:00:00+08:00</updated>
        <id>http://liyouhai.com//luminus/deployment</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 Running Standalone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 Delpoying on Immutant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Deploying to Tomcat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 Heroku Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Running Standalone&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;要创建一个可独立运行的包，只需要运行如下的命令:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein ring uberjar
&lt;/pre&gt;
&lt;p&gt;
打包完成的jar会出现在target目录下。可以通过下面的命令运行:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;java -jar myapp-0.1.0-SNAPSHOT-standalone.jar
&lt;/pre&gt;
&lt;p&gt;
独立可运行的程序可以使用Jetty来运行。如果要设置端口号，你需要设置$PORT&lt;br /&gt;
环境变量:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #859900;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;PORT&lt;/span&gt;=8080
java -jar target/myapp1-0.1.0-SNAPSHOT-standalone.jar
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Delpoying on Immutant&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;如果想部署应用到Immutant，请执行如下命令:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein immutant deploy
&lt;/pre&gt;
&lt;p&gt;
更多信息请访问&lt;a href=&quot;http://immutant.org/tutorials/deploying/index.html&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Deploying to Tomcat&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;如果想打包应用为war包:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein ring uberwar 
&lt;/pre&gt;
&lt;p&gt;
然后只需要将打好的包拷贝到tomcat的webapps目录下即可:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;cp target/myapp-0.1.0-SNAPSHOT-standalone.war ~/tomcat/webapps/myapp.war
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Heroku Deployment&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;首先确保你有git和Heroku，然后按照下面的步骤做就可以了。&lt;br /&gt;
要测试你的应用是否通过foreman在本地运行，只需要执行下面的命令:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;foreman start
&lt;/pre&gt;
&lt;p&gt;
现在你能初始化你的git仓库，并提交你的应用&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git init
git add .
git commit -m &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;init&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
在Heroku创建你的应用&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;heroku create
&lt;/pre&gt;
&lt;p&gt;
你还可以创建数据库&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;heroku addons:add heroku-postgresql 
&lt;/pre&gt;
&lt;p&gt;
连接信息可以在你的Heroku页面看到.&lt;br /&gt;
部署应用.&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git push heroku master
&lt;/pre&gt;
&lt;p&gt;
现在你的应用就被部署到了Heroku上.&lt;br /&gt;
具体信息请看&lt;a href=&quot;https://devcenter.heroku.com/articles/clojure&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 Running Standalone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 Delpoying on Immutant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3 Deploying to Tomcat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 Heroku Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Running Standalone&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;要创建一个可独立运行的包，只需要运行如下的命令:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein ring uberjar
&lt;/pre&gt;
&lt;p&gt;
打包完成的jar会出现在target目录下。可以通过下面的命令运行:&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;java -jar myapp-0.1.0-SNAPSHOT-standalone.jar
&lt;/pre&gt;
&lt;p&gt;
独立可运行的程序可以使用Jetty来运行。如果要设置端口号，你需要设置$PORT&lt;br /&gt;
环境变量:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #859900;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #268bd2;&quot;&gt;PORT&lt;/span&gt;=8080
java -jar target/myapp1-0.1.0-SNAPSHOT-standalone.jar
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Delpoying on Immutant&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;如果想部署应用到Immutant，请执行如下命令:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein immutant deploy
&lt;/pre&gt;
&lt;p&gt;
更多信息请访问&lt;a href=&quot;http://immutant.org/tutorials/deploying/index.html&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Deploying to Tomcat&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;如果想打包应用为war包:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;lein ring uberwar 
&lt;/pre&gt;
&lt;p&gt;
然后只需要将打好的包拷贝到tomcat的webapps目录下即可:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;cp target/myapp-0.1.0-SNAPSHOT-standalone.war ~/tomcat/webapps/myapp.war
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Heroku Deployment&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;首先确保你有git和Heroku，然后按照下面的步骤做就可以了。&lt;br /&gt;
要测试你的应用是否通过foreman在本地运行，只需要执行下面的命令:&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;foreman start
&lt;/pre&gt;
&lt;p&gt;
现在你能初始化你的git仓库，并提交你的应用&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git init
git add .
git commit -m &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;init&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
在Heroku创建你的应用&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;heroku create
&lt;/pre&gt;
&lt;p&gt;
你还可以创建数据库&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;heroku addons:add heroku-postgresql 
&lt;/pre&gt;
&lt;p&gt;
连接信息可以在你的Heroku页面看到.&lt;br /&gt;
部署应用.&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git push heroku master
&lt;/pre&gt;
&lt;p&gt;
现在你的应用就被部署到了Heroku上.&lt;br /&gt;
具体信息请看&lt;a href=&quot;https://devcenter.heroku.com/articles/clojure&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>Clojure教程-环境搭建与Hello World</title>
        <link href="http://liyouhai.com/clojure/clojure%25e6%2595%2599%25e7%25a8%258b-%25e7%258e%25af%25e5%25a2%2583%25e6%2590%25ad%25e5%25bb%25ba%25e4%25b8%258ehello-world-2.html"/>
        <updated>2013-10-05T16:00:00+08:00</updated>
        <id>http://liyouhai.com//clojure/clojure%e6%95%99%e7%a8%8b-%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e4%b8%8ehello-world-2</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 环境搭建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1 通过Leiningen安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2 手动安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 HelloWorld&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;2.1 REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;2.2 运行单个文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;2.3 编辑器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;环境搭建&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;Clojure是JVM上的一种语言，其语法是Lisp格式，所以称为是JVM上的Lisp方言。&lt;br /&gt;
所以其依赖于JDK。请确保你的机器上安装了JDK6+。Clojure的安装非常的简单。&lt;br /&gt;
可以分为两种方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过Leiningen安装
&lt;/li&gt;
&lt;li&gt;手动安装
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过Leiningen是比较普遍也很方便的方式。我们先通过Leiningen来安装。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;通过Leiningen安装&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;Leiningen和Maven比较类似，是Clojure语言的管理工具。其实它就是基于Maven&lt;br /&gt;
构建的。我们先来安装Leiningen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先下载&lt;a href=&quot;https://raw.github.com/technomancy/leiningen/stable/bin/lein&quot;&gt;lein script&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;将lein script放置到你的path下(linux下直接放到用户目录下即可)，保存文&lt;br /&gt;
  件名叫lein。
&lt;/li&gt;
&lt;li&gt;将其权限设置为可执行(chmod a+x lein)
&lt;/li&gt;
&lt;li&gt;打开shell，输入lein即可
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leiningen会自动下载需要的依赖。运行完成后,Clojure开发环境即安装完成。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;手动安装&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;leiningen需要以项目为单位才能运行。比如你想运行一个hello.clj程序，如果&lt;br /&gt;
你通过leiningen来运行，则hello.clj需要在lein项目内，且设置为core，才能&lt;br /&gt;
运行,比较麻烦(这个问题在Maven中同样存在)。而通过手动安装可以解决这个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先下载&lt;a href=&quot;http://repo1.maven.org/maven2/org/clojure/clojure/1.5.1/clojure-1.5.1.zip&quot;&gt;Clojure&lt;/a&gt;, 目前稳定版本是1.5.1
&lt;/li&gt;
&lt;li&gt;解压到任意位置，其中最主要的文件就是clojure-1.5.1.jar
&lt;/li&gt;
&lt;li&gt;在path下编写脚本clj,输入如下内容
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;java -jar /home/ivan/soft/clojure-1.5.1/clojure-1.5.1.jar $&lt;span style=&quot;color: #268bd2;&quot;&gt;1&lt;/span&gt;
 &lt;span style=&quot;color: #586e75; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75; font-style: italic;&quot;&gt;clojure.jar&amp;#35831;&amp;#36755;&amp;#20837;&amp;#20320;&amp;#26412;&amp;#26426;&amp;#30340;&amp;#36335;&amp;#24452;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这样就可以执行单个的Clojure文件了&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;HelloWorld&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;REPL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;老掉牙的入门程序。如果你想体验Clojure。那么只需要在Shell中运行lein&lt;br /&gt;
repl。则会运行一个Clojure的REPL环境，你可以直接输入Clojure代码，REPL直&lt;br /&gt;
接反馈结果。试试输入如下代码&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
结果如图&lt;img src=&quot;assets/wpid-repl6.png&quot; alt=&quot;file/repl.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;运行单个文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;如果你想将Clojure代码保存到文件中去运行，那么将上面的代码保存到.clj结&lt;br /&gt;
尾的文件中，并在shell中运行如下命令即可&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;clj hello.clj
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;编辑器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;Clojure编辑器主要还是文本编辑器，比如emacs,vim等,大部分的文本编辑器都&lt;br /&gt;
有Clojure语言的支持。IDE的话，Intellij IDEA有&lt;br /&gt;
Clojure环境，不过速度太慢了。一般编写使用文本编辑器即可。&lt;br /&gt;
这里使用Emacs的clojure-mode作为开发环境。界面如图&lt;br /&gt;
&lt;img src=&quot;assets/wpid-emacs5.png&quot; alt=&quot;file/emacs.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1 环境搭建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1 通过Leiningen安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2 手动安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2 HelloWorld&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;2.1 REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;2.2 运行单个文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;2.3 编辑器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;环境搭建&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;Clojure是JVM上的一种语言，其语法是Lisp格式，所以称为是JVM上的Lisp方言。&lt;br /&gt;
所以其依赖于JDK。请确保你的机器上安装了JDK6+。Clojure的安装非常的简单。&lt;br /&gt;
可以分为两种方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过Leiningen安装
&lt;/li&gt;
&lt;li&gt;手动安装
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过Leiningen是比较普遍也很方便的方式。我们先通过Leiningen来安装。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;通过Leiningen安装&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;Leiningen和Maven比较类似，是Clojure语言的管理工具。其实它就是基于Maven&lt;br /&gt;
构建的。我们先来安装Leiningen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先下载&lt;a href=&quot;https://raw.github.com/technomancy/leiningen/stable/bin/lein&quot;&gt;lein script&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;将lein script放置到你的path下(linux下直接放到用户目录下即可)，保存文&lt;br /&gt;
  件名叫lein。
&lt;/li&gt;
&lt;li&gt;将其权限设置为可执行(chmod a+x lein)
&lt;/li&gt;
&lt;li&gt;打开shell，输入lein即可
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leiningen会自动下载需要的依赖。运行完成后,Clojure开发环境即安装完成。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;手动安装&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;leiningen需要以项目为单位才能运行。比如你想运行一个hello.clj程序，如果&lt;br /&gt;
你通过leiningen来运行，则hello.clj需要在lein项目内，且设置为core，才能&lt;br /&gt;
运行,比较麻烦(这个问题在Maven中同样存在)。而通过手动安装可以解决这个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先下载&lt;a href=&quot;http://repo1.maven.org/maven2/org/clojure/clojure/1.5.1/clojure-1.5.1.zip&quot;&gt;Clojure&lt;/a&gt;, 目前稳定版本是1.5.1
&lt;/li&gt;
&lt;li&gt;解压到任意位置，其中最主要的文件就是clojure-1.5.1.jar
&lt;/li&gt;
&lt;li&gt;在path下编写脚本clj,输入如下内容
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;java -jar /home/ivan/soft/clojure-1.5.1/clojure-1.5.1.jar $&lt;span style=&quot;color: #268bd2;&quot;&gt;1&lt;/span&gt;
 &lt;span style=&quot;color: #586e75; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #586e75; font-style: italic;&quot;&gt;clojure.jar&amp;#35831;&amp;#36755;&amp;#20837;&amp;#20320;&amp;#26412;&amp;#26426;&amp;#30340;&amp;#36335;&amp;#24452;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
这样就可以执行单个的Clojure文件了&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;HelloWorld&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;REPL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;老掉牙的入门程序。如果你想体验Clojure。那么只需要在Shell中运行lein&lt;br /&gt;
repl。则会运行一个Clojure的REPL环境，你可以直接输入Clojure代码，REPL直&lt;br /&gt;
接反馈结果。试试输入如下代码&lt;/p&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #859900;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;
结果如图&lt;img src=&quot;assets/wpid-repl6.png&quot; alt=&quot;file/repl.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;运行单个文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;如果你想将Clojure代码保存到文件中去运行，那么将上面的代码保存到.clj结&lt;br /&gt;
尾的文件中，并在shell中运行如下命令即可&lt;/p&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;clj hello.clj
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;编辑器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;Clojure编辑器主要还是文本编辑器，比如emacs,vim等,大部分的文本编辑器都&lt;br /&gt;
有Clojure语言的支持。IDE的话，Intellij IDEA有&lt;br /&gt;
Clojure环境，不过速度太慢了。一般编写使用文本编辑器即可。&lt;br /&gt;
这里使用Emacs的clojure-mode作为开发环境。界面如图&lt;br /&gt;
&lt;img src=&quot;assets/wpid-emacs5.png&quot; alt=&quot;file/emacs.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>[FAQ]什么是函数式接口</title>
        <link href="http://liyouhai.com/java-scala/faq%25e4%25bb%2580%25e4%25b9%2588%25e6%2598%25af%25e5%2587%25bd%25e6%2595%25b0%25e5%25bc%258f%25e6%258e%25a5%25e5%258f%25a3.html"/>
        <updated>2013-07-03T14:04:26+08:00</updated>
        <id>http://liyouhai.com//java-scala/faq%e4%bb%80%e4%b9%88%e6%98%af%e5%87%bd%e6%95%b0%e5%bc%8f%e6%8e%a5%e5%8f%a3</id>
        <content type="html">&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;一般来说，函数式接口是这样一种类型，它可以作为方法参数，而实际上真正的参数是其包含的方法。举例来说&lt;/span&gt;,forEach&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法签名如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;public void forEach(Consumer&amp;lt;? super T&amp;gt; consumer); &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;必须接受一个包含单个方法的&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;Consumer&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;实例。这个实例可以是一个&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;lambda&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;表达式。在这种情况下&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;lambda&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;表达式相当于只包含一个方法的接口，因为只有一个方法，所以调用方法清楚的知道要调用哪个方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;更精确点来说，函数式接口实际上就是只包含一个抽象方法的接口&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;请记住，是抽象方法。因为在&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;Java8&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;中，接口不再只包含抽象方法，还可以包含默认方法&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;。这就是为什么函数式接口一般被称为单一抽象方法接口&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;(SAM)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:14pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;下面是例子&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;根据上面的定义，下面的接口就是函数式接口：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;public interface Runnable { void run(); }&lt;br /&gt;
	public interface Callable&amp;lt;V&amp;gt; { V call() throws Exception; }&lt;br /&gt;
	public interface ActionListener { void actionPerformed(ActionEvent e); }&lt;br /&gt;
	public interface Comparator&amp;lt;T&amp;gt; { int compare(T o1, T o2); boolean equals(Object obj); } &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:14pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;语法点&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;虽然&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Comparator&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;定义了两个抽象方法，但它依然是函数式接口。因为其中的一个方法&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;equals&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;继承自&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Object&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;。继承自&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Object&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;的方法不算是接口自己定义的方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;当两个接口包含的类似如下的方法，情况就变得比较复杂了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;		&lt;span style=&quot;font-family:Courier New&quot;&gt;&lt;span style=&quot;font-size:10pt; background-color:white&quot;&gt;&lt;strong&gt;interface Foo1 { void bar(List&amp;lt;String&amp;gt; arg); }&lt;br /&gt;
		interface Foo2 { void bar(List arg); }&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;span style=&quot;background-color:white&quot;&gt;Foo1&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;和&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Foo2&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;包含的方法几乎相同，除了集合的类型。但是在&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;中，泛型在编译后是被擦除的，所以在编译后，这两个方法无法区分开。这种情况称为等价重载&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;(override-equivalent).&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;如果一个接口的多个父接口出现等价重载的情况，那么此接口需要定义一个方法覆盖所有继承的方法。在此例中，像如下的接口就会出现等价重载&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;:&lt;/p&gt;
&lt;p&gt;		&lt;span style=&quot;font-size:10pt&quot;&gt;&lt;strong&gt;interface Foo extends Foo1, Foo2 {}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;span style=&quot;font-family:微软雅黑; font-size:10pt; background-color:white&quot;&gt;此时方法需要定义如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;		&lt;span style=&quot;font-family:Courier New; font-size:10pt; background-color:white&quot;&gt;&lt;strong&gt;void bar(List arg);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&lt;img alt=&quot;&quot; src=&quot;assets/070313_1405_FAQ1.png&quot; /&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;一般来说，函数式接口是这样一种类型，它可以作为方法参数，而实际上真正的参数是其包含的方法。举例来说&lt;/span&gt;,forEach&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法签名如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;public void forEach(Consumer&amp;lt;? super T&amp;gt; consumer); &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;必须接受一个包含单个方法的&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;Consumer&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;实例。这个实例可以是一个&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;lambda&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;表达式。在这种情况下&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;lambda&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;表达式相当于只包含一个方法的接口，因为只有一个方法，所以调用方法清楚的知道要调用哪个方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;更精确点来说，函数式接口实际上就是只包含一个抽象方法的接口&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;请记住，是抽象方法。因为在&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;Java8&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;中，接口不再只包含抽象方法，还可以包含默认方法&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;。这就是为什么函数式接口一般被称为单一抽象方法接口&lt;/span&gt;&lt;span style=&quot;font-family:Tahoma; background-color:white&quot;&gt;(SAM)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:14pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;下面是例子&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;根据上面的定义，下面的接口就是函数式接口：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;public interface Runnable { void run(); }&lt;br /&gt;
	public interface Callable&amp;lt;V&amp;gt; { V call() throws Exception; }&lt;br /&gt;
	public interface ActionListener { void actionPerformed(ActionEvent e); }&lt;br /&gt;
	public interface Comparator&amp;lt;T&amp;gt; { int compare(T o1, T o2); boolean equals(Object obj); } &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:14pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;语法点&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;虽然&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Comparator&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;定义了两个抽象方法，但它依然是函数式接口。因为其中的一个方法&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;equals&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;继承自&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Object&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;。继承自&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Object&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;的方法不算是接口自己定义的方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;当两个接口包含的类似如下的方法，情况就变得比较复杂了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;		&lt;span style=&quot;font-family:Courier New&quot;&gt;&lt;span style=&quot;font-size:10pt; background-color:white&quot;&gt;&lt;strong&gt;interface Foo1 { void bar(List&amp;lt;String&amp;gt; arg); }&lt;br /&gt;
		interface Foo2 { void bar(List arg); }&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;span style=&quot;background-color:white&quot;&gt;Foo1&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;和&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Foo2&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;包含的方法几乎相同，除了集合的类型。但是在&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;中，泛型在编译后是被擦除的，所以在编译后，这两个方法无法区分开。这种情况称为等价重载&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;(override-equivalent).&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;如果一个接口的多个父接口出现等价重载的情况，那么此接口需要定义一个方法覆盖所有继承的方法。在此例中，像如下的接口就会出现等价重载&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;:&lt;/p&gt;
&lt;p&gt;		&lt;span style=&quot;font-size:10pt&quot;&gt;&lt;strong&gt;interface Foo extends Foo1, Foo2 {}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;span style=&quot;font-family:微软雅黑; font-size:10pt; background-color:white&quot;&gt;此时方法需要定义如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;		&lt;span style=&quot;font-family:Courier New; font-size:10pt; background-color:white&quot;&gt;&lt;strong&gt;void bar(List arg);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&lt;img alt=&quot;&quot; src=&quot;assets/070313_1405_FAQ1.png&quot; /&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>[FAQ]为什么引入lambda表达式</title>
        <link href="http://liyouhai.com/java-scala/faq%25e4%25b8%25ba%25e4%25bb%2580%25e4%25b9%2588%25e5%25bc%2595%25e5%2585%25a5lambda%25e8%25a1%25a8%25e8%25be%25be%25e5%25bc%258f.html"/>
        <updated>2013-07-02T12:47:55+08:00</updated>
        <id>http://liyouhai.com//java-scala/faq%e4%b8%ba%e4%bb%80%e4%b9%88%e5%bc%95%e5%85%a5lambda%e8%a1%a8%e8%be%be%e5%bc%8f</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;    Lambda表达式&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;闭包&lt;/span&gt;)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在很多现代化的编程语言中很常见。在&lt;/span&gt;Java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;平台上引入&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式的一个最主要原因是方便多线程的处理集合。目前，对于&lt;/span&gt;list&lt;span style=&quot;font-family:微软雅黑&quot;&gt;和&lt;/span&gt;set&lt;span style=&quot;font-family:微软雅黑&quot;&gt;等集合类典型的操作方式是使用迭代器。如果需要并行的处理集合，需要编写客户端代码来处理，而不是集合本身处理。&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在&lt;/span&gt;Java8&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中，引入闭包的目的就是为了给集合提供函数式的方法，方便处理。这样所带来的好处是&lt;/span&gt;,&lt;span style=&quot;font-family:微软雅黑&quot;&gt;集合能够自己组织他们的元素，而不需要客户端代码来处理。但是，为了使得客户端代码能够使用这一改进，必须给集合添加函数式方法。当前通用的做法是使用匿名类。但是声明匿名类带来了过多的标准化代码。&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;举例来说，&lt;/span&gt;forEach&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法接受一个&lt;/span&gt;Consumer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;接口的实例并为每个元素调用它的&lt;/span&gt;accept&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法：&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-left: 27pt&quot;&gt;&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;interface Consumer&amp;lt;T&amp;gt; { void accept(T t); } &lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;假设我们要使用&lt;/span&gt;forEach&lt;span style=&quot;font-family:微软雅黑&quot;&gt;调换&lt;/span&gt;java.awt.Point&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的集合的每个元素的&lt;/span&gt;x&lt;span style=&quot;font-family:微软雅黑&quot;&gt;与&lt;/span&gt;y&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的坐标。使用&lt;/span&gt;Consumer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的匿名内部类&lt;/span&gt;,&lt;span style=&quot;font-family:微软雅黑&quot;&gt;我们需要编写类似如下的代码&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-left: 27pt&quot;&gt;&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;pointList.forEach(new Consumer() { &lt;br /&gt;    public void accept(Point p) { &lt;br /&gt;        p.move(p.y, p.x);&lt;br /&gt;    } &lt;br /&gt;});&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;而如果使用&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式，我们只需要这样&lt;/span&gt;:&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-left: 27pt&quot;&gt;&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;pointList.forEach(p -&amp;gt; p.move(p.y, p.x)); &lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/070213_1251_FAQlambd1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;    Lambda表达式&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;闭包&lt;/span&gt;)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在很多现代化的编程语言中很常见。在&lt;/span&gt;Java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;平台上引入&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式的一个最主要原因是方便多线程的处理集合。目前，对于&lt;/span&gt;list&lt;span style=&quot;font-family:微软雅黑&quot;&gt;和&lt;/span&gt;set&lt;span style=&quot;font-family:微软雅黑&quot;&gt;等集合类典型的操作方式是使用迭代器。如果需要并行的处理集合，需要编写客户端代码来处理，而不是集合本身处理。&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在&lt;/span&gt;Java8&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中，引入闭包的目的就是为了给集合提供函数式的方法，方便处理。这样所带来的好处是&lt;/span&gt;,&lt;span style=&quot;font-family:微软雅黑&quot;&gt;集合能够自己组织他们的元素，而不需要客户端代码来处理。但是，为了使得客户端代码能够使用这一改进，必须给集合添加函数式方法。当前通用的做法是使用匿名类。但是声明匿名类带来了过多的标准化代码。&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;举例来说，&lt;/span&gt;forEach&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法接受一个&lt;/span&gt;Consumer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;接口的实例并为每个元素调用它的&lt;/span&gt;accept&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法：&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-left: 27pt&quot;&gt;&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;interface Consumer&amp;lt;T&amp;gt; { void accept(T t); } &lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;假设我们要使用&lt;/span&gt;forEach&lt;span style=&quot;font-family:微软雅黑&quot;&gt;调换&lt;/span&gt;java.awt.Point&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的集合的每个元素的&lt;/span&gt;x&lt;span style=&quot;font-family:微软雅黑&quot;&gt;与&lt;/span&gt;y&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的坐标。使用&lt;/span&gt;Consumer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的匿名内部类&lt;/span&gt;,&lt;span style=&quot;font-family:微软雅黑&quot;&gt;我们需要编写类似如下的代码&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-left: 27pt&quot;&gt;&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;pointList.forEach(new Consumer() { &lt;br /&gt;    public void accept(Point p) { &lt;br /&gt;        p.move(p.y, p.x);&lt;br /&gt;    } &lt;br /&gt;});&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:black&quot;&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;而如果使用&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式，我们只需要这样&lt;/span&gt;:&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-left: 27pt&quot;&gt;&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;pointList.forEach(p -&amp;gt; p.move(p.y, p.x)); &lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/070213_1251_FAQlambd1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>[FAQ]什么是lambda表达式</title>
        <link href="http://liyouhai.com/java-scala/faq%25e4%25bb%2580%25e4%25b9%2588%25e6%2598%25aflambda%25e8%25a1%25a8%25e8%25be%25be%25e5%25bc%258f.html"/>
        <updated>2013-07-01T14:18:54+08:00</updated>
        <id>http://liyouhai.com//java-scala/faq%e4%bb%80%e4%b9%88%e6%98%aflambda%e8%a1%a8%e8%be%be%e5%bc%8f</id>
        <content type="html">&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在一般数学计算中，&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式就是函数：根据部分或所有输入的组合，返回相应的值。&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式作为函数式思想被引入到了&lt;/span&gt;Java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中。熟悉&lt;/span&gt;Java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;语法的朋友可以把&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式看做是可以接受参数，返回类型，不可修改的，语法简洁的匿名方法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑&quot;&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;(&lt;em&gt;parameters&lt;/em&gt;) -&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;或者&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;(&lt;em&gt;parameters&lt;/em&gt;) -&amp;gt; { &lt;em&gt;statements;&lt;/em&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;1. (int x, int y) -&amp;gt; x + y // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;接受两个整数，并返回两数的和&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;2. (x, y) -&amp;gt; x - y // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;接受两个数，并返回差值&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;3. () -&amp;gt; 42 // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;不接受参数，直接返回&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;42&lt;br /&gt;
	4. (String s) -&amp;gt; System.out.println(s) // &lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;接受字符串，打印标准输出，没有返回值&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;5. x -&amp;gt; 2 * x // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;接受数字，并返回该值的&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;倍&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;6. c -&amp;gt; { int s = c.size(); c.clear(); return s; } // &lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;接受一个集合。清空该集合，返回该集合未清空前的长度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;语法注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;可以明确的指出参数类型（比如&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;,1,4&lt;span style=&quot;font-family:微软雅黑&quot;&gt;）也可以不明确指出&lt;/span&gt;(2,5,6).&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在单个&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式中，无论你明不明确指出参数类型都是没有关系的。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:white&quot;&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式的表达式体可以是个语句块&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;被大括号包围，例如&lt;/span&gt;:6)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;或者是个表达式&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:1-5)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;。语句块式的表达式体能返回值或者不返回。使用或省略&lt;/span&gt;return&lt;span style=&quot;font-family:微软雅黑&quot;&gt;关键字的规则和普通的方法体相同。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;如果表达式体是个表达式，那么它也可以返回值&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:1,2,3,5)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;，也可以不返回&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:4)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;如果表达式只有一个参数那么括号可以省略&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:5,6)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;例子&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;6&lt;span style=&quot;font-family:微软雅黑&quot;&gt;后的注释说此&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式需要一个集合作为参数。而实际上，根据上下文环境的不同，此表达式不限于集合参数，只要参数包含&lt;/span&gt;size&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法和&lt;/span&gt;clear&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法，并且接受合适的参数且返回合适的类型即可。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:10pt&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;img src=&quot;assets/5f547f627dde99bf9f86e1d6716d7401.png&quot; /&gt;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&lt;br /&gt;
	&lt;span style=&quot;color:black&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在一般数学计算中，&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式就是函数：根据部分或所有输入的组合，返回相应的值。&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式作为函数式思想被引入到了&lt;/span&gt;Java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中。熟悉&lt;/span&gt;Java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;语法的朋友可以把&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式看做是可以接受参数，返回类型，不可修改的，语法简洁的匿名方法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑&quot;&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;(&lt;em&gt;parameters&lt;/em&gt;) -&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;或者&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:Courier New; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;(&lt;em&gt;parameters&lt;/em&gt;) -&amp;gt; { &lt;em&gt;statements;&lt;/em&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;1. (int x, int y) -&amp;gt; x + y // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;接受两个整数，并返回两数的和&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;2. (x, y) -&amp;gt; x - y // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;接受两个数，并返回差值&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;3. () -&amp;gt; 42 // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;不接受参数，直接返回&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;42&lt;br /&gt;
	4. (String s) -&amp;gt; System.out.println(s) // &lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;接受字符串，打印标准输出，没有返回值&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;5. x -&amp;gt; 2 * x // &lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;接受数字，并返回该值的&lt;/span&gt;&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;倍&lt;/span&gt;&lt;br /&gt;
	&lt;span style=&quot;font-family:Courier New; background-color:white&quot;&gt;6. c -&amp;gt; { int s = c.size(); c.clear(); return s; } // &lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;接受一个集合。清空该集合，返回该集合未清空前的长度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:10pt&quot;&gt;&lt;span style=&quot;background-color:white&quot;&gt;&lt;strong&gt;语法注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;可以明确的指出参数类型（比如&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;,1,4&lt;span style=&quot;font-family:微软雅黑&quot;&gt;）也可以不明确指出&lt;/span&gt;(2,5,6).&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在单个&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式中，无论你明不明确指出参数类型都是没有关系的。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:white&quot;&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式的表达式体可以是个语句块&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;被大括号包围，例如&lt;/span&gt;:6)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;或者是个表达式&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:1-5)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;。语句块式的表达式体能返回值或者不返回。使用或省略&lt;/span&gt;return&lt;span style=&quot;font-family:微软雅黑&quot;&gt;关键字的规则和普通的方法体相同。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;如果表达式体是个表达式，那么它也可以返回值&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:1,2,3,5)&lt;span style=&quot;font-family:微软雅黑&quot;&gt;，也可以不返回&lt;/span&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:4)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;如果表达式只有一个参数那么括号可以省略&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;(&lt;span style=&quot;font-family:微软雅黑&quot;&gt;例如&lt;/span&gt;:5,6)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;li&gt;
		&lt;span style=&quot;color:black; font-size:10pt&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family:微软雅黑; background-color:white&quot;&gt;例子&lt;/span&gt;&lt;span style=&quot;background-color:white&quot;&gt;6&lt;span style=&quot;font-family:微软雅黑&quot;&gt;后的注释说此&lt;/span&gt;lambda&lt;span style=&quot;font-family:微软雅黑&quot;&gt;表达式需要一个集合作为参数。而实际上，根据上下文环境的不同，此表达式不限于集合参数，只要参数包含&lt;/span&gt;size&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法和&lt;/span&gt;clear&lt;span style=&quot;font-family:微软雅黑&quot;&gt;方法，并且接受合适的参数且返回合适的类型即可。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	&lt;span style=&quot;color:black; font-family:微软雅黑; font-size:10pt&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;img src=&quot;assets/5f547f627dde99bf9f86e1d6716d7401.png&quot; /&gt;&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Java&amp;Scala比较---设计模式(Singleton)</title>
        <link href="http://liyouhai.com/java-scala/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/javascala%25e6%25af%2594%25e8%25be%2583-%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258fsingleton.html"/>
        <updated>2013-03-31T03:53:39+08:00</updated>
        <id>http://liyouhai.com//java-scala/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/javascala%e6%af%94%e8%be%83-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8fsingleton</id>
        <content type="html">&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			单例模式在Scala中就是一个默认实现的模式。 对于Java中的单例模式，请看&lt;a href=&quot;http://www.ivanpig.com/blog/?p=75&quot; style=&quot;text-decoration: initial; color: rgb(84, 137, 222);&quot;&gt;http://www.ivanpig.com/blog/?p=75&lt;/a&gt;。 虽然从代码上看，单例模式很简单。但是涉及到多线程问题，问题会很复杂。 Scala中完全不用担心这个问题。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Single&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;say&lt;/span&gt;(){
        println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;)
    }

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;){
        Single.say()
        Single.say()
    }
}

&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			搞定。乍一看怎么也不像是单例模式,更像是静态方法的调用。我们来看一下这段代码实际的执行流程就明白了
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scalac Single.scala
javap -verbose Single$
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这里在反编译的是Single&lt;span aria-readonly=&quot;true&quot; class=&quot;MathJax&quot; role=&quot;textbox&quot; style=&quot;display: inline; font-family: serif; text-indent: 0px; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; border: 0px; padding: 0px; margin: 0px;&quot;&gt;&lt;nobr style=&quot;border: 0px; padding: 0px; margin: 0px; max-width: none; max-height: none; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;math&quot; id=&quot;MathJax-Span-75&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span style=&quot;display: inline-block; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, MathJax_Size1, MathJax_AMS; position: relative; width: 26.728em; height: 0px; font-size: 20px;&quot;&gt;&lt;span style=&quot;border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; position: absolute; top: -2.699em; left: 0em; clip: rect(1.749em 1000em 3.053em -0.45em);&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-76&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-77&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-78&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-79&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;而&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-80&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-81&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-82&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;不&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-83&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-84&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-85&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-86&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-87&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-88&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-89&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-90&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-91&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-92&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-93&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-94&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-95&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-96&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-97&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-98&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-99&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-100&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;因&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-101&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-102&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-103&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-104&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-105&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-106&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-107&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-108&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-109&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-110&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-111&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-112&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;编&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-113&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-114&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-115&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;译&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-116&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-117&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-118&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;生&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-119&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-120&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-121&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-122&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-123&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-124&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-125&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-126&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-127&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-128&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-129&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-130&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-131&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-132&quot; style=&quot;display: inline; border: 0px; padding: 0px 0px 0px 0.167em; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-133&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-134&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-135&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-136&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-137&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-138&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-139&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;和&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-140&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-141&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-142&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-143&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-144&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-145&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;.class这两个文件。而实际代码在Single$.class中，Single.class只是对Single$.class的一个调用。 反编译得到
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
......
{
public static final Single$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:   new     #2; //class Single$
   3:   invokespecial   #12; //Method &amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
   6:   return

public void say();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:   getstatic       #18; //Field scala/Predef$.MODULE$:Lscala/Predef$;
   3:   ldc     #20; //String Hello
   5:   invokevirtual   #24; //Method scala/Predef$.println:(Ljava/lang/Object;)
V
   8:   return
  LocalVariableTable:
   Start  Length  Slot  Name   Signature
   0      9      0    this       LSingle$;

  LineNumberTable:
   line 6: 0


public void main(java.lang.String[]);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:   aload_0
   1:   invokevirtual   #29; //Method say:()V
   4:   aload_0
   5:   invokevirtual   #29; //Method say:()V
   8:   return
  LocalVariableTable:
   Start  Length  Slot  Name   Signature
   0      9      0    this       LSingle$;
   0      9      1    args       [Ljava/lang/String;

  LineNumberTable:
   line 10: 0
   line 11: 4


}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			从这里我们就可以看出上面这段Scala代码所对应的Java代码了。 首先,有一个Single$类型的static final的对象。并且有一个静态化块来初始化它。所以只有在第一次调用时才会实例化此对象。在main方法中只是简单的调用而已。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			单例模式在Scala中就是一个默认实现的模式。 对于Java中的单例模式，请看&lt;a href=&quot;http://www.ivanpig.com/blog/?p=75&quot; style=&quot;text-decoration: initial; color: rgb(84, 137, 222);&quot;&gt;http://www.ivanpig.com/blog/?p=75&lt;/a&gt;。 虽然从代码上看，单例模式很简单。但是涉及到多线程问题，问题会很复杂。 Scala中完全不用担心这个问题。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Single&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;say&lt;/span&gt;(){
        println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;)
    }

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;){
        Single.say()
        Single.say()
    }
}

&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			搞定。乍一看怎么也不像是单例模式,更像是静态方法的调用。我们来看一下这段代码实际的执行流程就明白了
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scalac Single.scala
javap -verbose Single$
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这里在反编译的是Single&lt;span aria-readonly=&quot;true&quot; class=&quot;MathJax&quot; role=&quot;textbox&quot; style=&quot;display: inline; font-family: serif; text-indent: 0px; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; border: 0px; padding: 0px; margin: 0px;&quot;&gt;&lt;nobr style=&quot;border: 0px; padding: 0px; margin: 0px; max-width: none; max-height: none; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;math&quot; id=&quot;MathJax-Span-75&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span style=&quot;display: inline-block; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, MathJax_Size1, MathJax_AMS; position: relative; width: 26.728em; height: 0px; font-size: 20px;&quot;&gt;&lt;span style=&quot;border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; position: absolute; top: -2.699em; left: 0em; clip: rect(1.749em 1000em 3.053em -0.45em);&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-76&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-77&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-78&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-79&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;而&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-80&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-81&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-82&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;不&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-83&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-84&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-85&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-86&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-87&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-88&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-89&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-90&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-91&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-92&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-93&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-94&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-95&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-96&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-97&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-98&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-99&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-100&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;因&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-101&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-102&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-103&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-104&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-105&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-106&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-107&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-108&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-109&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-110&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-111&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-112&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;编&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-113&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-114&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-115&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;译&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-116&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-117&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-118&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;生&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-119&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-120&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-121&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-122&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-123&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-124&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-125&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-126&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-127&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-128&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-129&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-130&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-131&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-132&quot; style=&quot;display: inline; border: 0px; padding: 0px 0px 0px 0.167em; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-133&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-134&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-135&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-136&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-137&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-138&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-139&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Main, serif;&quot;&gt;和&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-140&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-141&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-142&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-143&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-144&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mi&quot; id=&quot;MathJax-Span-145&quot; style=&quot;display: inline; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; font-family: MathJax_Math; font-style: italic;&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;/span&gt;.class这两个文件。而实际代码在Single$.class中，Single.class只是对Single$.class的一个调用。 反编译得到
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
......
{
public static final Single$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:   new     #2; //class Single$
   3:   invokespecial   #12; //Method &amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
   6:   return

public void say();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:   getstatic       #18; //Field scala/Predef$.MODULE$:Lscala/Predef$;
   3:   ldc     #20; //String Hello
   5:   invokevirtual   #24; //Method scala/Predef$.println:(Ljava/lang/Object;)
V
   8:   return
  LocalVariableTable:
   Start  Length  Slot  Name   Signature
   0      9      0    this       LSingle$;

  LineNumberTable:
   line 6: 0


public void main(java.lang.String[]);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:   aload_0
   1:   invokevirtual   #29; //Method say:()V
   4:   aload_0
   5:   invokevirtual   #29; //Method say:()V
   8:   return
  LocalVariableTable:
   Start  Length  Slot  Name   Signature
   0      9      0    this       LSingle$;
   0      9      1    args       [Ljava/lang/String;

  LineNumberTable:
   line 10: 0
   line 11: 4


}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			从这里我们就可以看出上面这段Scala代码所对应的Java代码了。 首先,有一个Single$类型的static final的对象。并且有一个静态化块来初始化它。所以只有在第一次调用时才会实例化此对象。在main方法中只是简单的调用而已。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第十五章 注解</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%258d%2581%25e4%25ba%2594%25e7%25ab%25a0-%25e6%25b3%25a8%25e8%25a7%25a3.html"/>
        <updated>2013-03-18T22:52:39+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%8d%81%e4%ba%94%e7%ab%a0-%e6%b3%a8%e8%a7%a3</id>
        <content type="html">&lt;h2 id=&quot;sec-16&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;16&lt;/span&gt;&amp;nbsp;注解&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-16&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.1&lt;/span&gt;&amp;nbsp;编写四个JUnit测试用例，分别使用带或不带某个参数的@Test注解。用JUnit执行这些测试&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; org.junit.Test

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ScalaTest&lt;/span&gt; {

  @Test
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;test1&lt;/span&gt;(){
    print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;)
  }

  @Test(timeout = 1L)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;test2&lt;/span&gt;(){
    print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test2&amp;quot;&lt;/span&gt;)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.2&lt;/span&gt;&amp;nbsp;创建一个类的示例，展示注解可以出现的所有位置。用@deprecated作为你的示例注解。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
@deprecated
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{

  @deprecated
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = _;

  @deprecated(message = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;unuse&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;hello&lt;/span&gt;(){
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)
  }
}

@deprecated
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Test()
  t.hello()
  t.t
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.3&lt;/span&gt;&amp;nbsp;Scala类库中的哪些注解用到了元注解@param,@field,@getter,@setter,@beanGetter或@beanSetter?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			看Scala注解的源码就OK了
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.4&lt;/span&gt;&amp;nbsp;编写一个Scala方法sum,带有可变长度的整型参数，返回所有参数之和。从Java调用该方法。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; annotation.varargs

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{

  @varargs
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int*&lt;/span&gt;)={
    n.sum
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Hello&lt;/span&gt; {

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;){
        &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;();
        System.out.println(t.sum(1,2,3));
    }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.5&lt;/span&gt;&amp;nbsp;编写一个返回包含某文件所有行的字符串的方法。从Java调用该方法。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;read&lt;/span&gt;()={
    Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Hello&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;){
        &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;();
        System.out.println(t.read());
    }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.6&lt;/span&gt;&amp;nbsp;编写一个Scala对象，该对象带有一个易失(volatile)的Boolean字段。让某一个线程睡眠一段时间，之后将该字段设为true，打印消息，然后退出。而另一个线程不停的检查该字段是否为true。如果是，它将打印一个消息并退出。如果不是，则它将短暂睡眠，然后重试。如果变量不是易失的，会发生什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这里只有一个线程修改Boolean字段，所以字段是否为volatile应该是没有区别的
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.actors.Actor

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;obj&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Obj&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Actor&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;act&lt;/span&gt;() {
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T1 is waiting&amp;quot;&lt;/span&gt;)
    Thread.sleep(5000)
    obj.flag = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;true&lt;/span&gt;
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T1 set flag = true&amp;quot;&lt;/span&gt;)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;obj&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Obj&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Actor&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;act&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;true&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (f){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(obj.flag){
        println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T2 is end&amp;quot;&lt;/span&gt;)
        f = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
      }&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt;{
        println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T2 is waiting&amp;quot;&lt;/span&gt;)
        Thread.sleep(1000)
      }
    }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Obj&lt;/span&gt;{
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//  &lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;@volatile&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flag&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;obj&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Obj()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; T1(obj)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t2&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; T2(obj)
    t1.start()
    t2.start()
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.7&lt;/span&gt;&amp;nbsp;给出一个示例，展示如果方法可被重写，则尾递归优化为非法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; annotation.tailrec

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{
  @tailrec
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sum2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;xs&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;partial&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (xs.isEmpty) partial &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; sum2(xs.tail,xs.head + partial)
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			编译报错,修改如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; annotation.tailrec

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  @tailrec
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sum2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;xs&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;partial&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (xs.isEmpty) partial &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; sum2(xs.tail,xs.head + partial)
  }

  println(sum2(1 to 1000000,0))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.8&lt;/span&gt;&amp;nbsp;将allDifferent方法添加到对象，编译并检查字节码。@specialized注解产生了哪些方法?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;specialized&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;T]&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;z&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;) = x != y &amp;amp;&amp;amp; x!= z &amp;amp;&amp;amp; y != z
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			javap Test$得到
		&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test$&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Object&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test$&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;MODULE$&lt;/span&gt;;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; {};
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Object&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Object&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Ob&lt;/span&gt;
&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ject&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mZc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mBc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;byte&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;byte&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;byte&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mCc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;char&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;char&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;char&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mDc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;double&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;double&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;double&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mFc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;float&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;float&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;float&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mIc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mJc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;long&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;long&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;long&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mSc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;short&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;short&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;short&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mVc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;runtime&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BoxedUnit&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;runtime&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bo&lt;/span&gt;
&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;xedUnit&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;runtime&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BoxedUnit&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.9&lt;/span&gt;&amp;nbsp;Range.foreach方法被注解为@specialized(Unit)。为什么？通过以下命令检查字节码:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-9&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
javap -classpath /path/to/scala/lib/scala-library.jar scala.collection.immutable.Range
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			并考虑Function1上的@specialized注解。点击Scaladoc中的Function1.scala链接进行查看 首先来看Function1的源码
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
......
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Function1&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;specialized&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Long&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Float&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Double&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;, scala.AnyRef*/&lt;/span&gt;) &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;-T1&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@specialized&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Unit&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Float&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Long&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Double&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;, scala.AnyRef*/&lt;/span&gt;) &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+R]&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef&lt;/span&gt; { self =&amp;gt;
  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/** &lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Apply the body of this function to the argument.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   *  @return   the result of function application.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   */&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v1&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;R&lt;/span&gt;
......
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			可以看到Function1参数可以是scala.Int,scala.Long,scala.Float,scala.Double，返回值可以是scala.Unit,scala.Boolean,scala.Int,scala.Float,scala.Long,scala.Double 再来看Range.foreach的源码
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
...... 
@inline &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;foreach&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;specialized&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Unit&lt;/span&gt;) &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;U]&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int =&amp;gt; U&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (validateRangeBoundaries(f)) {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = start
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;terminal&lt;/span&gt; = terminalElement
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;step&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.step
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (i != terminal) {
        f(i)
        i += step
      }
    }
  }
......
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			首先此方法是没有返回值的，也就是Unit。而Function1的返回值可以是scala.Unit,scala.Boolean,scala.Int,scala.Float,scala.Long,scala.Double 如果不限定@specialized(Unit),则Function1可能返回其他类型，但是此方法体根本就不返回，即使设置了也无法获得返回值
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.10&lt;/span&gt;&amp;nbsp;添加assert(n &amp;gt;= 0)到factorial方法。在启用断言的情况下编译并校验factorial(-1)会抛异常。在禁用断言的情况下编译。会发生什么？用javap检查该断言调用&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;factorial&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    assert(n &amp;gt; 0)
    n
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    factorial(-1)
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			编译报错
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
Exception in thread &amp;quot;main&amp;quot; java.lang.AssertionError: assertion failed
        at scala.Predef$.assert(Predef.scala:165)
        at Test$.factorial(Test.scala:6)
        at Test$.main(Test.scala:11)
        at Test.main(Test.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			禁用assert
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
-Xelide-below 2011
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			反编译此类javap -c Test$ 得到
		&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
......
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt; factorial(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;);
  &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;Code&lt;/span&gt;:
   0:   getstatic       #19; &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Field scala/Predef$.MODULE$:Lscala/Predef$;&lt;/span&gt;
   3:   iload_1
   4:   iconst_0
   5:   if_icmple       12
   8:   iconst_1
   9:   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;goto&lt;/span&gt;    13
   12:  iconst_0
   13:  invokevirtual   #23; &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Method scala/Predef$.assert:(Z)V&lt;/span&gt;
   16:  iload_1
   17:  ireturn
......&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;h2 id=&quot;sec-16&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;16&lt;/span&gt;&amp;nbsp;注解&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-16&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.1&lt;/span&gt;&amp;nbsp;编写四个JUnit测试用例，分别使用带或不带某个参数的@Test注解。用JUnit执行这些测试&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; org.junit.Test

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ScalaTest&lt;/span&gt; {

  @Test
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;test1&lt;/span&gt;(){
    print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;)
  }

  @Test(timeout = 1L)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;test2&lt;/span&gt;(){
    print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test2&amp;quot;&lt;/span&gt;)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.2&lt;/span&gt;&amp;nbsp;创建一个类的示例，展示注解可以出现的所有位置。用@deprecated作为你的示例注解。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
@deprecated
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{

  @deprecated
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = _;

  @deprecated(message = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;unuse&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;hello&lt;/span&gt;(){
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)
  }
}

@deprecated
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Test()
  t.hello()
  t.t
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.3&lt;/span&gt;&amp;nbsp;Scala类库中的哪些注解用到了元注解@param,@field,@getter,@setter,@beanGetter或@beanSetter?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			看Scala注解的源码就OK了
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.4&lt;/span&gt;&amp;nbsp;编写一个Scala方法sum,带有可变长度的整型参数，返回所有参数之和。从Java调用该方法。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; annotation.varargs

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{

  @varargs
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int*&lt;/span&gt;)={
    n.sum
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Hello&lt;/span&gt; {

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;){
        &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;();
        System.out.println(t.sum(1,2,3));
    }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.5&lt;/span&gt;&amp;nbsp;编写一个返回包含某文件所有行的字符串的方法。从Java调用该方法。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;read&lt;/span&gt;()={
    Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Hello&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;){
        &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;();
        System.out.println(t.read());
    }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.6&lt;/span&gt;&amp;nbsp;编写一个Scala对象，该对象带有一个易失(volatile)的Boolean字段。让某一个线程睡眠一段时间，之后将该字段设为true，打印消息，然后退出。而另一个线程不停的检查该字段是否为true。如果是，它将打印一个消息并退出。如果不是，则它将短暂睡眠，然后重试。如果变量不是易失的，会发生什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这里只有一个线程修改Boolean字段，所以字段是否为volatile应该是没有区别的
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.actors.Actor

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;obj&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Obj&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Actor&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;act&lt;/span&gt;() {
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T1 is waiting&amp;quot;&lt;/span&gt;)
    Thread.sleep(5000)
    obj.flag = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;true&lt;/span&gt;
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T1 set flag = true&amp;quot;&lt;/span&gt;)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;obj&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Obj&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Actor&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;act&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;true&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (f){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(obj.flag){
        println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T2 is end&amp;quot;&lt;/span&gt;)
        f = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
      }&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt;{
        println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;T2 is waiting&amp;quot;&lt;/span&gt;)
        Thread.sleep(1000)
      }
    }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Obj&lt;/span&gt;{
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//  &lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;@volatile&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flag&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;obj&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Obj()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; T1(obj)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t2&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; T2(obj)
    t1.start()
    t2.start()
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.7&lt;/span&gt;&amp;nbsp;给出一个示例，展示如果方法可被重写，则尾递归优化为非法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; annotation.tailrec

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test&lt;/span&gt;{
  @tailrec
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sum2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;xs&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;partial&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (xs.isEmpty) partial &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; sum2(xs.tail,xs.head + partial)
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			编译报错,修改如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; annotation.tailrec

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  @tailrec
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sum2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;xs&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;partial&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (xs.isEmpty) partial &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; sum2(xs.tail,xs.head + partial)
  }

  println(sum2(1 to 1000000,0))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.8&lt;/span&gt;&amp;nbsp;将allDifferent方法添加到对象，编译并检查字节码。@specialized注解产生了哪些方法?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;specialized&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;T]&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;z&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;) = x != y &amp;amp;&amp;amp; x!= z &amp;amp;&amp;amp; y != z
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			javap Test$得到
		&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test$&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Object&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Test$&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;MODULE$&lt;/span&gt;;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;static&lt;/span&gt; {};
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Object&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Object&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;java&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Ob&lt;/span&gt;
&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ject&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mZc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mBc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;byte&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;byte&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;byte&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mCc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;char&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;char&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;char&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mDc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;double&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;double&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;double&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mFc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;float&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;float&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;float&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mIc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mJc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;long&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;long&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;long&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mSc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;short&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;short&lt;/span&gt;, &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;short&lt;/span&gt;);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;allDifferent$mVc$sp&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;runtime&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BoxedUnit&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;runtime&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bo&lt;/span&gt;
&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;xedUnit&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;runtime&lt;/span&gt;.&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BoxedUnit&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.9&lt;/span&gt;&amp;nbsp;Range.foreach方法被注解为@specialized(Unit)。为什么？通过以下命令检查字节码:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-9&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
javap -classpath /path/to/scala/lib/scala-library.jar scala.collection.immutable.Range
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			并考虑Function1上的@specialized注解。点击Scaladoc中的Function1.scala链接进行查看 首先来看Function1的源码
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
......
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Function1&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;specialized&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Long&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Float&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Double&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;, scala.AnyRef*/&lt;/span&gt;) &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;-T1&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@specialized&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Unit&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Float&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Long&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;scala.Double&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;, scala.AnyRef*/&lt;/span&gt;) &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+R]&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef&lt;/span&gt; { self =&amp;gt;
  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/** &lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Apply the body of this function to the argument.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   *  @return   the result of function application.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   */&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v1&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;R&lt;/span&gt;
......
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			可以看到Function1参数可以是scala.Int,scala.Long,scala.Float,scala.Double，返回值可以是scala.Unit,scala.Boolean,scala.Int,scala.Float,scala.Long,scala.Double 再来看Range.foreach的源码
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
...... 
@inline &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;foreach&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;specialized&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Unit&lt;/span&gt;) &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;U]&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int =&amp;gt; U&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (validateRangeBoundaries(f)) {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = start
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;terminal&lt;/span&gt; = terminalElement
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;step&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.step
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (i != terminal) {
        f(i)
        i += step
      }
    }
  }
......
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			首先此方法是没有返回值的，也就是Unit。而Function1的返回值可以是scala.Unit,scala.Boolean,scala.Int,scala.Float,scala.Long,scala.Double 如果不限定@specialized(Unit),则Function1可能返回其他类型，但是此方法体根本就不返回，即使设置了也无法获得返回值
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-16-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-16-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;16.10&lt;/span&gt;&amp;nbsp;添加assert(n &amp;gt;= 0)到factorial方法。在启用断言的情况下编译并校验factorial(-1)会抛异常。在禁用断言的情况下编译。会发生什么？用javap检查该断言调用&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-16-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;factorial&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    assert(n &amp;gt; 0)
    n
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    factorial(-1)
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			编译报错
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
Exception in thread &amp;quot;main&amp;quot; java.lang.AssertionError: assertion failed
        at scala.Predef$.assert(Predef.scala:165)
        at Test$.factorial(Test.scala:6)
        at Test$.main(Test.scala:11)
        at Test.main(Test.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			禁用assert
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
-Xelide-below 2011
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			反编译此类javap -c Test$ 得到
		&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
......
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt; factorial(&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;int&lt;/span&gt;);
  &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;Code&lt;/span&gt;:
   0:   getstatic       #19; &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Field scala/Predef$.MODULE$:Lscala/Predef$;&lt;/span&gt;
   3:   iload_1
   4:   iconst_0
   5:   if_icmple       12
   8:   iconst_1
   9:   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;goto&lt;/span&gt;    13
   12:  iconst_0
   13:  invokevirtual   #23; &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Method scala/Predef$.assert:(Z)V&lt;/span&gt;
   16:  iload_1
   17:  ireturn
......&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第十四章 模式匹配和样例类</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%258d%2581%25e5%259b%259b%25e7%25ab%25a0-%25e6%25a8%25a1%25e5%25bc%258f%25e5%258c%25b9%25e9%2585%258d%25e5%2592%258c%25e6%25a0%25b7%25e4%25be%258b%25e7%25b1%25bb.html"/>
        <updated>2013-03-10T14:42:39+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%8d%81%e5%9b%9b%e7%ab%a0-%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d%e5%92%8c%e6%a0%b7%e4%be%8b%e7%b1%bb</id>
        <content type="html">&lt;h2 id=&quot;sec-15&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;15&lt;/span&gt;&amp;nbsp;模式匹配和样例类&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-15&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.1&lt;/span&gt;&amp;nbsp;JDK发行包有一个src.zip文件包含了JDK的大多数源代码。解压并搜索样例标签(用正则表达式case [^:]+:)。然后查找以//开头并包含[Ff]alls?thr的注释，捕获类似// Falls through或// just fall thru这样的注释。假定JDK的程序员们遵守Java编码习惯，在该写注释的地方写下了这些注释，有多少百分比的样例是会掉入到下一个分支的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			没读懂题意。。。。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.2&lt;/span&gt;&amp;nbsp;利用模式匹配，编写一个swap函数，接受一个整数的对偶，返回对偶的两个组成部件互换位置的新对偶&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;swap&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;S&lt;/span&gt;,&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;](&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tup&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(S,T)&lt;/span&gt;) = {
        tup &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
                &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; (&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; ,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;) =&amp;gt; (b,a)
        }
}

println(swap[String,Int]((&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,2)))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.3&lt;/span&gt;&amp;nbsp;利用模式匹配，编写一个swap函数，交换数组中的前两个元素的位置，前提条件是数组长度至少为2&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;swap&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) = {
  arr &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ar&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; Array(b,a) ++ ar
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_&lt;/span&gt; =&amp;gt; arr
  }
}

println(swap(Array(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;)).mkString)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.4&lt;/span&gt;&amp;nbsp;添加一个样例类Multiple，作为Item的子类。举例来说，Multiple(10,Article(&amp;quot;Blackwell Toster&amp;quot;,29.95))描述的是10个烤面包机。当然了，你应该可以在第二个参数的位置接受任何Item，无论是Bundle还是另一个Multiple。扩展price函数以应对新的样例。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Multiple&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;item&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Article&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bundle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;discount&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;item&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item*&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;it&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= it &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Article&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt;) =&amp;gt; p
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bundle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;disc&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;its&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; its.map(price _).sum - disc
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Multiple&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;it&lt;/span&gt;) =&amp;gt; n * price(it)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = price(Multiple(10,Article(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Blackwell Toster&amp;quot;&lt;/span&gt;,29.95)))
  println(p)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.5&lt;/span&gt;&amp;nbsp;我们可以用列表制作只在叶子节点存放值的树。举例来说，列表((3 8) 2 (5))描述的是如下这样一棵树:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-5&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
      *
    / | \
   *  2  *
 /  \    |
3   8    5
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不过，有些列表元素是数字，而另一些是列表。在Scala中，你不能拥有异构的列表，因此你必须使用List[Any]。编写一个leafSum函数，计算所有叶子节点中的元素之和，用模式匹配来区分数字和列表。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Any]&lt;/span&gt; = List(List(3, 8), 2, List(5))

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;list&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Any]&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;total&lt;/span&gt; = 0

  list.foreach {
    lst =&amp;gt;
      lst &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Any] =&amp;gt; total &lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt;)
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int =&amp;gt; total &lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt;
      }
  }
  total
}

println(leafSum(l))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.6&lt;/span&gt;&amp;nbsp;制作这样的树更好的做法是使用样例类。我们不妨从二叉树开始。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;left&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;right&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			编写一个函数计算所有叶子节点中的元素之和。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;left&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;right&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; = Node(Leaf(3),Node(Leaf(3),Leaf(9)))

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tree&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {

      tree &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;) =&amp;gt; leafSum(a) + leafSum(b)
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;) =&amp;gt; v
      }

}

println(leafSum(r))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.7&lt;/span&gt;&amp;nbsp;扩展前一个练习中的树，使得每个节点可以有任意多的后代，并重新实现leafSum函数。第五题中的树应该能够通过下述代码表示：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
Node(Node(Leaf(3),Leaf(8)),Leaf(2),Node(Leaf(5)))
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree*&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; = Node(Node(Leaf(3), Leaf(8)), Leaf(2), Node(Leaf(5)))

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tree&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    tree &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; r.map(leafSum).sum
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;) =&amp;gt; v
    }
  }

  println(leafSum(r))

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.8&lt;/span&gt;&amp;nbsp;扩展前一个练习中的树，使得每个非叶子节点除了后代之外，能够存放一个操作符。然后编写一个eval函数来计算它的值。举例来说：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-8&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
      +
    / | \
   *  2  -
 /  \    |
3   8    5
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			上面这棵树的值为(3 * 8) + 2 + (-5) = 21
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ch&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Char &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree*&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; = Node(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; , Node(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,Leaf(3), Leaf(8)), Leaf(2), Node(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; , Leaf(5)))


  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;eval&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tree&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    tree &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Char &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;( c == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;) r.map(eval).sum &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (c == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) r.map(eval).reduceLeft(_ * _) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; r.map(eval).foldLeft(0)(_ - _)
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;) =&amp;gt; v
    }
  }

println(eval(r))

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.9&lt;/span&gt;&amp;nbsp;编写一个函数，计算List[Option[Int]]中所有非None值之和。不得使用match语句。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Option[Int]]&lt;/span&gt; = List(Option(-1),None,Option(2))
println(l.map(_.getOrElse(0)).sum)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.10&lt;/span&gt;&amp;nbsp;编写一个函数，将两个类型为Double=&amp;gt;Option[Double]的函数组合在一起，产生另一个同样类型的函数。如果其中一个函数返回None，则组合函数也应返回None。例如：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x &amp;gt;= 0) Some(sqrt(x)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x != 1) Some( 1 / ( x - 1)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;h&lt;/span&gt; = compose(f,g)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			h(2)将得到Some(1)，而h(1)和h(0)将得到None
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.sqrt

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x &amp;gt;= 0) Some(sqrt(x)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x != 1) Some( 1 / ( x - 1)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;h&lt;/span&gt; = compose(f,g)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;compose&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Double =&amp;gt; Option[Double])&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;g&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Double =&amp;gt; Option[Double])&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Double =&amp;gt; Option[Double])&lt;/span&gt;={
  (x : Double) =&amp;gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (f(x) == None || g(x) == None) None
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; g(x)
}

println(h(2))&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;h2 id=&quot;sec-15&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;15&lt;/span&gt;&amp;nbsp;模式匹配和样例类&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-15&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.1&lt;/span&gt;&amp;nbsp;JDK发行包有一个src.zip文件包含了JDK的大多数源代码。解压并搜索样例标签(用正则表达式case [^:]+:)。然后查找以//开头并包含[Ff]alls?thr的注释，捕获类似// Falls through或// just fall thru这样的注释。假定JDK的程序员们遵守Java编码习惯，在该写注释的地方写下了这些注释，有多少百分比的样例是会掉入到下一个分支的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			没读懂题意。。。。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.2&lt;/span&gt;&amp;nbsp;利用模式匹配，编写一个swap函数，接受一个整数的对偶，返回对偶的两个组成部件互换位置的新对偶&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;swap&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;S&lt;/span&gt;,&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T&lt;/span&gt;](&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tup&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(S,T)&lt;/span&gt;) = {
        tup &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
                &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; (&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; ,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;) =&amp;gt; (b,a)
        }
}

println(swap[String,Int]((&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,2)))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.3&lt;/span&gt;&amp;nbsp;利用模式匹配，编写一个swap函数，交换数组中的前两个元素的位置，前提条件是数组长度至少为2&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;swap&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) = {
  arr &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ar&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; Array(b,a) ++ ar
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_&lt;/span&gt; =&amp;gt; arr
  }
}

println(swap(Array(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;)).mkString)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.4&lt;/span&gt;&amp;nbsp;添加一个样例类Multiple，作为Item的子类。举例来说，Multiple(10,Article(&amp;quot;Blackwell Toster&amp;quot;,29.95))描述的是10个烤面包机。当然了，你应该可以在第二个参数的位置接受任何Item，无论是Bundle还是另一个Multiple。扩展price函数以应对新的样例。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Multiple&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;item&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Article&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bundle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;discount&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;item&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item*&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;it&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= it &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Article&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt;) =&amp;gt; p
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bundle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;disc&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;its&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; its.map(price _).sum - disc
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Multiple&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;it&lt;/span&gt;) =&amp;gt; n * price(it)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = price(Multiple(10,Article(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Blackwell Toster&amp;quot;&lt;/span&gt;,29.95)))
  println(p)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.5&lt;/span&gt;&amp;nbsp;我们可以用列表制作只在叶子节点存放值的树。举例来说，列表((3 8) 2 (5))描述的是如下这样一棵树:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-5&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
      *
    / | \
   *  2  *
 /  \    |
3   8    5
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不过，有些列表元素是数字，而另一些是列表。在Scala中，你不能拥有异构的列表，因此你必须使用List[Any]。编写一个leafSum函数，计算所有叶子节点中的元素之和，用模式匹配来区分数字和列表。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Any]&lt;/span&gt; = List(List(3, 8), 2, List(5))

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;list&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Any]&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;total&lt;/span&gt; = 0

  list.foreach {
    lst =&amp;gt;
      lst &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Any] =&amp;gt; total &lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt;)
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int =&amp;gt; total &lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt;
      }
  }
  total
}

println(leafSum(l))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.6&lt;/span&gt;&amp;nbsp;制作这样的树更好的做法是使用样例类。我们不妨从二叉树开始。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;left&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;right&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			编写一个函数计算所有叶子节点中的元素之和。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;left&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;right&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; = Node(Leaf(3),Node(Leaf(3),Leaf(9)))

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tree&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {

      tree &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;) =&amp;gt; leafSum(a) + leafSum(b)
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;) =&amp;gt; v
      }

}

println(leafSum(r))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.7&lt;/span&gt;&amp;nbsp;扩展前一个练习中的树，使得每个节点可以有任意多的后代，并重新实现leafSum函数。第五题中的树应该能够通过下述代码表示：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
Node(Node(Leaf(3),Leaf(8)),Leaf(2),Node(Leaf(5)))
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree*&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; = Node(Node(Leaf(3), Leaf(8)), Leaf(2), Node(Leaf(5)))

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;leafSum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tree&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    tree &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; r.map(leafSum).sum
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;) =&amp;gt; v
    }
  }

  println(leafSum(r))

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.8&lt;/span&gt;&amp;nbsp;扩展前一个练习中的树，使得每个非叶子节点除了后代之外，能够存放一个操作符。然后编写一个eval函数来计算它的值。举例来说：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-8&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
      +
    / | \
   *  2  -
 /  \    |
3   8    5
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			上面这棵树的值为(3 * 8) + 2 + (-5) = 21
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;sealed&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ch&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Char &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree*&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; = Node(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; , Node(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,Leaf(3), Leaf(8)), Leaf(2), Node(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; , Leaf(5)))


  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;eval&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tree&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BinaryTree&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    tree &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Char &lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) =&amp;gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;( c == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;) r.map(eval).sum &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (c == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) r.map(eval).reduceLeft(_ * _) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; r.map(eval).foldLeft(0)(_ - _)
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Leaf&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;) =&amp;gt; v
    }
  }

println(eval(r))

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.9&lt;/span&gt;&amp;nbsp;编写一个函数，计算List[Option[Int]]中所有非None值之和。不得使用match语句。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;l&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Option[Int]]&lt;/span&gt; = List(Option(-1),None,Option(2))
println(l.map(_.getOrElse(0)).sum)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-15-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-15-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;15.10&lt;/span&gt;&amp;nbsp;编写一个函数，将两个类型为Double=&amp;gt;Option[Double]的函数组合在一起，产生另一个同样类型的函数。如果其中一个函数返回None，则组合函数也应返回None。例如：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-15-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x &amp;gt;= 0) Some(sqrt(x)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x != 1) Some( 1 / ( x - 1)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;h&lt;/span&gt; = compose(f,g)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			h(2)将得到Some(1)，而h(1)和h(0)将得到None
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.sqrt

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x &amp;gt;= 0) Some(sqrt(x)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; ( x != 1) Some( 1 / ( x - 1)) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; None
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;h&lt;/span&gt; = compose(f,g)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;compose&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Double =&amp;gt; Option[Double])&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;g&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Double =&amp;gt; Option[Double])&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Double =&amp;gt; Option[Double])&lt;/span&gt;={
  (x : Double) =&amp;gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (f(x) == None || g(x) == None) None
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; g(x)
}

println(h(2))&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第十三章 集合</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%258d%2581%25e4%25b8%2589%25e7%25ab%25a0-%25e9%259b%2586%25e5%2590%2588.html"/>
        <updated>2013-02-16T13:17:57+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%8d%81%e4%b8%89%e7%ab%a0-%e9%9b%86%e5%90%88</id>
        <content type="html">&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.1&lt;/span&gt;&amp;nbsp;编写一个函数，给定字符串，产出一个包含所有字符的下标的映射。举例来说：indexes(&amp;quot;Mississippi&amp;quot;)应返回一个映射，让&amp;#39;M&amp;#39;对应集{0}，&amp;#39;i&amp;#39;对应集{1,4,7,10}，依此类推。使用字符到可变集的映射。另外，你如何保证集是经过排序的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			更新scala到版本2.10.0。有可变的可排序的Set，实际上还是TreeSet
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.{Map,HashMap,SortedSet}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;indexs&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[Char,SortedSet[Int]]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[Char, SortedSet[Int]]();
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = 0;
  str.foreach{
    c=&amp;gt;
      map.get(c) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt;{
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) =&amp;gt; map(c) = result + i
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;None&lt;/span&gt; =&amp;gt; map += (c-&amp;gt; SortedSet{i})
      }
      i += 1
  }
  map
}

println(indexs(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Mississippi&amp;quot;&lt;/span&gt;)) 
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.2&lt;/span&gt;&amp;nbsp;重复前一个练习，这次用字符到列表的不可变映射。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.immutable.HashMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ListBuffer

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;indexs&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[Char,ListBuffer[Int]]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[Char, ListBuffer[Int]]()
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = 0
  str.foreach{
    c=&amp;gt;
      map.get(c) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt;{
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) =&amp;gt; result += i
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;None&lt;/span&gt; =&amp;gt; map += (c-&amp;gt; ListBuffer{i})
      }
      i += 1
  }
  map
}

println(indexs(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Mississippi&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.3&lt;/span&gt;&amp;nbsp;编写一个函数，从一个整型链表中去除所有的零值。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeZero&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nums&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Int]&lt;/span&gt;={
  nums.filter(_ != 0)
}

println(removeZero(List(3,5,0,2,7,0)))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.4&lt;/span&gt;&amp;nbsp;编写一个函数，接受一个字符串的集合，以及一个从字符串到整数值的映射。返回整型的集合，其值为能和集合中某个字符串相对应的映射的值。举例来说，给定Array(&amp;quot;Tom&amp;quot;,&amp;quot;Fred&amp;quot;,&amp;quot;Harry&amp;quot;)和Map(&amp;quot;Tom&amp;quot;-&amp;gt;3,&amp;quot;Dick&amp;quot;-&amp;gt;4,&amp;quot;Harry&amp;quot;-&amp;gt;5)，返回Array(3,5)。提示：用flatMap将get返回的Option值组合在一起&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;strMap&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;strArr&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[String,Int]&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt; = {
  strArr.flatMap(map.get(_))
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = Array(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Fred&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Harry&amp;quot;&lt;/span&gt;)
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m&lt;/span&gt; = Map(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;-&amp;gt;3,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Dick&amp;quot;&lt;/span&gt;-&amp;gt;4,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Harry&amp;quot;&lt;/span&gt;-&amp;gt;5)
println(strMap(a,m).mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.5&lt;/span&gt;&amp;nbsp;实现一个函数，作用与mkString相同，使用reduceLeft。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;MyMkString&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;:mutable.Iterable[String]=&amp;gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;myMkString&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;( &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt; != Nil) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.reduceLeft(_ + _)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; mutable.HashSet[String] &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;MyMkString&lt;/span&gt;

a += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
a += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
a += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;

println(a.myMkString)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.6&lt;/span&gt;&amp;nbsp;给定整型列表lst,(lst :\ List[Int]())(_ :: _ )得到什么?(List[Int]() /: lst)(_ :+ _)又得到什么？如何修改它们中的一个，以对原列表进行反向排序？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			得到的结果和lst相同
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;lst&lt;/span&gt; = List(1,2,3,4,5)

println((lst :\ List[Int]())(_ :: _))

println((List[Int]() /: lst)((a,b) =&amp;gt; b :: a))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.7&lt;/span&gt;&amp;nbsp;在13.11节中，表达式(prices zip quantities) map { p =&amp;gt; p._1 * p._2}有些不够优雅。我们不能用(prices zip quantities) map { _ * _}，因为 _ * _ 是一个带两个参数的函数，而我们需要的是一个带单个类型为元组的参数的函数，Function对象的tupled方法可以将带两个参数的函数改为以元俎为参数的函数。将tupled应用于乘法函数，以使我们可以用它来映射由对偶组成的列表。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;prices&lt;/span&gt; = List(5.0,20.0,9.95)
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;quantities&lt;/span&gt; = List(10,2,1)

println((prices zip quantities) map { Function.tupled(_ * _) })
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.8&lt;/span&gt;&amp;nbsp;编写一个函数。将Double数组转换成二维数组。传入列数作为参数。举例来说，Array(1,2,3,4,5,6)和三列，返回Array(Array(1,2,3),Array(4,5,6))。用grouped方法。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;divArr&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Double]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;)={
  arr.grouped(i).toArray
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt; = Array(1.0,2,3,4,5,6)

divArr(arr,3).foreach(a =&amp;gt; println(a.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.9&lt;/span&gt;&amp;nbsp;Harry Hacker写了一个从命令行接受一系列文件名的程序。对每个文件名，他都启动一个新的线程来读取文件内容并更新一个字母出现频率映射，声明为：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; scala.collection.multable.HashMap[Char,Int] &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;scala.collection.mutable.SynchronizedMap&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Char&lt;/span&gt;,&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;]
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			当读到字母c时，他调用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
frequencies(c) = frequencies.getOrElse(c,0) + 1
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			为什么这样做得不到正确答案？如果他用如下方式实现呢：
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.JavaConversions.asScalaConcurrentMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;scala.collection.mutable.ConcurrentMap[Char,Int]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; java.util.concurrent.ConcurrentHashMap[Char,Int]
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			并发问题，并发修改集合不安全.修改后的代码和修改前的代码没有什么太大的区别.
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.10&lt;/span&gt;&amp;nbsp;Harry Hacker把文件读取到字符串中，然后想对字符串的不同部分用并行集合来并发地更新字母出现频率映射。他用了如下代码：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; scala.collection.mutable.HashMap[Char,Int]
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(c &amp;lt;- str.par) frequencies(c) = frequencies.getOrElse(c,0) + 1
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			为什么说这个想法很糟糕？要真正地并行化这个计算，他应该怎么做呢？（提示：用aggregate） 并行修改共享变量，结果无法估计。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.immutable.HashMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;abcabcac&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt; = str.par.aggregate(HashMap[Char,Int]())(
        {
                (a,b) =&amp;gt; 
                a + (b -&amp;gt; (a.getOrElse(b,0) + 1))
    }
        ,
        {
        (map1,map2) =&amp;gt;
        (map1.keySet ++ map2.keySet).foldLeft( HashMap[Char,Int]() ) { 
         (result,k) =&amp;gt; 
           result + ( k -&amp;gt; ( map1.getOrElse(k,0 ) + map2.getOrElse(k,0) ) ) 
       } 
    }
)

println(frequencies)&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.1&lt;/span&gt;&amp;nbsp;编写一个函数，给定字符串，产出一个包含所有字符的下标的映射。举例来说：indexes(&amp;quot;Mississippi&amp;quot;)应返回一个映射，让&amp;#39;M&amp;#39;对应集{0}，&amp;#39;i&amp;#39;对应集{1,4,7,10}，依此类推。使用字符到可变集的映射。另外，你如何保证集是经过排序的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			更新scala到版本2.10.0。有可变的可排序的Set，实际上还是TreeSet
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.{Map,HashMap,SortedSet}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;indexs&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[Char,SortedSet[Int]]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[Char, SortedSet[Int]]();
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = 0;
  str.foreach{
    c=&amp;gt;
      map.get(c) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt;{
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) =&amp;gt; map(c) = result + i
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;None&lt;/span&gt; =&amp;gt; map += (c-&amp;gt; SortedSet{i})
      }
      i += 1
  }
  map
}

println(indexs(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Mississippi&amp;quot;&lt;/span&gt;)) 
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.2&lt;/span&gt;&amp;nbsp;重复前一个练习，这次用字符到列表的不可变映射。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.immutable.HashMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ListBuffer

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;indexs&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[Char,ListBuffer[Int]]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[Char, ListBuffer[Int]]()
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = 0
  str.foreach{
    c=&amp;gt;
      map.get(c) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;match&lt;/span&gt;{
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) =&amp;gt; result += i
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;None&lt;/span&gt; =&amp;gt; map += (c-&amp;gt; ListBuffer{i})
      }
      i += 1
  }
  map
}

println(indexs(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Mississippi&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.3&lt;/span&gt;&amp;nbsp;编写一个函数，从一个整型链表中去除所有的零值。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeZero&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nums&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[Int]&lt;/span&gt;={
  nums.filter(_ != 0)
}

println(removeZero(List(3,5,0,2,7,0)))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.4&lt;/span&gt;&amp;nbsp;编写一个函数，接受一个字符串的集合，以及一个从字符串到整数值的映射。返回整型的集合，其值为能和集合中某个字符串相对应的映射的值。举例来说，给定Array(&amp;quot;Tom&amp;quot;,&amp;quot;Fred&amp;quot;,&amp;quot;Harry&amp;quot;)和Map(&amp;quot;Tom&amp;quot;-&amp;gt;3,&amp;quot;Dick&amp;quot;-&amp;gt;4,&amp;quot;Harry&amp;quot;-&amp;gt;5)，返回Array(3,5)。提示：用flatMap将get返回的Option值组合在一起&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;strMap&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;strArr&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[String,Int]&lt;/span&gt;) : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt; = {
  strArr.flatMap(map.get(_))
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = Array(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Fred&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Harry&amp;quot;&lt;/span&gt;)
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m&lt;/span&gt; = Map(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;-&amp;gt;3,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Dick&amp;quot;&lt;/span&gt;-&amp;gt;4,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Harry&amp;quot;&lt;/span&gt;-&amp;gt;5)
println(strMap(a,m).mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.5&lt;/span&gt;&amp;nbsp;实现一个函数，作用与mkString相同，使用reduceLeft。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;MyMkString&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;:mutable.Iterable[String]=&amp;gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;myMkString&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;( &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt; != Nil) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.reduceLeft(_ + _)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; mutable.HashSet[String] &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;MyMkString&lt;/span&gt;

a += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
a += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
a += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;

println(a.myMkString)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.6&lt;/span&gt;&amp;nbsp;给定整型列表lst,(lst :\ List[Int]())(_ :: _ )得到什么?(List[Int]() /: lst)(_ :+ _)又得到什么？如何修改它们中的一个，以对原列表进行反向排序？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			得到的结果和lst相同
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;lst&lt;/span&gt; = List(1,2,3,4,5)

println((lst :\ List[Int]())(_ :: _))

println((List[Int]() /: lst)((a,b) =&amp;gt; b :: a))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.7&lt;/span&gt;&amp;nbsp;在13.11节中，表达式(prices zip quantities) map { p =&amp;gt; p._1 * p._2}有些不够优雅。我们不能用(prices zip quantities) map { _ * _}，因为 _ * _ 是一个带两个参数的函数，而我们需要的是一个带单个类型为元组的参数的函数，Function对象的tupled方法可以将带两个参数的函数改为以元俎为参数的函数。将tupled应用于乘法函数，以使我们可以用它来映射由对偶组成的列表。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;prices&lt;/span&gt; = List(5.0,20.0,9.95)
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;quantities&lt;/span&gt; = List(10,2,1)

println((prices zip quantities) map { Function.tupled(_ * _) })
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.8&lt;/span&gt;&amp;nbsp;编写一个函数。将Double数组转换成二维数组。传入列数作为参数。举例来说，Array(1,2,3,4,5,6)和三列，返回Array(Array(1,2,3),Array(4,5,6))。用grouped方法。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;divArr&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Double]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;)={
  arr.grouped(i).toArray
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt; = Array(1.0,2,3,4,5,6)

divArr(arr,3).foreach(a =&amp;gt; println(a.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.9&lt;/span&gt;&amp;nbsp;Harry Hacker写了一个从命令行接受一系列文件名的程序。对每个文件名，他都启动一个新的线程来读取文件内容并更新一个字母出现频率映射，声明为：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; scala.collection.multable.HashMap[Char,Int] &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;scala.collection.mutable.SynchronizedMap&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Char&lt;/span&gt;,&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;]
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			当读到字母c时，他调用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
frequencies(c) = frequencies.getOrElse(c,0) + 1
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			为什么这样做得不到正确答案？如果他用如下方式实现呢：
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.JavaConversions.asScalaConcurrentMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;scala.collection.mutable.ConcurrentMap[Char,Int]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; java.util.concurrent.ConcurrentHashMap[Char,Int]
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			并发问题，并发修改集合不安全.修改后的代码和修改前的代码没有什么太大的区别.
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-14-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; line-height: normal; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-14-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;14.10&lt;/span&gt;&amp;nbsp;Harry Hacker把文件读取到字符串中，然后想对字符串的不同部分用并行集合来并发地更新字母出现频率映射。他用了如下代码：&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-14-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; scala.collection.mutable.HashMap[Char,Int]
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(c &amp;lt;- str.par) frequencies(c) = frequencies.getOrElse(c,0) + 1
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			为什么说这个想法很糟糕？要真正地并行化这个计算，他应该怎么做呢？（提示：用aggregate） 并行修改共享变量，结果无法估计。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.immutable.HashMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;abcabcac&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;frequencies&lt;/span&gt; = str.par.aggregate(HashMap[Char,Int]())(
        {
                (a,b) =&amp;gt; 
                a + (b -&amp;gt; (a.getOrElse(b,0) + 1))
    }
        ,
        {
        (map1,map2) =&amp;gt;
        (map1.keySet ++ map2.keySet).foldLeft( HashMap[Char,Int]() ) { 
         (result,k) =&amp;gt; 
           result + ( k -&amp;gt; ( map1.getOrElse(k,0 ) + map2.getOrElse(k,0) ) ) 
       } 
    }
)

println(frequencies)&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第十二章 高阶函数</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%258d%2581%25e4%25ba%258c%25e7%25ab%25a0-%25e9%25ab%2598%25e9%2598%25b6%25e5%2587%25bd%25e6%2595%25b0.html"/>
        <updated>2013-01-07T11:34:32+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%8d%81%e4%ba%8c%e7%ab%a0-%e9%ab%98%e9%98%b6%e5%87%bd%e6%95%b0</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-13&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;13&lt;/span&gt;&amp;nbsp;高阶函数&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-13&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.1&lt;/span&gt;&amp;nbsp;编写函数values(fun:(Int)=&amp;gt;Int,low:Int,high:Int),该函数输出一个集合，对应给定区间内给定函数的输入和输出。比如，values(x=&amp;gt;x*x,-5,5)应该产出一个对偶的集合(-5,25),(-4,16),(-3,9),&amp;hellip;,(5,25)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;values&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int) =&amp;gt; Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;low&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;high&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt; = List[(Int,Int)]()
    low to high foreach {
      num =&amp;gt;
      arr = (num, fun(num)) :: arr
    }
    arr
  }

  println(values(x =&amp;gt; x * x, -5, 5).mkString)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.2&lt;/span&gt;&amp;nbsp;如何用reduceLeft得到数组中的最大元素?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt; = Array(3,2,6,8,4,6,9,3,6,7,1,2)
  print(arr.reduceLeft((a,b)=&amp;gt;if (a&amp;gt;b) a &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.3&lt;/span&gt;&amp;nbsp;用to和reduceLeft实现阶乘函数,不得使用循环或递归&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
println(1 to 10 reduceLeft(_ * _))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.4&lt;/span&gt;&amp;nbsp;前一个实现需要处理一个特殊情况，即n&amp;lt;1的情况。展示如何用foldLeft来避免这个需要。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
println((1 to -10).foldLeft(1)(_ * _))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.5&lt;/span&gt;&amp;nbsp;编写函数largest(fun:(Int)=&amp;gt;Int,inputs:Seq[Int]),输出在给定输入序列中给定函数的最大值。举例来说，largest(x=&amp;gt;10*x-x*x,1 to 10)应该返回25.不得使用循环或递归&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;largest&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int)=&amp;gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inputs&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;)={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt; = inputs.reduceLeft((a,b)=&amp;gt;if (fun(a) &amp;gt; fun(b)) a &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b)
    fun(s)
  }

  println(largest(x=&amp;gt;10*x-x*x,1 to 10))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.6&lt;/span&gt;&amp;nbsp;修改前一个函数，返回最大的输出对应的输入。举例来说,largestAt(fun:(Int)=&amp;gt;Int,inputs:Seq[Int])应该返回5。不得使用循环或递归&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;largest&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int)=&amp;gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inputs&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;)={
    inputs.reduceLeft((a,b)=&amp;gt;if (fun(a) &amp;gt; fun(b)) a &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b)
  }

  println(largest(x=&amp;gt;10*x-x*x,1 to 10))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.7&lt;/span&gt;&amp;nbsp;要得到一个序列的对偶很容易，比如:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pairs&lt;/span&gt; = (1 to 10) zip (11 to 20)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			假定你想要对这个序列做某中操作&amp;mdash;比如，给对偶中的值求和，但是你不能直接使用:
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
pairs.map(_ + _)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			函数_ + _ 接受两个Int作为参数，而不是(Int,Int)对偶。编写函数adjustToPair,该函数接受一个类型为(Int,Int)=&amp;gt;Int的函数作为参数，并返回一个等效的, 可以以对偶作为参数的函数。举例来说就是:adjustToPair(_ * _)((6,7))应得到42。然后用这个函数通过map计算出各个对偶的元素之和
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;list&lt;/span&gt; = List[Int]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;adjustToPair&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int,Int)=&amp;gt;Int&lt;/span&gt;)(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tup&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int, Int)&lt;/span&gt;)={
     list = fun(tup._1,tup._2) :: list
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int,Int)=&amp;gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;={
    list.reduceLeft(fun)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pairs&lt;/span&gt; = (1 to 10) zip (11 to 20)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ((a,b) &amp;lt;- pairs){
    adjustToPair(_ * _)((a,b))
  }
  println(map(_ + _))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.8&lt;/span&gt;&amp;nbsp;在12.8节中，你看到了用于两组字符串数组的corresponds方法。做出一个对该方法的调用，让它帮我们判断某个字符串数组里的所有元素的长度是否和某个给定的整数数组相对应&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = Array(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;asd&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;aadc&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = Array(3,2,4)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt; = Array(3,2,1)

  println(a.corresponds(b)(_.length == _))
  println(a.corresponds(c)(_.length == _))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.9&lt;/span&gt;&amp;nbsp;不使用柯里化实现corresponds。然后尝试从前一个练习的代码来调用。你遇到了什么问题？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			没有柯里化则不能使用前一个练习里的代码方式来调用
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.10&lt;/span&gt;&amp;nbsp;实现一个unless控制抽象，工作机制类似if,但条件是反过来的。第一个参数需要是换名调用的参数吗？你需要柯里化吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;unless&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;condition&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Boolean&lt;/span&gt;)(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;block&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Unit&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (!condition){
      block
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; = 10
  unless(x == 0){
    x -= 1
    println(x)
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			需要换名和柯里化
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-13&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;13&lt;/span&gt;&amp;nbsp;高阶函数&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-13&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.1&lt;/span&gt;&amp;nbsp;编写函数values(fun:(Int)=&amp;gt;Int,low:Int,high:Int),该函数输出一个集合，对应给定区间内给定函数的输入和输出。比如，values(x=&amp;gt;x*x,-5,5)应该产出一个对偶的集合(-5,25),(-4,16),(-3,9),&amp;hellip;,(5,25)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;values&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int) =&amp;gt; Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;low&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;high&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt; = List[(Int,Int)]()
    low to high foreach {
      num =&amp;gt;
      arr = (num, fun(num)) :: arr
    }
    arr
  }

  println(values(x =&amp;gt; x * x, -5, 5).mkString)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.2&lt;/span&gt;&amp;nbsp;如何用reduceLeft得到数组中的最大元素?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt; = Array(3,2,6,8,4,6,9,3,6,7,1,2)
  print(arr.reduceLeft((a,b)=&amp;gt;if (a&amp;gt;b) a &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.3&lt;/span&gt;&amp;nbsp;用to和reduceLeft实现阶乘函数,不得使用循环或递归&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
println(1 to 10 reduceLeft(_ * _))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.4&lt;/span&gt;&amp;nbsp;前一个实现需要处理一个特殊情况，即n&amp;lt;1的情况。展示如何用foldLeft来避免这个需要。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
println((1 to -10).foldLeft(1)(_ * _))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.5&lt;/span&gt;&amp;nbsp;编写函数largest(fun:(Int)=&amp;gt;Int,inputs:Seq[Int]),输出在给定输入序列中给定函数的最大值。举例来说，largest(x=&amp;gt;10*x-x*x,1 to 10)应该返回25.不得使用循环或递归&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;largest&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int)=&amp;gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inputs&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;)={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt; = inputs.reduceLeft((a,b)=&amp;gt;if (fun(a) &amp;gt; fun(b)) a &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b)
    fun(s)
  }

  println(largest(x=&amp;gt;10*x-x*x,1 to 10))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.6&lt;/span&gt;&amp;nbsp;修改前一个函数，返回最大的输出对应的输入。举例来说,largestAt(fun:(Int)=&amp;gt;Int,inputs:Seq[Int])应该返回5。不得使用循环或递归&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;largest&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int)=&amp;gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inputs&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Seq[Int]&lt;/span&gt;)={
    inputs.reduceLeft((a,b)=&amp;gt;if (fun(a) &amp;gt; fun(b)) a &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b)
  }

  println(largest(x=&amp;gt;10*x-x*x,1 to 10))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.7&lt;/span&gt;&amp;nbsp;要得到一个序列的对偶很容易，比如:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pairs&lt;/span&gt; = (1 to 10) zip (11 to 20)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			假定你想要对这个序列做某中操作&amp;mdash;比如，给对偶中的值求和，但是你不能直接使用:
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
pairs.map(_ + _)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			函数_ + _ 接受两个Int作为参数，而不是(Int,Int)对偶。编写函数adjustToPair,该函数接受一个类型为(Int,Int)=&amp;gt;Int的函数作为参数，并返回一个等效的, 可以以对偶作为参数的函数。举例来说就是:adjustToPair(_ * _)((6,7))应得到42。然后用这个函数通过map计算出各个对偶的元素之和
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;list&lt;/span&gt; = List[Int]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;adjustToPair&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int,Int)=&amp;gt;Int&lt;/span&gt;)(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tup&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int, Int)&lt;/span&gt;)={
     list = fun(tup._1,tup._2) :: list
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fun&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;(Int,Int)=&amp;gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;={
    list.reduceLeft(fun)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pairs&lt;/span&gt; = (1 to 10) zip (11 to 20)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ((a,b) &amp;lt;- pairs){
    adjustToPair(_ * _)((a,b))
  }
  println(map(_ + _))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.8&lt;/span&gt;&amp;nbsp;在12.8节中，你看到了用于两组字符串数组的corresponds方法。做出一个对该方法的调用，让它帮我们判断某个字符串数组里的所有元素的长度是否和某个给定的整数数组相对应&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = Array(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;asd&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;aadc&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = Array(3,2,4)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt; = Array(3,2,1)

  println(a.corresponds(b)(_.length == _))
  println(a.corresponds(c)(_.length == _))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.9&lt;/span&gt;&amp;nbsp;不使用柯里化实现corresponds。然后尝试从前一个练习的代码来调用。你遇到了什么问题？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			没有柯里化则不能使用前一个练习里的代码方式来调用
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-13-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-13-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;13.10&lt;/span&gt;&amp;nbsp;实现一个unless控制抽象，工作机制类似if,但条件是反过来的。第一个参数需要是换名调用的参数吗？你需要柯里化吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-13-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;unless&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;condition&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Boolean&lt;/span&gt;)(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;block&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Unit&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (!condition){
      block
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt; = 10
  unless(x == 0){
    x -= 1
    println(x)
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			需要换名和柯里化
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>How Tomcat Works(Scala语言) 02 一个简单的Servlet容器</title>
        <link href="http://liyouhai.com/scala-tomcat/how-tomcat-worksscala%25e8%25af%25ad%25e8%25a8%2580-02-%25e4%25b8%2580%25e4%25b8%25aa%25e7%25ae%2580%25e5%258d%2595%25e7%259a%2584servlet%25e5%25ae%25b9%25e5%2599%25a8.html"/>
        <updated>2013-01-03T12:49:47+08:00</updated>
        <id>http://liyouhai.com//scala-tomcat/how-tomcat-worksscala%e8%af%ad%e8%a8%80-02-%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84servlet%e5%ae%b9%e5%99%a8</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-3&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt;&amp;nbsp;一个简单的Servlet容器&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
			Servlet容器除了能访问静态资源以外，还能访问Servlet。所以比前一章多了两个类StaticResourceProcessor和ServletProcessor
		&lt;/li&gt;
&lt;li&gt;
			此处的Servlet依据Servlet规范实现，所以需要servlet.jar。后续会自己实现此接口
		&lt;/li&gt;
&lt;li&gt;
			访问静态资源的方式和前篇代码完全相同，只是将response.sendStaticResource()抽成单独的StaticResourceProcessor类
		&lt;/li&gt;
&lt;li&gt;
			根据url来区分访问的内容，类似/servlet/*的uri会调用ServletProcessor否则调用StaticResourceProcessor
		&lt;/li&gt;
&lt;li&gt;
			ServletProcessor的功能是根据url来加载指定路径下的class,并调用相应的方法
		&lt;/li&gt;
&lt;li&gt;
			具体区别请见类内注释
		&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.InputStream
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.BufferedReader
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Enumeration
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Locale
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Map
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.{ServletInputStream, RequestDispatcher, ServletRequest}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:32&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Request类和前一章的类完全相同&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;区别在于，由于此类继承了ServletRequest，所以必须要实现其所有的抽象方法，这里都是空实现&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;InputStream&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletRequest&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;uri&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parseUri&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;requestString&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;[^ ]* *([^ ]*) *[\s\S]*&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.r
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) = requestString
    result
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parse&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;lines&lt;/span&gt; = Source.fromInputStream(input).getLines()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (lines.hasNext) {
      uri = parseUri(lines.next())
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttributeNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRealPath&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RequestDispatcher &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isSecure&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentLength&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; 0
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentType&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getInputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletInputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocales&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameter&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterMap&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[_, _]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterValues&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parameter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getProtocol&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getReader&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BufferedReader &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteAddr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteHost&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getScheme&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerPort&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; 0
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setCharacterEncoding&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;encoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.OutputStream
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.FileInputStream
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Locale
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletResponse
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletOutputStream

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:34&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Response类和前一章的类完全相同&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;区别在于，由于此类继承了ServletResponse，所以必须要实现其所有的抽象方法，这里都是空实现&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Response&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BUFFER_SIZE&lt;/span&gt;: Int = 1024
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;bytes&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Byte]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[Byte](Response.BUFFER_SIZE)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileNotFoundMessage&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;HTTP/1.1 404 File Not Found&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |Content-Type: text/html&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |Content-Length: 23&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |&amp;lt;h1&amp;gt;File Not Found&amp;lt;/h1&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;OutputStream&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletResponse&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sendStaticResource&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;file&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT, request.uri)
      fis = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileInputStream(file)
      &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;将文件内容写到响应中&lt;/span&gt;
      writeToResponse(fis)
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;catch&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;e&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileNotFoundException =&amp;gt; {&lt;/span&gt;
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;将文件内容写到响应中&lt;/span&gt;
        output.write(Response.FileNotFoundMessage.getBytes())
      }
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;finally&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (fis != &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;) fis.close
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;递归读取文件，写入到响应流&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;writeToResponse&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ch&lt;/span&gt; = fis.read(Response.bytes, 0, Response.BUFFER_SIZE)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (ch != -1) {
      output.write(Response.bytes, 0, ch)
      writeToResponse(fis)
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/** &lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;implementation of ServletResponse  */&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flushBuffer&lt;/span&gt; {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getBufferSize&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; 0
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getOutputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletOutputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getWriter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PrintWriter &lt;/span&gt;= {
    writer = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(output, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;true&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; writer
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isCommitted&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reset&lt;/span&gt; {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;resetBuffer&lt;/span&gt; {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setBufferSize&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;size&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentLength&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;length&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentType&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;`type`:&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;String&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setLocale&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;locale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= _
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;writer&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PrintWriter &lt;/span&gt;= _
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.ServerSocket
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.InetAddress
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:28&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;HttpServer&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;WEB_ROOT&lt;/span&gt;: String = System.getProperty(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;user.dir&amp;quot;&lt;/span&gt;) + File.separator + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;webroot&amp;quot;&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SHUTDOWN_COMMAND&lt;/span&gt;: String = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/SHUTDOWN&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;server&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;HttpServer &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HttpServer
    server.await
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;HttpServer&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;await&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;port&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 8080
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;serverSocket&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ServerSocket(port, 1, InetAddress.getByName(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;))

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (!shutdown) {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;socket&lt;/span&gt; = serverSocket.accept
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt; = socket.getInputStream
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt; = socket.getOutputStream

        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Request(input)
        request.parse

        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Response(output)
        response.request = request

        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;此处是HttpServer与前一章不同的地方&lt;/span&gt;
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据uri是否以/servlet/开头，来判断是静态资源，还是servlet&lt;/span&gt;
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;如果是静态资源则调用StaticResourceProcessor，否则调用ServletProcessor&lt;/span&gt;
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (request.uri.startsWith(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/servlet/&amp;quot;&lt;/span&gt;)) {
          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;processor&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletProcessor &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ServletProcessor
          processor.process(request, response)
        } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;processor&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;StaticResourceProcessor &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; StaticResourceProcessor
          processor.process(request, response)
        }

        socket.close
        shutdown = request.uri == HttpServer.SHUTDOWN_COMMAND
      } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;catch&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;e&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Exception =&amp;gt; e.printStackTrace&lt;/span&gt;
      }
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;shutdown&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:36&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;仅一行，调用response的sendStaticResource返回静态资源&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;此代码原来在HttpServer中，现单独为一个类&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;StaticResourceProcessor&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;process&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) {
      response.sendStaticResource
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URL
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLClassLoader
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLStreamHandler
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.Servlet
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletRequest
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletResponse

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:37&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url,从类路径下加载相应的servlet类&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;并相继调用service方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletProcessor&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;process&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url找到servletName&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servletName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= request.uri.substring(request.uri.lastIndexOf(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;) + 1)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据class路径，创建classLoader&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;urls&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[URL]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[URL](1)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;streamHandler&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;URLStreamHandler &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;classPath&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, classPath.getCanonicalPath + File.separator)).toString
    urls(0) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, repository, streamHandler)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;loader&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URLClassLoader(urls)

    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用classLoader根据servletName加载类&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;myClass&lt;/span&gt; = loader.loadClass(servletName)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;实例化类并调用service方法&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servlet&lt;/span&gt; = myClass.newInstance.asInstanceOf[Servlet]
    servlet.service(request.asInstanceOf[ServletRequest], response.asInstanceOf[ServletResponse])
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
		上面的代码完成了基本的Servlet容器功能。但是在ServletProcessor中有个问题，就是当你把Request和Response传递给servlet时，你需要强制转换为ServletRequest和 ServletResponse。而如果开发人员知道ServletRequest和ServletResponse是Request和Response的话，他就可以强制转回去，并调用parse和sendStaticResource方法。 由于其他类需要调用这两个方法，所以你不能将其设为private。当然你可以设为private[simple]，使得其只能在simple包内访问，但是开发人员依然可以将servlet包设为simple来进行访问。 这里可以使用Facade来解决这个问题。
	&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
			添加RequestFacade和ResponseFacade方法
		&lt;/li&gt;
&lt;li&gt;
			修改ServletProcessor类，使用RequestFacade和ResponseFacade来封装request和response
		&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; facade

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.{RequestDispatcher, ServletInputStream, ServletRequest}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.{Map, Enumeration, Locale}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.BufferedReader

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-3&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午8:31&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;仅仅是对request对应方法的调用&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;屏蔽了parse方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RequestFacade&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletRequest&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getAttribute(attribute)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttributeNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getAttributeNames
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRealPath&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRealPath(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RequestDispatcher &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRequestDispatcher(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isSecure&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.isSecure
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getCharacterEncoding
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentLength&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getContentLength
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentType&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getContentType
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getInputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletInputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getInputStream
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getLocale
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocales&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getLocales
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameter&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameter(name)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterMap&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[_, _]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameterMap
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameterNames
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterValues&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parameter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameterValues(parameter)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getProtocol&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getProtocol
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getReader&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BufferedReader &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getReader
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteAddr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRemoteAddr
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteHost&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRemoteHost
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getScheme&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getScheme
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getServerName
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerPort&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getServerPort
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
    request.removeAttribute(attribute)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef&lt;/span&gt;) {
    request.setAttribute(key, value)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setCharacterEncoding&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;encoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
    request.setCharacterEncoding(encoding)
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; facade

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.{ServletOutputStream, ServletResponse}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Locale
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter


&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-3&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午8:31&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;仅仅是对response相应方法的调用&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;屏蔽了sendStaticResource方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ResponseFacade&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletResponse&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flushBuffer&lt;/span&gt; {
    response.flushBuffer
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getBufferSize&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getBufferSize
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getCharacterEncoding
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getLocale
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getOutputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletOutputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getOutputStream
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getWriter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PrintWriter &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getWriter
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isCommitted&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.isCommitted
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reset&lt;/span&gt; {
    response.reset
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;resetBuffer&lt;/span&gt; {
    response.resetBuffer
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setBufferSize&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;size&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
    response.setBufferSize(size)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentLength&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;length&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
    response.setContentLength(length)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentType&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;`type`:&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;String&lt;/span&gt;) {
    response.setContentType(`type`)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setLocale&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;locale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale&lt;/span&gt;) {
    response.setLocale(locale)
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; facade

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URL
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLClassLoader
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLStreamHandler
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.Servlet
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletRequest
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletResponse

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:37&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url,从类路径下加载相应的servlet类&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;并相继调用service方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletProcessor&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;process&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url找到servletName&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servletName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= request.uri.substring(request.uri.lastIndexOf(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;) + 1)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据class路径，创建classLoader&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;urls&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[URL]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[URL](1)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;streamHandler&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;URLStreamHandler &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;classPath&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, classPath.getCanonicalPath + File.separator)).toString
    urls(0) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, repository, streamHandler)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;loader&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URLClassLoader(urls)

    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用classLoader根据servletName加载类&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;myClass&lt;/span&gt; = loader.loadClass(servletName)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;实例化类并调用service方法&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servlet&lt;/span&gt; = myClass.newInstance.asInstanceOf[Servlet]
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;是用facade封装request和response，屏蔽parse和sendStaticResource方法&lt;/span&gt;
    servlet.service(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; RequestFacade(request).asInstanceOf[ServletRequest],
                    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ResponseFacade(response).asInstanceOf[ServletResponse])
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-3&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt;&amp;nbsp;一个简单的Servlet容器&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
			Servlet容器除了能访问静态资源以外，还能访问Servlet。所以比前一章多了两个类StaticResourceProcessor和ServletProcessor
		&lt;/li&gt;
&lt;li&gt;
			此处的Servlet依据Servlet规范实现，所以需要servlet.jar。后续会自己实现此接口
		&lt;/li&gt;
&lt;li&gt;
			访问静态资源的方式和前篇代码完全相同，只是将response.sendStaticResource()抽成单独的StaticResourceProcessor类
		&lt;/li&gt;
&lt;li&gt;
			根据url来区分访问的内容，类似/servlet/*的uri会调用ServletProcessor否则调用StaticResourceProcessor
		&lt;/li&gt;
&lt;li&gt;
			ServletProcessor的功能是根据url来加载指定路径下的class,并调用相应的方法
		&lt;/li&gt;
&lt;li&gt;
			具体区别请见类内注释
		&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.InputStream
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.BufferedReader
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Enumeration
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Locale
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Map
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.{ServletInputStream, RequestDispatcher, ServletRequest}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:32&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Request类和前一章的类完全相同&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;区别在于，由于此类继承了ServletRequest，所以必须要实现其所有的抽象方法，这里都是空实现&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;InputStream&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletRequest&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;uri&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parseUri&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;requestString&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;[^ ]* *([^ ]*) *[\s\S]*&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.r
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) = requestString
    result
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parse&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;lines&lt;/span&gt; = Source.fromInputStream(input).getLines()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (lines.hasNext) {
      uri = parseUri(lines.next())
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttributeNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRealPath&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RequestDispatcher &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isSecure&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentLength&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; 0
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentType&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getInputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletInputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocales&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameter&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterMap&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[_, _]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterValues&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parameter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getProtocol&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getReader&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BufferedReader &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteAddr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteHost&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getScheme&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerPort&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; 0
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setCharacterEncoding&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;encoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.OutputStream
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.FileInputStream
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Locale
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletResponse
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletOutputStream

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:34&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;Response类和前一章的类完全相同&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;区别在于，由于此类继承了ServletResponse，所以必须要实现其所有的抽象方法，这里都是空实现&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Response&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BUFFER_SIZE&lt;/span&gt;: Int = 1024
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;bytes&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Byte]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[Byte](Response.BUFFER_SIZE)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileNotFoundMessage&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;HTTP/1.1 404 File Not Found&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |Content-Type: text/html&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |Content-Length: 23&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                              |&amp;lt;h1&amp;gt;File Not Found&amp;lt;/h1&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;OutputStream&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletResponse&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sendStaticResource&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;file&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT, request.uri)
      fis = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileInputStream(file)
      &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;将文件内容写到响应中&lt;/span&gt;
      writeToResponse(fis)
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;catch&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;e&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileNotFoundException =&amp;gt; {&lt;/span&gt;
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;将文件内容写到响应中&lt;/span&gt;
        output.write(Response.FileNotFoundMessage.getBytes())
      }
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;finally&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (fis != &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;) fis.close
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;递归读取文件，写入到响应流&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;writeToResponse&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ch&lt;/span&gt; = fis.read(Response.bytes, 0, Response.BUFFER_SIZE)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (ch != -1) {
      output.write(Response.bytes, 0, ch)
      writeToResponse(fis)
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/** &lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;implementation of ServletResponse  */&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flushBuffer&lt;/span&gt; {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getBufferSize&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; 0
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getOutputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletOutputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getWriter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PrintWriter &lt;/span&gt;= {
    writer = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(output, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;true&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; writer
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isCommitted&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reset&lt;/span&gt; {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;resetBuffer&lt;/span&gt; {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setBufferSize&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;size&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentLength&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;length&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentType&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;`type`:&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;String&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setLocale&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;locale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale&lt;/span&gt;) {
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= _
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;writer&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PrintWriter &lt;/span&gt;= _
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.ServerSocket
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.InetAddress
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:28&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;HttpServer&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;WEB_ROOT&lt;/span&gt;: String = System.getProperty(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;user.dir&amp;quot;&lt;/span&gt;) + File.separator + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;webroot&amp;quot;&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SHUTDOWN_COMMAND&lt;/span&gt;: String = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/SHUTDOWN&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;server&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;HttpServer &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HttpServer
    server.await
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;HttpServer&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;await&lt;/span&gt; {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;port&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 8080
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;serverSocket&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ServerSocket(port, 1, InetAddress.getByName(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;))

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (!shutdown) {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;socket&lt;/span&gt; = serverSocket.accept
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt; = socket.getInputStream
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt; = socket.getOutputStream

        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Request(input)
        request.parse

        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Response(output)
        response.request = request

        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;此处是HttpServer与前一章不同的地方&lt;/span&gt;
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据uri是否以/servlet/开头，来判断是静态资源，还是servlet&lt;/span&gt;
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;如果是静态资源则调用StaticResourceProcessor，否则调用ServletProcessor&lt;/span&gt;
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (request.uri.startsWith(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/servlet/&amp;quot;&lt;/span&gt;)) {
          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;processor&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletProcessor &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ServletProcessor
          processor.process(request, response)
        } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;processor&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;StaticResourceProcessor &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; StaticResourceProcessor
          processor.process(request, response)
        }

        socket.close
        shutdown = request.uri == HttpServer.SHUTDOWN_COMMAND
      } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;catch&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;e&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Exception =&amp;gt; e.printStackTrace&lt;/span&gt;
      }
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;shutdown&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:36&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;仅一行，调用response的sendStaticResource返回静态资源&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;此代码原来在HttpServer中，现单独为一个类&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;StaticResourceProcessor&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;process&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) {
      response.sendStaticResource
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; simple

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URL
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLClassLoader
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLStreamHandler
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.Servlet
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletRequest
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletResponse

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:37&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url,从类路径下加载相应的servlet类&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;并相继调用service方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletProcessor&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;process&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url找到servletName&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servletName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= request.uri.substring(request.uri.lastIndexOf(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;) + 1)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据class路径，创建classLoader&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;urls&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[URL]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[URL](1)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;streamHandler&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;URLStreamHandler &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;classPath&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, classPath.getCanonicalPath + File.separator)).toString
    urls(0) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, repository, streamHandler)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;loader&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URLClassLoader(urls)

    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用classLoader根据servletName加载类&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;myClass&lt;/span&gt; = loader.loadClass(servletName)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;实例化类并调用service方法&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servlet&lt;/span&gt; = myClass.newInstance.asInstanceOf[Servlet]
    servlet.service(request.asInstanceOf[ServletRequest], response.asInstanceOf[ServletResponse])
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
		上面的代码完成了基本的Servlet容器功能。但是在ServletProcessor中有个问题，就是当你把Request和Response传递给servlet时，你需要强制转换为ServletRequest和 ServletResponse。而如果开发人员知道ServletRequest和ServletResponse是Request和Response的话，他就可以强制转回去，并调用parse和sendStaticResource方法。 由于其他类需要调用这两个方法，所以你不能将其设为private。当然你可以设为private[simple]，使得其只能在simple包内访问，但是开发人员依然可以将servlet包设为simple来进行访问。 这里可以使用Facade来解决这个问题。
	&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
			添加RequestFacade和ResponseFacade方法
		&lt;/li&gt;
&lt;li&gt;
			修改ServletProcessor类，使用RequestFacade和ResponseFacade来封装request和response
		&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; facade

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.{RequestDispatcher, ServletInputStream, ServletRequest}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.{Map, Enumeration, Locale}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.BufferedReader

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-3&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午8:31&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;仅仅是对request对应方法的调用&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;屏蔽了parse方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RequestFacade&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletRequest&lt;/span&gt; {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getAttribute(attribute)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getAttributeNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getAttributeNames
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRealPath&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRealPath(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RequestDispatcher &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRequestDispatcher(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isSecure&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.isSecure
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getCharacterEncoding
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentLength&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getContentLength
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getContentType&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getContentType
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getInputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletInputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getInputStream
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getLocale
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocales&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getLocales
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameter&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameter(name)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterMap&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[_, _]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameterMap
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterNames&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration[_]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameterNames
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getParameterValues&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parameter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt; = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getParameterValues(parameter)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getProtocol&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getProtocol
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getReader&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BufferedReader &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getReader
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteAddr&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRemoteAddr
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getRemoteHost&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getRemoteHost
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getScheme&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getScheme
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getServerName
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getServerPort&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; request.getServerPort
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;attribute&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
    request.removeAttribute(attribute)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setAttribute&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;AnyRef&lt;/span&gt;) {
    request.setAttribute(key, value)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setCharacterEncoding&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;encoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) {
    request.setCharacterEncoding(encoding)
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; facade

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.{ServletOutputStream, ServletResponse}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Locale
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter


&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-3&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午8:31&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;仅仅是对response相应方法的调用&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;屏蔽了sendStaticResource方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ResponseFacade&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletResponse&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flushBuffer&lt;/span&gt; {
    response.flushBuffer
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getBufferSize&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getBufferSize
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getCharacterEncoding&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getCharacterEncoding
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getLocale
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getOutputStream&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletOutputStream &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getOutputStream
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getWriter&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PrintWriter &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.getWriter
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;isCommitted&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; response.isCommitted
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reset&lt;/span&gt; {
    response.reset
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;resetBuffer&lt;/span&gt; {
    response.resetBuffer
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setBufferSize&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;size&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
    response.setBufferSize(size)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentLength&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;length&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
    response.setContentLength(length)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setContentType&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;`type`:&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;String&lt;/span&gt;) {
    response.setContentType(`type`)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;setLocale&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;locale&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Locale&lt;/span&gt;) {
    response.setLocale(locale)
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; facade

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URL
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLClassLoader
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.URLStreamHandler
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.Servlet
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletRequest
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax.servlet.ServletResponse

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Administrator&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 13-1-2&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 下午10:37&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * To change this template use File | Settings | File Templates.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url,从类路径下加载相应的servlet类&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;并相继调用service方法&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ServletProcessor&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;process&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据url找到servletName&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servletName&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= request.uri.substring(request.uri.lastIndexOf(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;) + 1)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据class路径，创建classLoader&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;urls&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[URL]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[URL](1)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;streamHandler&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;URLStreamHandler &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;classPath&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, classPath.getCanonicalPath + File.separator)).toString
    urls(0) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URL(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;, repository, streamHandler)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;loader&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; URLClassLoader(urls)

    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用classLoader根据servletName加载类&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;myClass&lt;/span&gt; = loader.loadClass(servletName)
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;实例化类并调用service方法&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;servlet&lt;/span&gt; = myClass.newInstance.asInstanceOf[Servlet]
    &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;是用facade封装request和response，屏蔽parse和sendStaticResource方法&lt;/span&gt;
    servlet.service(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; RequestFacade(request).asInstanceOf[ServletRequest],
                    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ResponseFacade(response).asInstanceOf[ServletResponse])
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第十一章 操作符</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%258d%2581%25e4%25b8%2580%25e7%25ab%25a0-%25e6%2593%258d%25e4%25bd%259c%25e7%25ac%25a6.html"/>
        <updated>2013-01-02T13:25:09+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%8d%81%e4%b8%80%e7%ab%a0-%e6%93%8d%e4%bd%9c%e7%ac%a6</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-12&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;12&lt;/span&gt;&amp;nbsp;操作符&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.1&lt;/span&gt;&amp;nbsp;根据优先级规则,3 + 4 -&amp;gt; 5和3 -&amp;gt; 4 + 5是如何被求值的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			在REPL中执行即可得到结果。都是从左至右执行
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.2&lt;/span&gt;&amp;nbsp;BigInt类有一个pow方法,但没有用操作符字符。Scala类库的设计者为什么没有选用**(像Fortran那样)或者^(像Pascal那样)作为乘方操作符呢？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Scala中的操作符就是方法，其优先级是根据首字母来判断的，优先级如下
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
最高优先级:除以下字符外的操作符字符
 * / % 
+ - 
: 
= ! 
&amp;lt; &amp;gt; 
&amp;amp; 
&amp;circ; 
| 
非操作符
最低优先级:赋值操作符
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			一般乘方的操作符是优于乘法操作的，如果使用**作为乘方的话，那么其优先级则与*相同，而如果使用^的话，则优先级低于*操作。优先级都是有问题的。故没有使用这两种操作符
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.3&lt;/span&gt;&amp;nbsp;实现Fraction类，支持+&lt;sub&gt;*&lt;/sub&gt;/操作。支持约分，例如将15/-6变为-5/2。除以最大公约数,像这样:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;d&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(d==0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; n * sign(d)/gcd(n,d);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;den&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(d==0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; d * sign(d)/gcd(n,d);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt; = num + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; + den
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sign&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(a &amp;gt; 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (a &amp;lt; 0) -1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 0
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gcd&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(b==0) abs(a) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; gcd(b,a%b)
    ...
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.abs

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;d&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (d == 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; n * sign(d) / gcd(n, d);
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;den&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (d == 0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; d * sign(d) / gcd(n, d);

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt; = num + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; + den

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sign&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (a &amp;gt; 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (a &amp;lt; 0) -1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 0

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gcd&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (b == 0) abs(a) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; gcd(b, a % b)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac((&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.den) + (other.num * &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den),&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.den)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;-&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac((&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.den) - (other.num * &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den),&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.den)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.num,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.den)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;/&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.den,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.num)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;newFrac&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (b == 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; a * sign(b) / gcd(a, b);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (b == 0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b * sign(b) / gcd(a, b);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Fraction(x,y)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Fraction(15,-6)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Fraction(20,60)
  println(f)
  println(p)
  println(f + p)
  println(f - p)
  println(f * p)
  println(f / p)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.4&lt;/span&gt;&amp;nbsp;实现一个Money类,加入美元和美分字段。提供+,-操作符以及比较操作符==和&amp;lt;。举例来说，Money(1,75)+Money(0,50)==Money(2,25)应为true。你应该同时提供*和/操作符吗？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dollar&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;cent&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; (&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;) = (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent + other.cent) /% 100
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Money(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar + other.dollar + a,b)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;-&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; (&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;d&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt;) = (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.toCent() - other.toCent()) /% 100
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Money(d,c)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toCent&lt;/span&gt;()={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar * 100 + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;==&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar == other.dollar &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent == other.cent

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &amp;lt;(other:Money):Boolean = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar &amp;lt; other.dollar || (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar == other.dollar &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent &amp;lt; other.cent)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;dollar = &amp;quot;&lt;/span&gt; + dollar + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; cent = &amp;quot;&lt;/span&gt; + cent
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Money&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dollar&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;cent&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Money(dollar,cent)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;){

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m1&lt;/span&gt; = Money(1,200)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m2&lt;/span&gt; = Money(2,2)
    println(m1 + m2)
    println(m1 - m2)
    println(m1 == m2)
    println(m1 &amp;lt; m2)
    println(Money(1,75)+Money(0,50))
    println(Money(1,75)+Money(0,50)==Money(2,25))

  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不需要提供*和/操作。对于金额来说没有乘除操作
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.5&lt;/span&gt;&amp;nbsp;提供操作符用于构造HTML表格。例如:Table() | &amp;quot;Java&amp;quot; | &amp;quot;Scala&amp;quot; || &amp;quot;Gosling&amp;quot; | &amp;quot;Odersky&amp;quot; || &amp;quot;JVM&amp;quot; | &amp;quot;JVM,.NET&amp;quot;应产出:&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;td&amp;gt;Scala&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Gosling&amp;hellip;&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;|&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = Table()
    t.s = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.s + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;td&amp;gt;&amp;quot;&lt;/span&gt; + str + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;&lt;/span&gt;
    t
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;||&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = Table()
    t.s = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.s + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;quot;&lt;/span&gt; + str + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;&lt;/span&gt;
    t
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;quot;&lt;/span&gt; + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.s + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;quot;&lt;/span&gt;
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Table&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Table()
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    println(Table() | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Java&amp;quot;&lt;/span&gt; | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Scala&amp;quot;&lt;/span&gt; || &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Gosling&amp;quot;&lt;/span&gt; | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Odersky&amp;quot;&lt;/span&gt; || &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;JVM&amp;quot;&lt;/span&gt; | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;JVM,.NET&amp;quot;&lt;/span&gt;)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.6&lt;/span&gt;&amp;nbsp;提供一个ASCIIArt类，其对象包含类似这样的图形:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-6&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
 /\_/\
( &amp;#39; &amp;#39; )
(  -  )
 | | |
(__|__)
提供将两个ASCIIArt图形横向或纵向结合的操作符。选用适当优先级的操作符命名。纵向结合的实例
 /\_/\     -----
( &amp;#39; &amp;#39; )  / Hello \
(  -  ) &amp;lt;  Scala |
 | | |   \ Coder /
(__|__)    -----
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ArrayBuffer

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ArrayBuffer[ArrayBuffer[String]]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[ArrayBuffer[String]]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (str != &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !str.trim.eq(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)){
    str.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;[\r\n]+&amp;quot;&lt;/span&gt;).foreach{
      line =&amp;gt;
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      s += line
      arr += s
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;art&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;length&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.length &amp;gt;= other.arr.length) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.length &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; other.arr.length
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until length){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;thisArr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ArrayBuffer[String]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.length) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr(i) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;otherArr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ArrayBuffer[String]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (i &amp;lt; other.arr.length) other.arr(i) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      thisArr.foreach(s += _)
      otherArr.foreach(s += _)
      art.arr += s
    }
    art
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;art&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.foreach(art.arr += _)
    other.arr.foreach(art.arr += _)
    art
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;()={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ss&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    arr.foreach{
      ss += _.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;) + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
    }
    ss
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot; /\_/\&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |( &amp;#39; &amp;#39; )&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |(  -  )&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         | | | |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |(__|__)&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.stripMargin)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt( &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;    -----&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |  / Hello \&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          | &amp;lt;  Scala |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |  \ Coder /&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |    -----&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.stripMargin)
  println(a + b * b)
  println((a + b) * b)
  println(a * b)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.7&lt;/span&gt;&amp;nbsp;实现一个BigSequence类,将64个bit的序列打包在一个Long值中。提供apply和update操作来获取和设置某个具体的bit&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigSequence&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[Int](64)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; (i &amp;lt;- 0 until num.length){
    num(i) = -1
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pack&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long&lt;/span&gt;={
    num.filter(_ &amp;gt;= 0).mkString.toLong
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;BigSequence&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigSequence&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; BigSequence
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = 0
    num.toString.foreach{
      n=&amp;gt;
      b.num(i) = n.getNumericValue
      i+=1
    }
    b
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = BigSequence(10100)
    println(b.pack())
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.8&lt;/span&gt;&amp;nbsp;提供一个Matrix类&amp;mdash;你可以选择需要的是一个2*2的矩阵，任意大小的正方形矩阵，或m*n的矩阵。支持+和*操作。*操作应同样适用于单值，例如mat*2。单个元素可以通过mat(row,col)得到&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x + other.x,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y + other.y)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x + other,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y + other)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x * other.x,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y * other.y)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x * other,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y * other)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;()={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 1 to x){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(j &amp;lt;- 1 to y){
        str += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
      }
      str += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
    }
    str
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Matrix&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Matrix(x,y)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m&lt;/span&gt; = Matrix(2,2)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; = Matrix(3,4)
    println(m)
    println(n)
    println(m + n)
    println()
    println(m * n)
    println()
    println(m + 2)
    println()
    println(n * 2)
    println()
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.9&lt;/span&gt;&amp;nbsp;为RichFile类定义unapply操作，提取文件路径，名称和扩展名。举例来说，文件/home/cay/readme.txt的路径为/home/cay,名称为readme,扩展名为txt&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;){}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;RichFile&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; RichFile(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;unapply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;) = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(richFile.path == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;){
      None
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reg&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;([/\w+]+)/(\w+)\.(\w+)&amp;quot;&lt;/span&gt;.r
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reg&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r1&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r2&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r3&lt;/span&gt;) = richFile.path
      Some((r1,r2,r3))
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt; = RichFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/home/cay/readme.txt&amp;quot;&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r1&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r2&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r3&lt;/span&gt;) = richFile
    println(r1)
    println(r2)
    println(r3)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.10&lt;/span&gt;&amp;nbsp;为RichFile类定义一个unapplySeq，提取所有路径段。举例来说，对于/home/cay/readme.txt，你应该产出三个路径段的序列:home,cay和readme.txt&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;){}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;RichFile&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; RichFile(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;unapplySeq&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Option[Seq[String]]&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(richFile.path == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;){
      None
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
      Some(richFile.path.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;))
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt; = RichFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/home/cay/readme.txt&amp;quot;&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) = richFile
    println(r)
  }
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-12&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;12&lt;/span&gt;&amp;nbsp;操作符&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.1&lt;/span&gt;&amp;nbsp;根据优先级规则,3 + 4 -&amp;gt; 5和3 -&amp;gt; 4 + 5是如何被求值的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			在REPL中执行即可得到结果。都是从左至右执行
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.2&lt;/span&gt;&amp;nbsp;BigInt类有一个pow方法,但没有用操作符字符。Scala类库的设计者为什么没有选用**(像Fortran那样)或者^(像Pascal那样)作为乘方操作符呢？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Scala中的操作符就是方法，其优先级是根据首字母来判断的，优先级如下
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
最高优先级:除以下字符外的操作符字符
 * / % 
+ - 
: 
= ! 
&amp;lt; &amp;gt; 
&amp;amp; 
&amp;circ; 
| 
非操作符
最低优先级:赋值操作符
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			一般乘方的操作符是优于乘法操作的，如果使用**作为乘方的话，那么其优先级则与*相同，而如果使用^的话，则优先级低于*操作。优先级都是有问题的。故没有使用这两种操作符
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.3&lt;/span&gt;&amp;nbsp;实现Fraction类，支持+&lt;sub&gt;*&lt;/sub&gt;/操作。支持约分，例如将15/-6变为-5/2。除以最大公约数,像这样:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;d&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(d==0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; n * sign(d)/gcd(n,d);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;den&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(d==0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; d * sign(d)/gcd(n,d);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt; = num + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; + den
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sign&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(a &amp;gt; 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (a &amp;lt; 0) -1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 0
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gcd&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(b==0) abs(a) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; gcd(b,a%b)
    ...
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.abs

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;d&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (d == 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; n * sign(d) / gcd(n, d);
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;den&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (d == 0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; d * sign(d) / gcd(n, d);

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt; = num + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; + den

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sign&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (a &amp;gt; 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (a &amp;lt; 0) -1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 0

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gcd&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (b == 0) abs(a) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; gcd(b, a % b)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac((&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.den) + (other.num * &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den),&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.den)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;-&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac((&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.den) - (other.num * &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den),&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.den)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.num,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.den)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;/&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    newFrac(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.num * other.den,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.den * other.num)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;newFrac&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fraction&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (b == 0) 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; a * sign(b) / gcd(a, b);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (b == 0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b * sign(b) / gcd(a, b);
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Fraction(x,y)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;f&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Fraction(15,-6)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Fraction(20,60)
  println(f)
  println(p)
  println(f + p)
  println(f - p)
  println(f * p)
  println(f / p)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.4&lt;/span&gt;&amp;nbsp;实现一个Money类,加入美元和美分字段。提供+,-操作符以及比较操作符==和&amp;lt;。举例来说，Money(1,75)+Money(0,50)==Money(2,25)应为true。你应该同时提供*和/操作符吗？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dollar&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;cent&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigInt&lt;/span&gt;){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; (&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt;) = (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent + other.cent) /% 100
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Money(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar + other.dollar + a,b)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;-&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; (&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;d&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt;) = (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.toCent() - other.toCent()) /% 100
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Money(d,c)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toCent&lt;/span&gt;()={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar * 100 + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;==&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar == other.dollar &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent == other.cent

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &amp;lt;(other:Money):Boolean = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar &amp;lt; other.dollar || (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.dollar == other.dollar &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.cent &amp;lt; other.cent)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;dollar = &amp;quot;&lt;/span&gt; + dollar + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; cent = &amp;quot;&lt;/span&gt; + cent
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Money&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dollar&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;cent&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Money&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Money(dollar,cent)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;){

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m1&lt;/span&gt; = Money(1,200)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m2&lt;/span&gt; = Money(2,2)
    println(m1 + m2)
    println(m1 - m2)
    println(m1 == m2)
    println(m1 &amp;lt; m2)
    println(Money(1,75)+Money(0,50))
    println(Money(1,75)+Money(0,50)==Money(2,25))

  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不需要提供*和/操作。对于金额来说没有乘除操作
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.5&lt;/span&gt;&amp;nbsp;提供操作符用于构造HTML表格。例如:Table() | &amp;quot;Java&amp;quot; | &amp;quot;Scala&amp;quot; || &amp;quot;Gosling&amp;quot; | &amp;quot;Odersky&amp;quot; || &amp;quot;JVM&amp;quot; | &amp;quot;JVM,.NET&amp;quot;应产出:&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;td&amp;gt;Scala&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Gosling&amp;hellip;&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;|&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = Table()
    t.s = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.s + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;td&amp;gt;&amp;quot;&lt;/span&gt; + str + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;&lt;/span&gt;
    t
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;||&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = Table()
    t.s = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.s + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;quot;&lt;/span&gt; + str + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/td&amp;gt;&amp;quot;&lt;/span&gt;
    t
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;quot;&lt;/span&gt; + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.s + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;quot;&lt;/span&gt;
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Table&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Table&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Table()
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    println(Table() | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Java&amp;quot;&lt;/span&gt; | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Scala&amp;quot;&lt;/span&gt; || &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Gosling&amp;quot;&lt;/span&gt; | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Odersky&amp;quot;&lt;/span&gt; || &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;JVM&amp;quot;&lt;/span&gt; | &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;JVM,.NET&amp;quot;&lt;/span&gt;)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.6&lt;/span&gt;&amp;nbsp;提供一个ASCIIArt类，其对象包含类似这样的图形:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-6&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
 /\_/\
( &amp;#39; &amp;#39; )
(  -  )
 | | |
(__|__)
提供将两个ASCIIArt图形横向或纵向结合的操作符。选用适当优先级的操作符命名。纵向结合的实例
 /\_/\     -----
( &amp;#39; &amp;#39; )  / Hello \
(  -  ) &amp;lt;  Scala |
 | | |   \ Coder /
(__|__)    -----
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ArrayBuffer

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ArrayBuffer[ArrayBuffer[String]]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[ArrayBuffer[String]]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (str != &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !str.trim.eq(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)){
    str.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;[\r\n]+&amp;quot;&lt;/span&gt;).foreach{
      line =&amp;gt;
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      s += line
      arr += s
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;art&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;length&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.length &amp;gt;= other.arr.length) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.length &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; other.arr.length
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until length){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;thisArr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ArrayBuffer[String]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.length) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr(i) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;otherArr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ArrayBuffer[String]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (i &amp;lt; other.arr.length) other.arr(i) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[String]()
      thisArr.foreach(s += _)
      otherArr.foreach(s += _)
      art.arr += s
    }
    art
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;ASCIIArt&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;art&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.arr.foreach(art.arr += _)
    other.arr.foreach(art.arr += _)
    art
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;()={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ss&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    arr.foreach{
      ss += _.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;) + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
    }
    ss
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot; /\_/\&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |( &amp;#39; &amp;#39; )&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |(  -  )&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         | | | |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |(__|__)&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                         |&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.stripMargin)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ASCIIArt( &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;    -----&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |  / Hello \&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          | &amp;lt;  Scala |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |  \ Coder /&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |    -----&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                          |&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.stripMargin)
  println(a + b * b)
  println((a + b) * b)
  println(a * b)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.7&lt;/span&gt;&amp;nbsp;实现一个BigSequence类,将64个bit的序列打包在一个Long值中。提供apply和update操作来获取和设置某个具体的bit&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigSequence&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[Int](64)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; (i &amp;lt;- 0 until num.length){
    num(i) = -1
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pack&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long&lt;/span&gt;={
    num.filter(_ &amp;gt;= 0).mkString.toLong
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;BigSequence&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BigSequence&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; BigSequence
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;i&lt;/span&gt; = 0
    num.toString.foreach{
      n=&amp;gt;
      b.num(i) = n.getNumericValue
      i+=1
    }
    b
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = BigSequence(10100)
    println(b.pack())
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.8&lt;/span&gt;&amp;nbsp;提供一个Matrix类&amp;mdash;你可以选择需要的是一个2*2的矩阵，任意大小的正方形矩阵，或m*n的矩阵。支持+和*操作。*操作应同样适用于单值，例如mat*2。单个元素可以通过mat(row,col)得到&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x + other.x,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y + other.y)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;+&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x + other,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y + other)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x * other.x,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y * other.y)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;*&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;={
    Matrix(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x * other,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y * other)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;()={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 1 to x){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(j &amp;lt;- 1 to y){
        str += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
      }
      str += &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
    }
    str
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Matrix&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Matrix&lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Matrix(x,y)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;m&lt;/span&gt; = Matrix(2,2)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; = Matrix(3,4)
    println(m)
    println(n)
    println(m + n)
    println()
    println(m * n)
    println()
    println(m + 2)
    println()
    println(n * 2)
    println()
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.9&lt;/span&gt;&amp;nbsp;为RichFile类定义unapply操作，提取文件路径，名称和扩展名。举例来说，文件/home/cay/readme.txt的路径为/home/cay,名称为readme,扩展名为txt&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;){}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;RichFile&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; RichFile(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;unapply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;) = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(richFile.path == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;){
      None
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reg&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;([/\w+]+)/(\w+)\.(\w+)&amp;quot;&lt;/span&gt;.r
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reg&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r1&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r2&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r3&lt;/span&gt;) = richFile.path
      Some((r1,r2,r3))
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt; = RichFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/home/cay/readme.txt&amp;quot;&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r1&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r2&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r3&lt;/span&gt;) = richFile
    println(r1)
    println(r2)
    println(r3)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-12-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-12-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;12.10&lt;/span&gt;&amp;nbsp;为RichFile类定义一个unapplySeq，提取所有路径段。举例来说，对于/home/cay/readme.txt，你应该产出三个路径段的序列:home,cay和readme.txt&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-12-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;){}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;RichFile&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; RichFile(path)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;unapplySeq&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Option[Seq[String]]&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(richFile.path == &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;){
      None
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
      Some(richFile.path.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;))
    }
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;richFile&lt;/span&gt; = RichFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/home/cay/readme.txt&amp;quot;&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RichFile&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;r&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;@&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;_*&lt;/span&gt;) = richFile
    println(r)
  }
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>How Tomcat Works(Scala语言) 01 一个简单的Web服务器</title>
        <link href="http://liyouhai.com/scala-tomcat/how-tomcat-worksscala%25e8%25af%25ad%25e8%25a8%2580-01-%25e4%25b8%2580%25e4%25b8%25aa%25e7%25ae%2580%25e5%258d%2595%25e7%259a%2584web%25e6%259c%258d%25e5%258a%25a1%25e5%2599%25a8.html"/>
        <updated>2013-01-01T02:39:50+08:00</updated>
        <id>http://liyouhai.com//scala-tomcat/how-tomcat-worksscala%e8%af%ad%e8%a8%80-01-%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84web%e6%9c%8d%e5%8a%a1%e5%99%a8</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-1&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt;&amp;nbsp;简介&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			此文算是《How Tomcat Works》的Scala代码解析版。主要从代码角度来分析Tomcat的结构。使用Scala来进行说明。 采用简单说明+代码注释的方式来描述，代码也尽量简单化，做到以最少的文字来进行表述。
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-2&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt;&amp;nbsp;一个简单的Web服务器&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
				一个静态服务器，根据请求，返回请求的静态文件内容
			&lt;/li&gt;
&lt;li&gt;
				三个类HttpServer,Response,Request
			&lt;/li&gt;
&lt;li&gt;
				Request类表示一个请求，根据HTTP协议的请求信息，获取到请求的文件
			&lt;/li&gt;
&lt;li&gt;
				Response类表示一个响应，将找到的文件内容返回，或者返回404信息
			&lt;/li&gt;
&lt;li&gt;
				HttpServer类为服务器类，不停的等待请求。当获得一个请求，就组装成Resquest来获取文件，并通过Response返回响应
			&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.ServerSocket
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.InetAddress
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Ivan&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 12-11-24&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 上午10:41&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;静态服务器类&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;HttpServer&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;shutdown&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;核心方法，接受请求，返回响应&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;await&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;port&lt;/span&gt; = 8080
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;serverSocket&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ServerSocket(port, 1, InetAddress.getByName(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;))

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (!shutdown) {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;socket&lt;/span&gt; = serverSocket.accept()
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt; = socket.getInputStream()
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt; = socket.getOutputStream()

        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据请求构造Request，获取资源文件&lt;/span&gt;
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Request(input)
        request.parse()

        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;返回资源文件内容&lt;/span&gt;
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Response(output)
        response.request = request
        response.sendStaticResource()

        socket.close()

        shutdown = request.uri.equals(HttpServer.SHUTDOWN_COMMAND)
      } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;catch&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;e&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Exception =&amp;gt; e.printStackTrace&lt;/span&gt;()
      }
    }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;HttpServer&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;WEB_ROOT&lt;/span&gt; = System.getProperty(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;user.dir&amp;quot;&lt;/span&gt;) + File.separator + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;webroot&amp;quot;&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SHUTDOWN_COMMAND&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/SHUTDOWN&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;server&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HttpServer()
    server.await()
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.{IOException, InputStream}

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Ivan&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 12-11-24&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 上午11:36&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;请求类，表示一个请求&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;主要功能是从输入流中找到请求的文件名&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;InputStream&lt;/span&gt;) {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;uri&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;此处本来使用mkString，但是会死这&lt;/span&gt;
  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;应该是input是流导致的&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parse&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;lines&lt;/span&gt; = Source.fromInputStream(input).getLines()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (lines.hasNext) {
      uri = parseUri(lines.next())
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * 从请求中获得请求的资源链接&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * 使用正则表达式组来匹配&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * @param requestString&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * @return&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   */&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parseUri&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;requestString&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;[^ ]* *([^ ]*) *[\s\S]*&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.r
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) = requestString
    result
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.{File, FileInputStream, OutputStream}

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Ivan&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 12-11-24&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 上午11:49&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;相应类，表示一个相应&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;主要功能是向响应流中写入结果&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;OutputStream&lt;/span&gt;) {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;返回访问的文件，或者404&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sendStaticResource&lt;/span&gt;() {

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;file&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT, request.uri)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (file.exists()) {
        fis = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileInputStream(file)
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;将文件内容写到响应中&lt;/span&gt;
        writeToResponse(fis)
      } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;文件未找到，写入404信息&lt;/span&gt;
        output.write(Response.FileNotFoundMessage.getBytes())
      }
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;finally&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (fis != &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;)
        fis.close()
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;递归读取文件，写入到响应流&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;writeToResponse&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream&lt;/span&gt;){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ch&lt;/span&gt; =  fis.read(Response.bytes, 0, Response.BUFFER_SIZE)
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(ch != -1){
        output.write(Response.bytes, 0, ch)
        writeToResponse(fis)
      }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Response&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BUFFER_SIZE&lt;/span&gt; = 1024
  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;bytes需要在BUFFER_SIZE后定义，否则大小为0&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;bytes&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[Byte](Response.BUFFER_SIZE)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileNotFoundMessage&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;HTTP/1.1 404 File Not Found&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |Content-Type: text/html&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |Content-Length: 23&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |&amp;lt;h1&amp;gt;File Not Found&amp;lt;/h1&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
}&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-1&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt;&amp;nbsp;简介&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			此文算是《How Tomcat Works》的Scala代码解析版。主要从代码角度来分析Tomcat的结构。使用Scala来进行说明。 采用简单说明+代码注释的方式来描述，代码也尽量简单化，做到以最少的文字来进行表述。
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-2&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt;&amp;nbsp;一个简单的Web服务器&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
				一个静态服务器，根据请求，返回请求的静态文件内容
			&lt;/li&gt;
&lt;li&gt;
				三个类HttpServer,Response,Request
			&lt;/li&gt;
&lt;li&gt;
				Request类表示一个请求，根据HTTP协议的请求信息，获取到请求的文件
			&lt;/li&gt;
&lt;li&gt;
				Response类表示一个响应，将找到的文件内容返回，或者返回404信息
			&lt;/li&gt;
&lt;li&gt;
				HttpServer类为服务器类，不停的等待请求。当获得一个请求，就组装成Resquest来获取文件，并通过Response返回响应
			&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.ServerSocket
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.net.InetAddress
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Ivan&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 12-11-24&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 上午10:41&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;静态服务器类&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;HttpServer&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;shutdown&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;false&lt;/span&gt;

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;核心方法，接受请求，返回响应&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;await&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;port&lt;/span&gt; = 8080
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;serverSocket&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ServerSocket(port, 1, InetAddress.getByName(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;))

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;while&lt;/span&gt; (!shutdown) {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;socket&lt;/span&gt; = serverSocket.accept()
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt; = socket.getInputStream()
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt; = socket.getOutputStream()

        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;根据请求构造Request，获取资源文件&lt;/span&gt;
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Request(input)
        request.parse()

        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;返回资源文件内容&lt;/span&gt;
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;response&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Response(output)
        response.request = request
        response.sendStaticResource()

        socket.close()

        shutdown = request.uri.equals(HttpServer.SHUTDOWN_COMMAND)
      } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;catch&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;e&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Exception =&amp;gt; e.printStackTrace&lt;/span&gt;()
      }
    }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;HttpServer&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;WEB_ROOT&lt;/span&gt; = System.getProperty(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;user.dir&amp;quot;&lt;/span&gt;) + File.separator + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;webroot&amp;quot;&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SHUTDOWN_COMMAND&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;/SHUTDOWN&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;args&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[String]&lt;/span&gt;) {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;server&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HttpServer()
    server.await()
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.{IOException, InputStream}

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Ivan&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 12-11-24&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 上午11:36&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;请求类，表示一个请求&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;主要功能是从输入流中找到请求的文件名&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;input&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;InputStream&lt;/span&gt;) {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;uri&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;此处本来使用mkString，但是会死这&lt;/span&gt;
  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;应该是input是流导致的&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parse&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;lines&lt;/span&gt; = Source.fromInputStream(input).getLines()
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (lines.hasNext) {
      uri = parseUri(lines.next())
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * 从请求中获得请求的资源链接&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * 使用正则表达式组来匹配&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * @param requestString&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   * @return&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;   */&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;parseUri&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;requestString&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;[^ ]* *([^ ]*) *[\s\S]*&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.r
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt;) = requestString
    result
  }
}
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.{File, FileInputStream, OutputStream}

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Created with IntelliJ IDEA.&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * User: Ivan&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Date: 12-11-24&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; * Time: 上午11:49&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;相应类，表示一个相应&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;主要功能是向响应流中写入结果&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Response&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;output&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;OutputStream&lt;/span&gt;) {

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;request&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Request &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;返回访问的文件，或者404&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;sendStaticResource&lt;/span&gt;() {

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;file&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(HttpServer.WEB_ROOT, request.uri)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;try&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (file.exists()) {
        fis = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileInputStream(file)
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;将文件内容写到响应中&lt;/span&gt;
        writeToResponse(fis)
      } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; {
        &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;文件未找到，写入404信息&lt;/span&gt;
        output.write(Response.FileNotFoundMessage.getBytes())
      }
    } &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;finally&lt;/span&gt; {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (fis != &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;)
        fis.close()
    }
  }

  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;递归读取文件，写入到响应流&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;writeToResponse&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fis&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileInputStream&lt;/span&gt;){
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;ch&lt;/span&gt; =  fis.read(Response.bytes, 0, Response.BUFFER_SIZE)
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(ch != -1){
        output.write(Response.bytes, 0, ch)
        writeToResponse(fis)
      }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Response&lt;/span&gt; {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BUFFER_SIZE&lt;/span&gt; = 1024
  &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;bytes需要在BUFFER_SIZE后定义，否则大小为0&lt;/span&gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;bytes&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Array[Byte](Response.BUFFER_SIZE)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;FileNotFoundMessage&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;HTTP/1.1 404 File Not Found&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |Content-Type: text/html&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |Content-Length: 23&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;                       |&amp;lt;h1&amp;gt;File Not Found&amp;lt;/h1&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
}&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第十章 特质</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%258d%2581%25e7%25ab%25a0-%25e7%2589%25b9%25e8%25b4%25a8.html"/>
        <updated>2012-12-16T12:17:46+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%8d%81%e7%ab%a0-%e7%89%b9%e8%b4%a8</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-11&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt;&amp;nbsp;特质&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.1&lt;/span&gt;&amp;nbsp;java.awt.Rectangle类有两个很有用的方法translate和grow,但可惜的是像java.awt.geom.Ellipse2D这样的类没有。在Scala中，你可以解决掉这个问题。定义一个RenctangleLike特质,加入具体的translate和grow方法。提供任何你需要用来实现的抽象方法,以便你可以像如下代码这样混入该特质:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;egg&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; java.awt.geom.Ellipse2D.Double(5,10,20,30) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RectangleLike&lt;/span&gt;
egg.translate(10,-10)
egg.grow(10,20)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			使用自身类型使得trait可以操作x,y
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.geom.Ellipse2D


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RectangleLike&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;:Ellipse2D.Double=&amp;gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;translate&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x = x
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y = y
  }
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;grow&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x += x
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y += y
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;egg&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Ellipse2D.Double(5,10,20,30) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RectangleLike&lt;/span&gt;
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + egg.getX + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + egg.getY)
  egg.translate(10,-10)
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + egg.getX + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + egg.getY)
  egg.grow(10,20)
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + egg.getX + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + egg.getY)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.2&lt;/span&gt;&amp;nbsp;通过把scala.math.Ordered[Point]混入java.awt.Point的方式，定义OrderedPoint类。按辞典编辑方式排序，也就是说，如果x&amp;lt;x&amp;#39;或者x=x&amp;#39;且y&amp;lt;y&amp;#39;则(x,y)&amp;lt;(x&amp;#39;,y&amp;#39;)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.Point

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;OrderedPoint&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Ordered&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;]{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;compare&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;that&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x &amp;lt;= that.x &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y &amp;lt; that.y) -1 
                                   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x == that.x &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y == that.y) 0 
                                   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 1
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.3&lt;/span&gt;&amp;nbsp;查看BitSet类,将它的所有超类和特质绘制成一张图。忽略类型参数([&amp;hellip;]中的所有内容)。然后给出该特质的线性化规格说明&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个略
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.4&lt;/span&gt;&amp;nbsp;提供一个CryptoLogger类，将日志消息以凯撒密码加密。缺省情况下密匙为3，不过使用者也可以重写它。提供缺省密匙和-3作为密匙是的使用示例&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Logger&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;log&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 3):String
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;CryptoLogger&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Logger&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;log&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ( i &amp;lt;- str) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (key &amp;gt;= 0) (97 + ((i - 97 + key)%26)).toChar &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; (97 + ((i - 97 + 26 + key)%26)).toChar
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;plain&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;chenzhen&amp;quot;&lt;/span&gt;;
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;明文为：&amp;quot;&lt;/span&gt; + plain);
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;加密后为：&amp;quot;&lt;/span&gt; + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; CryptoLogger().log(plain));
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;加密后为：&amp;quot;&lt;/span&gt; + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; CryptoLogger().log(plain,-3));
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.5&lt;/span&gt;&amp;nbsp;JavaBean规范里有一种提法叫做属性变更监听器(property change listener)，这是bean用来通知其属性变更的标准方式。PropertyChangeSupport类对于任何想要支持属性变更通知其属性变更监听器的bean而言是个便捷的超类。但可惜已有其他超类的类&amp;mdash;比如JComponent&amp;mdash;必须重新实现相应的方法。将PropertyChangeSupport重新实现为一个特质,然后将它混入到java.awt.Point类中&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.Point
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.beans.PropertyChangeSupport

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PropertyChange&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PropertyChangeSupport&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point() &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PropertyChange&lt;/span&gt;
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.6&lt;/span&gt;&amp;nbsp;在Java AWT类库中,我们有一个Container类，一个可以用于各种组件的Component子类。举例来说,Button是一个Component,但Panel是Container。这是一个运转中的组合模式。Swing有JComponent和JContainer,但如果你仔细看的话，你会发现一些奇怪的细节。尽管把其他组件添加到比如JButton中毫无意义,JComponent依然扩展自Container。Swing的设计者们理想情况下应该会更倾向于图10-4中的设计。但在Java中那是不可能的。请解释这是为什么？Scala中如何用特质来设计出这样的效果?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			&lt;img alt=&quot;scala/01.jpg&quot; src=&quot;assets/01.jpg&quot; style=&quot;max-width: 940px; margin: 5px;&quot; /&gt;&amp;nbsp;Java只能单继承,JContainer不能同时继承自Container和JComponent。Scala可以通过特质解决这个问题.
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.7&lt;/span&gt;&amp;nbsp;市面上有不下数十种关于Scala特质的教程,用的都是些&amp;quot;在叫的狗&amp;quot;啦，&amp;quot;讲哲学的青蛙&amp;quot;啦之类的傻乎乎的例子。阅读和理解这些机巧的继承层级很乏味且对于理解问题没什么帮助,但自己设计一套继承层级就不同了,会很有启发。做一个你自己的关于特质的继承层级，要求体现出叠加在一起的特质,具体的和抽象的方法，以及具体的和抽象的字段&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fly&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fly&lt;/span&gt;(){
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;flying&amp;quot;&lt;/span&gt;)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flywithnowing&lt;/span&gt;()
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Walk&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;walk&lt;/span&gt;(){
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;walk&amp;quot;&lt;/span&gt;)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bird&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BlueBird&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bird&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fly&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Walk&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flywithnowing&lt;/span&gt;() {
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;BlueBird flywithnowing&amp;quot;&lt;/span&gt;)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; BlueBird()
  b.walk()
  b.flywithnowing()
  b.fly()
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.8&lt;/span&gt;&amp;nbsp;在java.io类库中，你可以通过BufferedInputStream修饰器来给输入流增加缓冲机制。用特质来重新实现缓冲。简单起见，重写read方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			后续JavaIO详细讨论
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.9&lt;/span&gt;&amp;nbsp;使用本章的日志生成器特质,给前一个练习中的方案增加日志功能，要求体现缓冲的效果&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			同上
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.10&lt;/span&gt;&amp;nbsp;实现一个IterableInputStream类，扩展java.io.InputStream并混入Iterable[Byte]特质&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.InputStream

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;IterableInputStream&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;InputStream&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Iterable&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Byte&lt;/span&gt;]{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;read&lt;/span&gt;(): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 0

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;iterator&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Iterator[Byte]&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-11&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt;&amp;nbsp;特质&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.1&lt;/span&gt;&amp;nbsp;java.awt.Rectangle类有两个很有用的方法translate和grow,但可惜的是像java.awt.geom.Ellipse2D这样的类没有。在Scala中，你可以解决掉这个问题。定义一个RenctangleLike特质,加入具体的translate和grow方法。提供任何你需要用来实现的抽象方法,以便你可以像如下代码这样混入该特质:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;egg&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; java.awt.geom.Ellipse2D.Double(5,10,20,30) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RectangleLike&lt;/span&gt;
egg.translate(10,-10)
egg.grow(10,20)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			使用自身类型使得trait可以操作x,y
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.geom.Ellipse2D


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RectangleLike&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;:Ellipse2D.Double=&amp;gt;
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;translate&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x = x
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y = y
  }
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;grow&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x += x
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y += y
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;egg&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Ellipse2D.Double(5,10,20,30) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RectangleLike&lt;/span&gt;
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + egg.getX + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + egg.getY)
  egg.translate(10,-10)
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + egg.getX + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + egg.getY)
  egg.grow(10,20)
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + egg.getX + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + egg.getY)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.2&lt;/span&gt;&amp;nbsp;通过把scala.math.Ordered[Point]混入java.awt.Point的方式，定义OrderedPoint类。按辞典编辑方式排序，也就是说，如果x&amp;lt;x&amp;#39;或者x=x&amp;#39;且y&amp;lt;y&amp;#39;则(x,y)&amp;lt;(x&amp;#39;,y&amp;#39;)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.Point

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;OrderedPoint&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Ordered&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;]{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;compare&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;that&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x &amp;lt;= that.x &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y &amp;lt; that.y) -1 
                                   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.x == that.x &amp;amp;&amp;amp; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;.y == that.y) 0 
                                   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 1
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.3&lt;/span&gt;&amp;nbsp;查看BitSet类,将它的所有超类和特质绘制成一张图。忽略类型参数([&amp;hellip;]中的所有内容)。然后给出该特质的线性化规格说明&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个略
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.4&lt;/span&gt;&amp;nbsp;提供一个CryptoLogger类，将日志消息以凯撒密码加密。缺省情况下密匙为3，不过使用者也可以重写它。提供缺省密匙和-3作为密匙是的使用示例&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Logger&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;log&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 3):String
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;CryptoLogger&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Logger&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;log&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;key&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ( i &amp;lt;- str) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (key &amp;gt;= 0) (97 + ((i - 97 + key)%26)).toChar &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; (97 + ((i - 97 + 26 + key)%26)).toChar
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;plain&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;chenzhen&amp;quot;&lt;/span&gt;;
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;明文为：&amp;quot;&lt;/span&gt; + plain);
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;加密后为：&amp;quot;&lt;/span&gt; + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; CryptoLogger().log(plain));
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;加密后为：&amp;quot;&lt;/span&gt; + &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; CryptoLogger().log(plain,-3));
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.5&lt;/span&gt;&amp;nbsp;JavaBean规范里有一种提法叫做属性变更监听器(property change listener)，这是bean用来通知其属性变更的标准方式。PropertyChangeSupport类对于任何想要支持属性变更通知其属性变更监听器的bean而言是个便捷的超类。但可惜已有其他超类的类&amp;mdash;比如JComponent&amp;mdash;必须重新实现相应的方法。将PropertyChangeSupport重新实现为一个特质,然后将它混入到java.awt.Point类中&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.Point
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.beans.PropertyChangeSupport

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PropertyChange&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PropertyChangeSupport&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point() &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;PropertyChange&lt;/span&gt;
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.6&lt;/span&gt;&amp;nbsp;在Java AWT类库中,我们有一个Container类，一个可以用于各种组件的Component子类。举例来说,Button是一个Component,但Panel是Container。这是一个运转中的组合模式。Swing有JComponent和JContainer,但如果你仔细看的话，你会发现一些奇怪的细节。尽管把其他组件添加到比如JButton中毫无意义,JComponent依然扩展自Container。Swing的设计者们理想情况下应该会更倾向于图10-4中的设计。但在Java中那是不可能的。请解释这是为什么？Scala中如何用特质来设计出这样的效果?&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			&lt;img alt=&quot;scala/01.jpg&quot; src=&quot;assets/01.jpg&quot; style=&quot;max-width: 940px; margin: 5px;&quot; /&gt;&amp;nbsp;Java只能单继承,JContainer不能同时继承自Container和JComponent。Scala可以通过特质解决这个问题.
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.7&lt;/span&gt;&amp;nbsp;市面上有不下数十种关于Scala特质的教程,用的都是些&amp;quot;在叫的狗&amp;quot;啦，&amp;quot;讲哲学的青蛙&amp;quot;啦之类的傻乎乎的例子。阅读和理解这些机巧的继承层级很乏味且对于理解问题没什么帮助,但自己设计一套继承层级就不同了,会很有启发。做一个你自己的关于特质的继承层级，要求体现出叠加在一起的特质,具体的和抽象的方法，以及具体的和抽象的字段&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fly&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;fly&lt;/span&gt;(){
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;flying&amp;quot;&lt;/span&gt;)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flywithnowing&lt;/span&gt;()
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Walk&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;walk&lt;/span&gt;(){
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;walk&amp;quot;&lt;/span&gt;)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bird&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BlueBird&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bird&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Fly&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Walk&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flywithnowing&lt;/span&gt;() {
    println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;BlueBird flywithnowing&amp;quot;&lt;/span&gt;)
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; BlueBird()
  b.walk()
  b.flywithnowing()
  b.fly()
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.8&lt;/span&gt;&amp;nbsp;在java.io类库中，你可以通过BufferedInputStream修饰器来给输入流增加缓冲机制。用特质来重新实现缓冲。简单起见，重写read方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			后续JavaIO详细讨论
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.9&lt;/span&gt;&amp;nbsp;使用本章的日志生成器特质,给前一个练习中的方案增加日志功能，要求体现缓冲的效果&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			同上
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-11-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-11-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;11.10&lt;/span&gt;&amp;nbsp;实现一个IterableInputStream类，扩展java.io.InputStream并混入Iterable[Byte]特质&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.InputStream

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;IterableInputStream&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;InputStream&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Iterable&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Byte&lt;/span&gt;]{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;read&lt;/span&gt;(): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 0

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;iterator&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Iterator[Byte]&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;null&lt;/span&gt;
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第九章 文件和正则表达式</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e4%25b9%259d%25e7%25ab%25a0-%25e6%2596%2587%25e4%25bb%25b6%25e5%2592%258c%25e6%25ad%25a3%25e5%2588%2599%25e8%25a1%25a8%25e8%25be%25be%25e5%25bc%258f.html"/>
        <updated>2012-12-12T11:41:35+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e4%b9%9d%e7%ab%a0-%e6%96%87%e4%bb%b6%e5%92%8c%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-10&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt;&amp;nbsp;文件和正则表达式&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.1&lt;/span&gt;&amp;nbsp;编写一小段Scala代码，将某个文件中的行倒转顺序(将最后一行作为第一行,依此类推)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reader&lt;/span&gt; = Source.fromFile(path).getLines()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt; = reader.toArray.reverse

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pw&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(path)

result.foreach(line =&amp;gt; pw.write(line + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;))

pw.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.2&lt;/span&gt;&amp;nbsp;编写Scala程序,从一个带有制表符的文件读取内容,将每个制表符替换成一组空格,使得制表符隔开的n列仍然保持纵向对齐,并将结果写入同一个文件&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reader&lt;/span&gt; = Source.fromFile(path).getLines()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ( t &amp;lt;- reader) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; t.replaceAll(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;    &amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pw&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(path)

result.foreach(line =&amp;gt; pw.write(line + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;))

pw.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.3&lt;/span&gt;&amp;nbsp;编写一小段Scala代码,从一个文件读取内容并把所有字符数大于12的单词打印到控制台。如果你能用单行代码完成会有额外奖励&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;).foreach(arg =&amp;gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(arg.length &amp;gt; 12) println(arg))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.4&lt;/span&gt;&amp;nbsp;编写Scala程序，从包含浮点数的文本文件读取内容，打印出文件中所有浮点数之和，平均值，最大值和最小值&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nums&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;total&lt;/span&gt; = 0d

nums.foreach(total += _.toDouble)

println(total)
println(total/nums.length)
println(nums.max)
println(nums.min)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.5&lt;/span&gt;&amp;nbsp;编写Scala程序，向文件中写入2的n次方及其倒数，指数n从0到20。对齐各列:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-5&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
  1         1
  2         0.5
  4         0.25
...         ...
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pw&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ( n &amp;lt;- 0 to 20){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = BigDecimal(2).pow(n)
  pw.write(t.toString())
  pw.write(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\t\t&amp;quot;&lt;/span&gt;)
  pw.write((1/t).toString())
  pw.write(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;)
}

pw.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.6&lt;/span&gt;&amp;nbsp;编写正则表达式,匹配Java或C++程序代码中类似&amp;quot;like this,maybe with \&amp;quot; or\\&amp;quot;这样的带引号的字符串。编写Scala程序将某个源文件中所有类似的字符串打印出来&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\w+\s+&lt;pre wp-pre-tag-6&gt;&lt;/pre&gt;quot;&amp;quot;&lt;/span&gt;.r

pattern.findAllIn(source).foreach(println)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.7&lt;/span&gt;&amp;nbsp;编写Scala程序，从文本文件读取内容，并打印出所有的非浮点数的词法单位。要求使用正则表达式&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;[^((\d+\.){0,1}\d+)^\s+]+&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.r

pattern.findAllIn(source).foreach(println)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.8&lt;/span&gt;&amp;nbsp;编写Scala程序打印出某个网页中所有img标签的src属性。使用正则表达式和分组&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;D:\ProgramCodes\ScalaTest\src\test.txt&amp;quot;&lt;/span&gt;).mkString
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;img[^&gt;]+(src\s*=\s*&amp;quot;&lt;/span&gt;[^&amp;gt;^&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;]+&amp;quot;&lt;/span&gt;)[^&gt;]*&amp;gt;&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;.r&lt;/span&gt;

&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;for (pattern(str) &amp;lt;- pattern.findAllIn(source)) println(str)&lt;/span&gt;

&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.9&lt;/span&gt;&amp;nbsp;编写Scala程序，盘点给定目录及其子目录中总共有多少以.class为扩展名的文件&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dir&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(path)


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;subdirs&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dir&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Iterator[File]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;children&lt;/span&gt; = dir.listFiles().filter(_.getName.endsWith(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;))
  children.toIterator ++ dir.listFiles().filter(_.isDirectory).toIterator.flatMap(subdirs _)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; = subdirs(dir).length

println(n)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.10&lt;/span&gt;&amp;nbsp;扩展那个可序列化的Person类，让它能以一个集合保存某个人的朋友信息。构造出一些Person对象，让他们中的一些人成为朋友，然后将Array[Person]保存到文件。将这个数组从文件中重新读出来，校验朋友关系是否完好&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			注意,请在main中执行。脚本执行无法序列化。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ArrayBuffer
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.{ObjectInputStream, FileOutputStream, FileInputStream, ObjectOutputStream}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Person&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Serializable&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;friends&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[Person]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;addFriend&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;friend&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Person&lt;/span&gt;){
    friends += friend
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;() = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;My name is &amp;quot;&lt;/span&gt; + name + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; and my friends name is &amp;quot;&lt;/span&gt;
    friends.foreach(str += _.name + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)
    str
  }
}


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p1&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Person(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Ivan&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p2&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Person(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;F2&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p3&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Person(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;F3&amp;quot;&lt;/span&gt;)

  p1.addFriend(p2)
  p1.addFriend(p3)
  println(p1)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;out&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ObjectOutputStream(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileOutputStream(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;))
  out.writeObject(p1)
  out.close()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;in&lt;/span&gt; =  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ObjectInputStream(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;))
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = in.readObject().asInstanceOf[Person]
  println(p)
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-10&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt;&amp;nbsp;文件和正则表达式&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.1&lt;/span&gt;&amp;nbsp;编写一小段Scala代码，将某个文件中的行倒转顺序(将最后一行作为第一行,依此类推)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reader&lt;/span&gt; = Source.fromFile(path).getLines()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt; = reader.toArray.reverse

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pw&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(path)

result.foreach(line =&amp;gt; pw.write(line + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;))

pw.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.2&lt;/span&gt;&amp;nbsp;编写Scala程序,从一个带有制表符的文件读取内容,将每个制表符替换成一组空格,使得制表符隔开的n列仍然保持纵向对齐,并将结果写入同一个文件&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reader&lt;/span&gt; = Source.fromFile(path).getLines()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ( t &amp;lt;- reader) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; t.replaceAll(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;    &amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pw&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(path)

result.foreach(line =&amp;gt; pw.write(line + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;))

pw.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.3&lt;/span&gt;&amp;nbsp;编写一小段Scala代码,从一个文件读取内容并把所有字符数大于12的单词打印到控制台。如果你能用单行代码完成会有额外奖励&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;).foreach(arg =&amp;gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(arg.length &amp;gt; 12) println(arg))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.4&lt;/span&gt;&amp;nbsp;编写Scala程序，从包含浮点数的文本文件读取内容，打印出文件中所有浮点数之和，平均值，最大值和最小值&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nums&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;total&lt;/span&gt; = 0d

nums.foreach(total += _.toDouble)

println(total)
println(total/nums.length)
println(nums.max)
println(nums.min)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.5&lt;/span&gt;&amp;nbsp;编写Scala程序，向文件中写入2的n次方及其倒数，指数n从0到20。对齐各列:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-5&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
  1         1
  2         0.5
  4         0.25
...         ...
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.PrintWriter

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pw&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; PrintWriter(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt; ( n &amp;lt;- 0 to 20){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = BigDecimal(2).pow(n)
  pw.write(t.toString())
  pw.write(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\t\t&amp;quot;&lt;/span&gt;)
  pw.write((1/t).toString())
  pw.write(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;)
}

pw.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.6&lt;/span&gt;&amp;nbsp;编写正则表达式,匹配Java或C++程序代码中类似&amp;quot;like this,maybe with \&amp;quot; or\\&amp;quot;这样的带引号的字符串。编写Scala程序将某个源文件中所有类似的字符串打印出来&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\w+\s+&lt;pre wp-pre-tag-6&gt;&lt;/pre&gt;quot;&amp;quot;&lt;/span&gt;.r

pattern.findAllIn(source).foreach(println)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.7&lt;/span&gt;&amp;nbsp;编写Scala程序，从文本文件读取内容，并打印出所有的非浮点数的词法单位。要求使用正则表达式&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;[^((\d+\.){0,1}\d+)^\s+]+&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;.r

pattern.findAllIn(source).foreach(println)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.8&lt;/span&gt;&amp;nbsp;编写Scala程序打印出某个网页中所有img标签的src属性。使用正则表达式和分组&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;D:\ProgramCodes\ScalaTest\src\test.txt&amp;quot;&lt;/span&gt;).mkString
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;pattern&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;img[^&gt;]+(src\s*=\s*&amp;quot;&lt;/span&gt;[^&amp;gt;^&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;]+&amp;quot;&lt;/span&gt;)[^&gt;]*&amp;gt;&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&amp;quot;.r&lt;/span&gt;

&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;for (pattern(str) &amp;lt;- pattern.findAllIn(source)) println(str)&lt;/span&gt;

&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.9&lt;/span&gt;&amp;nbsp;编写Scala程序，盘点给定目录及其子目录中总共有多少以.class为扩展名的文件&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.File

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;path&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dir&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; File(path)


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;subdirs&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;dir&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;File&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Iterator[File]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;children&lt;/span&gt; = dir.listFiles().filter(_.getName.endsWith(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;))
  children.toIterator ++ dir.listFiles().filter(_.isDirectory).toIterator.flatMap(subdirs _)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; = subdirs(dir).length

println(n)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-10-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-10-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;10.10&lt;/span&gt;&amp;nbsp;扩展那个可序列化的Person类，让它能以一个集合保存某个人的朋友信息。构造出一些Person对象，让他们中的一些人成为朋友，然后将Array[Person]保存到文件。将这个数组从文件中重新读出来，校验朋友关系是否完好&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			注意,请在main中执行。脚本执行无法序列化。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ArrayBuffer
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.io.{ObjectInputStream, FileOutputStream, FileInputStream, ObjectOutputStream}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Person&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Serializable&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;friends&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[Person]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;addFriend&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;friend&lt;/span&gt; : &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Person&lt;/span&gt;){
    friends += friend
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;() = {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;My name is &amp;quot;&lt;/span&gt; + name + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; and my friends name is &amp;quot;&lt;/span&gt;
    friends.foreach(str += _.name + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)
    str
  }
}


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p1&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Person(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Ivan&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p2&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Person(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;F2&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p3&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Person(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;F3&amp;quot;&lt;/span&gt;)

  p1.addFriend(p2)
  p1.addFriend(p3)
  println(p1)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;out&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ObjectOutputStream(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileOutputStream(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;))
  out.writeObject(p1)
  out.close()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;in&lt;/span&gt; =  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ObjectInputStream(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;))
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = in.readObject().asInstanceOf[Person]
  println(p)
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第八章 继承</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%2585%25ab%25e7%25ab%25a0-%25e7%25bb%25a7%25e6%2589%25bf.html"/>
        <updated>2012-12-11T12:46:24+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%85%ab%e7%ab%a0-%e7%bb%a7%e6%89%bf</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-9&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt;&amp;nbsp;继承&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.1&lt;/span&gt;&amp;nbsp;扩展如下的BankAccount类，新类CheckingAccount对每次存款和取款都收取1美元的手续费&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;initialBalance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;balance&lt;/span&gt; = initialBalance
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = { balance += amount; balance}
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = {balance -= amount; balance}
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			继承语法的使用。代码如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;CheckingAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;initialBalance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(initialBalance){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(amount - 1)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.withdraw(amount + 1)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.2&lt;/span&gt;&amp;nbsp;扩展前一个练习的BankAccount类，新类SavingsAccount每个月都有利息产生(earnMonthlyInterest方法被调用)，并且有每月三次免手续费的存款或取款。在earnMonthlyInterest方法中重置交易计数。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SavingsAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;initialBalance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(initialBalance){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;earnMonthlyInterest&lt;/span&gt;()={
    num = 3
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(1)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= {
    num -= 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(num &amp;lt; 0) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(amount - 1) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(amount)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= {
    num -= 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (num &amp;lt; 0) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.withdraw(amount + 1) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.withdraw(amount)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.3&lt;/span&gt;&amp;nbsp;翻开你喜欢的Java或C++教科书，一定会找到用来讲解继承层级的实例，可能是员工，宠物，图形或类似的东西。用Scala来实现这个示例。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Thinking in Java中的代码
		&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
    Art(){System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Art constructor&amp;quot;&lt;/span&gt;);}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
    Drawing() {System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Drawing constructor&amp;quot;&lt;/span&gt;);}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Cartoon&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; Cartoon() { System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Cartoon constructor&amp;quot;&lt;/span&gt;);}
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			使用Scala改写如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Art constructor&amp;quot;&lt;/span&gt;)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Drawing constructor&amp;quot;&lt;/span&gt;)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Cartoon&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt;{
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Cartoon constructor&amp;quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.4&lt;/span&gt;&amp;nbsp;定义一个抽象类Item,加入方法price和description。SimpleItem是一个在构造器中给出价格和描述的物件。利用val可以重写def这个事实。Bundle是一个可以包含其他物件的物件。其价格是打包中所有物件的价格之和。同时提供一个将物件添加到打包当中的机制，以及一个适合的description方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ArrayBuffer


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;
&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; description():String

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;description:&amp;quot;&lt;/span&gt; + description() + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;  price:&amp;quot;&lt;/span&gt; + price()
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SimpleItem&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;{

}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bundle&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;items&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[Item]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;addItem&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;item&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;){
    items += item
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;(): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;total&lt;/span&gt; = 0d
    items.foreach(total += _.price())
    total
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt;(): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    items.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)
  }
}

&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.5&lt;/span&gt;&amp;nbsp;设计一个Point类，其x和y坐标可以通过构造器提供。提供一个子类LabeledPoint，其构造器接受一个标签值和x,y坐标,比如:new LabeledPoint(&amp;quot;Black Thursday&amp;quot;,1929,230.07)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;LabeledPoint&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;label&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;(x,y){
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.6&lt;/span&gt;&amp;nbsp;定义一个抽象类Shape，一个抽象方法centerPoint，以及该抽象类的子类Rectangle和Circle。为子类提供合适的构造器，并重写centerPoint方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Shape&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;centerPoint&lt;/span&gt;()
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Rectangle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;startX&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;startY&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;endX&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;endY&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Shape&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;centerPoint&lt;/span&gt;() {}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Circle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;radius&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Shape&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;centerPoint&lt;/span&gt;() {}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.7&lt;/span&gt;&amp;nbsp;提供一个Square类，扩展自java.awt.Rectangle并且是三个构造器：一个以给定的端点和宽度构造正方形，一个以(0,0)为端点和给定的宽度构造正方形，一个以(0,0)为端点,0为宽度构造正方形&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.{Point, Rectangle}


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Square&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;point&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;width&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Rectangle&lt;/span&gt;(point.x,point.y,width,width){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point(0,0),0)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;width&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point(0,0),width)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.8&lt;/span&gt;&amp;nbsp;编译8.6节中的Person和SecretAgent类并使用javap分析类文件。总共有多少name的getter方法？它们分别取什么值？(提示：可以使用-c和-private选项)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			总共两个。Person中取得的是传入的name,而SecretAgent中取得的是默认的&amp;quot;secret&amp;quot;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.9&lt;/span&gt;&amp;nbsp;在8.10节的Creature类中，将val range替换成一个def。如果你在Ant子类中也用def的话会有什么效果？如果在子类中使用val又会有什么效果？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			在Ant中使用def没有问题。但是如果使用val则无法编译。因为val只能重写不带参数的def。这里的def是带参数的
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.10&lt;/span&gt;&amp;nbsp;文件scala/collection/immutable/Stack.scala包含如下定义:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Stack&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;A&lt;/span&gt;] &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;protected&lt;/span&gt; (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;elems&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[A]&lt;/span&gt;)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			请解释protected关键字的含义。(提示：回顾我们在第5章中关于私有构造器的讨论) 此构造方法只能被其子类来调用,而不能被外界直接调用
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-9&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt;&amp;nbsp;继承&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.1&lt;/span&gt;&amp;nbsp;扩展如下的BankAccount类，新类CheckingAccount对每次存款和取款都收取1美元的手续费&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;initialBalance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;balance&lt;/span&gt; = initialBalance
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = { balance += amount; balance}
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) = {balance -= amount; balance}
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			继承语法的使用。代码如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;CheckingAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;initialBalance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(initialBalance){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(amount - 1)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.withdraw(amount + 1)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.2&lt;/span&gt;&amp;nbsp;扩展前一个练习的BankAccount类，新类SavingsAccount每个月都有利息产生(earnMonthlyInterest方法被调用)，并且有每月三次免手续费的存款或取款。在earnMonthlyInterest方法中重置交易计数。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SavingsAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;initialBalance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(initialBalance){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= _

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;earnMonthlyInterest&lt;/span&gt;()={
    num = 3
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(1)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= {
    num -= 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(num &amp;lt; 0) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(amount - 1) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.deposit(amount)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;amount&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= {
    num -= 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (num &amp;lt; 0) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.withdraw(amount + 1) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.withdraw(amount)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.3&lt;/span&gt;&amp;nbsp;翻开你喜欢的Java或C++教科书，一定会找到用来讲解继承层级的实例，可能是员工，宠物，图形或类似的东西。用Scala来实现这个示例。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Thinking in Java中的代码
		&lt;/p&gt;
&lt;pre class=&quot;src src-java&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
    Art(){System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Art constructor&amp;quot;&lt;/span&gt;);}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
    Drawing() {System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Drawing constructor&amp;quot;&lt;/span&gt;);}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Cartoon&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;public&lt;/span&gt; Cartoon() { System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Cartoon constructor&amp;quot;&lt;/span&gt;);}
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			使用Scala改写如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Art constructor&amp;quot;&lt;/span&gt;)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Art&lt;/span&gt;{
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Drawing constructor&amp;quot;&lt;/span&gt;)
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Cartoon&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Drawing&lt;/span&gt;{
  println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Cartoon constructor&amp;quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.4&lt;/span&gt;&amp;nbsp;定义一个抽象类Item,加入方法price和description。SimpleItem是一个在构造器中给出价格和描述的物件。利用val可以重写def这个事实。Bundle是一个可以包含其他物件的物件。其价格是打包中所有物件的价格之和。同时提供一个将物件添加到打包当中的机制，以及一个适合的description方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; collection.mutable.ArrayBuffer


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;
&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; description():String

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;description:&amp;quot;&lt;/span&gt; + description() + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;  price:&amp;quot;&lt;/span&gt; + price()
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;SimpleItem&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;{

}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Bundle&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;items&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; ArrayBuffer[Item]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;addItem&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;item&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Item&lt;/span&gt;){
    items += item
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;price&lt;/span&gt;(): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;total&lt;/span&gt; = 0d
    items.foreach(total += _.price())
    total
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;description&lt;/span&gt;(): &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= {
    items.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)
  }
}

&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.5&lt;/span&gt;&amp;nbsp;设计一个Point类，其x和y坐标可以通过构造器提供。提供一个子类LabeledPoint，其构造器接受一个标签值和x,y坐标,比如:new LabeledPoint(&amp;quot;Black Thursday&amp;quot;,1929,230.07)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;LabeledPoint&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;label&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;(x,y){
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.6&lt;/span&gt;&amp;nbsp;定义一个抽象类Shape，一个抽象方法centerPoint，以及该抽象类的子类Rectangle和Circle。为子类提供合适的构造器，并重写centerPoint方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Shape&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;centerPoint&lt;/span&gt;()
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Rectangle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;startX&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;startY&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;endX&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;endY&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Shape&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;centerPoint&lt;/span&gt;() {}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Circle&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;radius&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Shape&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;centerPoint&lt;/span&gt;() {}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.7&lt;/span&gt;&amp;nbsp;提供一个Square类，扩展自java.awt.Rectangle并且是三个构造器：一个以给定的端点和宽度构造正方形，一个以(0,0)为端点和给定的宽度构造正方形，一个以(0,0)为端点,0为宽度构造正方形&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.awt.{Point, Rectangle}


&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Square&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;point&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;width&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Rectangle&lt;/span&gt;(point.x,point.y,width,width){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point(0,0),0)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;width&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point(0,0),width)
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.8&lt;/span&gt;&amp;nbsp;编译8.6节中的Person和SecretAgent类并使用javap分析类文件。总共有多少name的getter方法？它们分别取什么值？(提示：可以使用-c和-private选项)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			总共两个。Person中取得的是传入的name,而SecretAgent中取得的是默认的&amp;quot;secret&amp;quot;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.9&lt;/span&gt;&amp;nbsp;在8.10节的Creature类中，将val range替换成一个def。如果你在Ant子类中也用def的话会有什么效果？如果在子类中使用val又会有什么效果？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			在Ant中使用def没有问题。但是如果使用val则无法编译。因为val只能重写不带参数的def。这里的def是带参数的
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-9-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-9-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;9.10&lt;/span&gt;&amp;nbsp;文件scala/collection/immutable/Stack.scala包含如下定义:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Stack&lt;/span&gt;[&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;A&lt;/span&gt;] &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;protected&lt;/span&gt; (&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;elems&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;List[A]&lt;/span&gt;)
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			请解释protected关键字的含义。(提示：回顾我们在第5章中关于私有构造器的讨论) 此构造方法只能被其子类来调用,而不能被外界直接调用
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第七章 包和引入</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e4%25b8%2583%25e7%25ab%25a0-%25e5%258c%2585%25e5%2592%258c%25e5%25bc%2595%25e5%2585%25a5.html"/>
        <updated>2012-12-10T11:26:58+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e4%b8%83%e7%ab%a0-%e5%8c%85%e5%92%8c%e5%bc%95%e5%85%a5</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-8&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt;&amp;nbsp;包和引入&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt;&amp;nbsp;编写示例程序，展示为什么&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com.horstmann.impatient
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不同于
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; horstmann
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; impatient
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			分别使用package的效果如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;() {}

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; horstmann {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;) {}

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; impatient {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T3&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t2&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;) {} 
    }
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			子包里的类可以使用父包里的类。但是第一种方式不可以
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com.horstmann.impatient{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T4&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t3&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T3&lt;/span&gt;)      &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;无法找到T1&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.2&lt;/span&gt;&amp;nbsp;编写一段让你的Scala朋友们感到困惑的代码，使用一个不在顶部的com包&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这样可以吗？
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;() {}

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; horstmann {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;) {}

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; impatient {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T3&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t2&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;) {}
    }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; com._

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;TT&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;){

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.3&lt;/span&gt;&amp;nbsp;编写一个包random,加入函数nextInt():Int,nextDouble():Double,setSeed(seed:Int):Unit。生成随机数的算法采用线性同余生成器:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-3&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
后值 = (前值 * a + b)mod 2^n
其中,a = 1664525,b=1013904223,n = 32,前值的初始值为seed
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; random{
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;random&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;seed&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= _
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = BigDecimal(1664525)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = BigDecimal(1013904223)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; = 32


  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nextInt&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;temp&lt;/span&gt; = (seed * a + b) % BigDecimal(2).pow(n)
    seed = temp.toInt
    seed
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nextDouble&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;temp&lt;/span&gt; = (seed * a + b) % BigDecimal(2).pow(n)
    seed = temp.toInt
    temp.toDouble
  }
}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; test {
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; random.random

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {
  random.seed = 4
  println(random.nextDouble())
  println(random.nextDouble())
  println(random.nextDouble())
  println(random.nextDouble())
  println(random.nextInt())
  println(random.nextInt())
  println(random.nextInt())
  println(random.nextInt())
}

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.4&lt;/span&gt;&amp;nbsp;在你看来Scala的设计者为什么要提供package object语法而不是简单的让你将函数和变量添加到包中呢？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			JVM不支持。。。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.5&lt;/span&gt;&amp;nbsp;private[com] def giveRaise(rate:Double)的含义是什么？有用吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			除了com包可访问，其他包都不能访问。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.6&lt;/span&gt;&amp;nbsp;编写一段程序,将Java哈希映射中的所有元素拷贝到Scala哈希映射。用引入语句重命名这两个类。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.{HashMap =&amp;gt; JavaHashMap}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.HashMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; JavaHashMap[String,String]()
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;smap&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[String,String]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- map.keySet().toArray){
    smap += (key.toString -&amp;gt; map.get(key))
  }

  println(smap.mkString)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.7&lt;/span&gt;&amp;nbsp;在前一个练习中，将所有引入语句移动到尽可能小的作用域里&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.{HashMap =&amp;gt; JavaHashMap}

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; JavaHashMap[String,String]()
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.HashMap

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;smap&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[String,String]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- map.keySet().toArray){
    smap += (key.toString -&amp;gt; map.get(key))
  }

  println(smap.mkString)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.8&lt;/span&gt;&amp;nbsp;以下代码的作用是什么？这是个好主意吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java._
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax._
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			导入java和javax下的所有类。而java和javax下是没有类的。所以此代码无用
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.9&lt;/span&gt;&amp;nbsp;编写一段程序，引入java.lang.System类，从user.name系统属性读取用户名，从Console对象读取一个密码,如果密码不是&amp;quot;secret&amp;quot;，则在标准错误流中打印一个消息；如果密码是&amp;quot;secret&amp;quot;，则在标准输出流中打印一个问候消息。不要使用任何其他引入，也不要使用任何限定词(带句点的那种)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.lang.System

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;password&lt;/span&gt; = Console.readLine()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (password equals &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;) System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + System.getProperty(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;user.name&amp;quot;&lt;/span&gt;))
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; System.err.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;password error!&amp;quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.10&lt;/span&gt;&amp;nbsp;除了StringBuilder,还有哪些java.lang的成员是被scala包覆盖的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			直接比对java.lang下的类和scala包下的类即可
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-8&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt;&amp;nbsp;包和引入&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt;&amp;nbsp;编写示例程序，展示为什么&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com.horstmann.impatient
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不同于
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; horstmann
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; impatient
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			分别使用package的效果如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;() {}

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; horstmann {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;) {}

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; impatient {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T3&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t2&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;) {} 
    }
  }
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			子包里的类可以使用父包里的类。但是第一种方式不可以
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com.horstmann.impatient{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T4&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t3&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T3&lt;/span&gt;)      &lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;无法找到T1&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.2&lt;/span&gt;&amp;nbsp;编写一段让你的Scala朋友们感到困惑的代码，使用一个不在顶部的com包&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这样可以吗？
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; com {
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;() {}

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; horstmann {
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;) {}

    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; impatient {
      &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T3&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;, &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t2&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T2&lt;/span&gt;) {}
    }
  }
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; com._

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;TT&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t1&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;T1&lt;/span&gt;){

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.3&lt;/span&gt;&amp;nbsp;编写一个包random,加入函数nextInt():Int,nextDouble():Double,setSeed(seed:Int):Unit。生成随机数的算法采用线性同余生成器:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-3&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
后值 = (前值 * a + b)mod 2^n
其中,a = 1664525,b=1013904223,n = 32,前值的初始值为seed
&lt;/pre&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; random{
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;random&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;seed&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= _
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = BigDecimal(1664525)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = BigDecimal(1013904223)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt; = 32


  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nextInt&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;temp&lt;/span&gt; = (seed * a + b) % BigDecimal(2).pow(n)
    seed = temp.toInt
    seed
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;nextDouble&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;temp&lt;/span&gt; = (seed * a + b) % BigDecimal(2).pow(n)
    seed = temp.toInt
    temp.toDouble
  }
}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;package&lt;/span&gt; test {
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; random.random

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt; {
  random.seed = 4
  println(random.nextDouble())
  println(random.nextDouble())
  println(random.nextDouble())
  println(random.nextDouble())
  println(random.nextInt())
  println(random.nextInt())
  println(random.nextInt())
  println(random.nextInt())
}

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.4&lt;/span&gt;&amp;nbsp;在你看来Scala的设计者为什么要提供package object语法而不是简单的让你将函数和变量添加到包中呢？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			JVM不支持。。。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.5&lt;/span&gt;&amp;nbsp;private[com] def giveRaise(rate:Double)的含义是什么？有用吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			除了com包可访问，其他包都不能访问。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.6&lt;/span&gt;&amp;nbsp;编写一段程序,将Java哈希映射中的所有元素拷贝到Scala哈希映射。用引入语句重命名这两个类。&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.{HashMap =&amp;gt; JavaHashMap}
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.HashMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; JavaHashMap[String,String]()
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;smap&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[String,String]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- map.keySet().toArray){
    smap += (key.toString -&amp;gt; map.get(key))
  }

  println(smap.mkString)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.7&lt;/span&gt;&amp;nbsp;在前一个练习中，将所有引入语句移动到尽可能小的作用域里&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.{HashMap =&amp;gt; JavaHashMap}

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; JavaHashMap[String,String]()
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)
  map.put(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.HashMap

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;smap&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[String,String]()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- map.keySet().toArray){
    smap += (key.toString -&amp;gt; map.get(key))
  }

  println(smap.mkString)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.8&lt;/span&gt;&amp;nbsp;以下代码的作用是什么？这是个好主意吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java._
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; javax._
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			导入java和javax下的所有类。而java和javax下是没有类的。所以此代码无用
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.9&lt;/span&gt;&amp;nbsp;编写一段程序，引入java.lang.System类，从user.name系统属性读取用户名，从Console对象读取一个密码,如果密码不是&amp;quot;secret&amp;quot;，则在标准错误流中打印一个消息；如果密码是&amp;quot;secret&amp;quot;，则在标准输出流中打印一个问候消息。不要使用任何其他引入，也不要使用任何限定词(带句点的那种)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.lang.System

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Test&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;password&lt;/span&gt; = Console.readLine()

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (password equals &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;) System.out.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + System.getProperty(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;user.name&amp;quot;&lt;/span&gt;))
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; System.err.println(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;password error!&amp;quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-8-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-8-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;8.10&lt;/span&gt;&amp;nbsp;除了StringBuilder,还有哪些java.lang的成员是被scala包覆盖的？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			直接比对java.lang下的类和scala包下的类即可
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第六章 对象</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%2585%25ad%25e7%25ab%25a0-%25e5%25af%25b9%25e8%25b1%25a1.html"/>
        <updated>2012-12-09T11:26:59+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%85%ad%e7%ab%a0-%e5%af%b9%e8%b1%a1</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-7&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt;&amp;nbsp;对象&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.1&lt;/span&gt;&amp;nbsp;编写一个Conversions对象，加入inchesToCentimeters,gallonsToLiters和milesToKilometers方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Conversions&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inchesToCentimeters&lt;/span&gt;(){}
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gallonsToLiters&lt;/span&gt;(){}
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;milesToKilometers&lt;/span&gt;(){}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.2&lt;/span&gt;&amp;nbsp;前一个练习不是很面向对象。提供一个通用的超类UnitConversion并定义扩展该超类的InchesToCentimeters,GallonsToLiters和MilesToKilometers对象&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inchesToCentimeters&lt;/span&gt;(){}
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gallonsToLiters&lt;/span&gt;(){}
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;milesToKilometers&lt;/span&gt;(){}

}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;InchesToCentimeters&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inchesToCentimeters&lt;/span&gt;() {}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;GallonsToLiters&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gallonsToLiters&lt;/span&gt;() {}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;MilesToKilometers&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;milesToKilometers&lt;/span&gt;() {}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.3&lt;/span&gt;&amp;nbsp;定义一个扩展自java.awt.Point的Origin对象。为什么说这实际上不是个好主意？(仔细看Point类的方法)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Point中的getLocation方法返回的是Point对象，如果想返回Origin对象，需要Origin类才行
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Origin&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocation&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.getLocation

  Origin.move(2,3)
  println(Origin.toString)

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.4&lt;/span&gt;&amp;nbsp;定义一个Point类和一个伴生对象,使得我们可以不用new而直接用Point(3,4)来构造Point实例&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			apply方法的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + x + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + y
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;)={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point(x,y)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = Point(1,2)
  println(p)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.5&lt;/span&gt;&amp;nbsp;编写一个Scala应用程序,使用App特质,以反序打印命令行参数,用空格隔开。举例来说,scala Reverse Hello World应该打印World Hello&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Reverse&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  args.reverse.foreach(arg =&amp;gt; print(arg  + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.6&lt;/span&gt;&amp;nbsp;编写一个扑克牌4种花色的枚举,让其toString方法分别返回&amp;clubs;,&lt;span style=&quot;color: red;&quot;&gt;&amp;diams;&lt;/span&gt;,&lt;span style=&quot;color: red;&quot;&gt;&amp;hearts;&lt;/span&gt;,&amp;spades;&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Card&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;M&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;clubs;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;T&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;spades;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;H&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;hearts;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;F&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;diams;&amp;quot;&lt;/span&gt;)

  println(Card.M)
  println(Card.T)
  println(Card.H)
  println(Card.F)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.7&lt;/span&gt;&amp;nbsp;实现一个函数,检查某张牌的花色是否为红色&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Card&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;M&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;clubs;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;T&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;spades;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;H&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;hearts;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;F&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;diams;&amp;quot;&lt;/span&gt;)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;color&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Card.Value&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(c == Card.M || c == Card.T) print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;)
  }

  color(Card.H)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.8&lt;/span&gt;&amp;nbsp;编写一个枚举,描述RGB立方体的8个角。ID使用颜色值(例如:红色是0xff0000)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;RGB&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RED&lt;/span&gt; = Value(0xff0000,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BLACK&lt;/span&gt; = Value(0x000000,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;GREEN&lt;/span&gt; = Value(0x00ff00,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Green&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;CYAN&lt;/span&gt; = Value(0x00ffff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Cyan&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;YELLOW&lt;/span&gt; = Value(0xffff00,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Yellow&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;WHITE&lt;/span&gt; = Value(0xffffff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;White&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BLUE&lt;/span&gt; = Value(0x0000ff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;MAGENTA&lt;/span&gt; = Value(0xff00ff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Magenta&amp;quot;&lt;/span&gt;)
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-7&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt;&amp;nbsp;对象&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.1&lt;/span&gt;&amp;nbsp;编写一个Conversions对象，加入inchesToCentimeters,gallonsToLiters和milesToKilometers方法&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-1&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Conversions&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inchesToCentimeters&lt;/span&gt;(){}
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gallonsToLiters&lt;/span&gt;(){}
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;milesToKilometers&lt;/span&gt;(){}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.2&lt;/span&gt;&amp;nbsp;前一个练习不是很面向对象。提供一个通用的超类UnitConversion并定义扩展该超类的InchesToCentimeters,GallonsToLiters和MilesToKilometers对象&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inchesToCentimeters&lt;/span&gt;(){}
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gallonsToLiters&lt;/span&gt;(){}
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;milesToKilometers&lt;/span&gt;(){}

}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;InchesToCentimeters&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;inchesToCentimeters&lt;/span&gt;() {}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;GallonsToLiters&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;gallonsToLiters&lt;/span&gt;() {}
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;MilesToKilometers&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;UnitConversion&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;milesToKilometers&lt;/span&gt;() {}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.3&lt;/span&gt;&amp;nbsp;定义一个扩展自java.awt.Point的Origin对象。为什么说这实际上不是个好主意？(仔细看Point类的方法)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Point中的getLocation方法返回的是Point对象，如果想返回Origin对象，需要Origin类才行
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Origin&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;getLocation&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point &lt;/span&gt;= &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;super&lt;/span&gt;.getLocation

  Origin.move(2,3)
  println(Origin.toString)

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.4&lt;/span&gt;&amp;nbsp;定义一个Point类和一个伴生对象,使得我们可以不用new而直接用Point(3,4)来构造Point实例&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			apply方法的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Point&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;: &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;x = &amp;quot;&lt;/span&gt; + x + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; y = &amp;quot;&lt;/span&gt; + y
}

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;apply&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;y&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;)={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; Point(x,y)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;p&lt;/span&gt; = Point(1,2)
  println(p)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.5&lt;/span&gt;&amp;nbsp;编写一个Scala应用程序,使用App特质,以反序打印命令行参数,用空格隔开。举例来说,scala Reverse Hello World应该打印World Hello&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Reverse&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  args.reverse.foreach(arg =&amp;gt; print(arg  + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.6&lt;/span&gt;&amp;nbsp;编写一个扑克牌4种花色的枚举,让其toString方法分别返回&amp;clubs;,&lt;span style=&quot;color: red;&quot;&gt;&amp;diams;&lt;/span&gt;,&lt;span style=&quot;color: red;&quot;&gt;&amp;hearts;&lt;/span&gt;,&amp;spades;&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Card&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;M&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;clubs;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;T&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;spades;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;H&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;hearts;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;F&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;diams;&amp;quot;&lt;/span&gt;)

  println(Card.M)
  println(Card.T)
  println(Card.H)
  println(Card.F)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.7&lt;/span&gt;&amp;nbsp;实现一个函数,检查某张牌的花色是否为红色&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-7&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;Card&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;M&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;clubs;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;T&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;spades;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;H&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;hearts;&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;F&lt;/span&gt; = Value(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;diams;&amp;quot;&lt;/span&gt;)

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;color&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Card.Value&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(c == Card.M || c == Card.T) print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;)
  }

  color(Card.H)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-7-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-7-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;7.8&lt;/span&gt;&amp;nbsp;编写一个枚举,描述RGB立方体的8个角。ID使用颜色值(例如:红色是0xff0000)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;RGB&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Enumeration&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;App&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;RED&lt;/span&gt; = Value(0xff0000,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BLACK&lt;/span&gt; = Value(0x000000,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;GREEN&lt;/span&gt; = Value(0x00ff00,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Green&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;CYAN&lt;/span&gt; = Value(0x00ffff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Cyan&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;YELLOW&lt;/span&gt; = Value(0xffff00,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Yellow&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;WHITE&lt;/span&gt; = Value(0xffffff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;White&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BLUE&lt;/span&gt; = Value(0x0000ff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt;)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;MAGENTA&lt;/span&gt; = Value(0xff00ff,&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Magenta&amp;quot;&lt;/span&gt;)
}&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第五章 类</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e4%25ba%2594%25e7%25ab%25a0-%25e7%25b1%25bb.html"/>
        <updated>2012-12-06T10:23:52+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e4%ba%94%e7%ab%a0-%e7%b1%bb</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-6&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt;&amp;nbsp;类&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt;&amp;nbsp;改进5.1节的Counter类,让它不要在Int.MaxValue时变成负数&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			加个判断就OK了
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Count&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt; = Int.MaxValue
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;increment&lt;/span&gt;(){&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(value &amp;lt; Int.MaxValue) value + 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; value }
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;current&lt;/span&gt; = value
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt;&amp;nbsp;编写一个BankAccount类，加入deposit和withdraw方法，和一个只读的balance属性&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;balance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 0){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(){}
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(){}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt;&amp;nbsp;编写一个Time类，加入只读属性hours和minutes，和一个检查某一时刻是否早于另一时刻的方法before(other:Time):Boolean。Time对象应该以new Time(hrs,min)方式构建。其中hrs以军用时间格式呈现(介于0和23之间)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;hours&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;minutes&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){

   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;before&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean&lt;/span&gt;={
     hours &amp;lt; other.hours || (hours == other.hours &amp;amp;&amp;amp; minutes &amp;lt; other.minutes)
   }

   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
     hours + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt; + minutes
   }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt;&amp;nbsp;重新实现前一个类中的Time类，将内部呈现改成午夜起的分钟数(介于0到24*60-1之间)。不要改变公有接口。也就是说，客户端代码不应因你的修改而受影响&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;hours&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;minutes&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;before&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean&lt;/span&gt;={
    hours &amp;lt; other.hours || (hours == other.hours &amp;amp;&amp;amp; minutes &amp;lt; other.minutes)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
     hours * 60 + minutes 
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt;&amp;nbsp;创建一个Student类，加入可读写的JavaBeans属性name(类型为String)和id(类型为Long)。有哪些方法被生产？(用javap查看。)你可以在Scala中调用JavaBeans的getter和setter方法吗？应该这样做吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			生成了name(),name_=(),id(),id_=(),setName(),getName(),setId(),getId() 编写代码如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.reflect.BeanProperty

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Student&lt;/span&gt;{

    @BeanProperty &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _
    @BeanProperty &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;id&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long &lt;/span&gt;= _
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			javap -c Student 后显示如下
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
Compiled from &amp;quot;Student.scala&amp;quot;
public class Student extends java.lang.Object implements scala.ScalaObject{
public java.lang.String name();
  Code:
   0:   aload_0
   1:   getfield        #13; //Field name:Ljava/lang/String;
   4:   areturn

public void name_$eq(java.lang.String);
  Code:
   0:   aload_0
   1:   aload_1
   2:   putfield        #13; //Field name:Ljava/lang/String;
   5:   return

public void setName(java.lang.String);
  Code:
   0:   aload_0
   1:   aload_1
   2:   putfield        #13; //Field name:Ljava/lang/String;
   5:   return

public long id();
  Code:
   0:   aload_0
   1:   getfield        #19; //Field id:J
   4:   lreturn

public void id_$eq(long);
  Code:
   0:   aload_0
   1:   lload_1
   2:   putfield        #19; //Field id:J
   5:   return

public void setId(long);
  Code:
   0:   aload_0
   1:   lload_1
   2:   putfield        #19; //Field id:J
   5:   return

public long getId();
  Code:
   0:   aload_0
   1:   invokevirtual   #25; //Method id:()J
   4:   lreturn

public java.lang.String getName();
  Code:
   0:   aload_0
   1:   invokevirtual   #28; //Method name:()Ljava/lang/String;
   4:   areturn

public Student();
  Code:
   0:   aload_0
   1:   invokespecial   #34; //Method java/lang/Object.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
   4:   return

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.6&lt;/span&gt;&amp;nbsp;在5.2节的Person类中提供一个主构造器,将负年龄转换为0&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Person&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;age&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
  age = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(age &amp;lt; 0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; age
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.7&lt;/span&gt;&amp;nbsp;编写一个Person类，其主构造器接受一个字符串，该字符串包含名字，空格和姓，如new Person(&amp;quot;Fred Smith&amp;quot;)。提供只读属性firstName和lastName。主构造器参数应该是var,val还是普通参数？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			必须为val。如果为var，则对应的此字符串有get和set方法，而Person中的firstName和lastName为只读的,所以不能重复赋值。如果为var则会重复赋值而报错
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.8&lt;/span&gt;&amp;nbsp;创建一个Car类，以只读属性对应制造商，型号名称，型号年份以及一个可读写的属性用于车牌。提供四组构造器。每个构造器fc都要求制造商和型号为必填。型号年份和车牌可选，如果未填，则型号年份为-1，车牌为空串。你会选择哪一个作为你的主构造器？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个没太明白题意。。。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Car&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;maker&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;typeName&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;year&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= -1,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;carLice&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;){
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.9&lt;/span&gt;&amp;nbsp;在Java,C#或C++重做前一个练习。Scala相比之下精简多少？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个就不写了。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.10&lt;/span&gt;&amp;nbsp;考虑如下的类&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Employ&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;salary&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(){&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;John Q. Public&amp;quot;&lt;/span&gt;,0.0)}
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			重写该类,使用显示的字段定义，和一个缺省主构造器。你更倾向于使用哪种形式？为什么？
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Employ&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;John Q. Public&amp;quot;&lt;/span&gt; 
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;salary&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= 0.0
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			个人更喜欢第二种方式，简单明了。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-6&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt;&amp;nbsp;类&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt;&amp;nbsp;改进5.1节的Counter类,让它不要在Int.MaxValue时变成负数&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			加个判断就OK了
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Count&lt;/span&gt;{
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;value&lt;/span&gt; = Int.MaxValue
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;increment&lt;/span&gt;(){&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(value &amp;lt; Int.MaxValue) value + 1 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; value }
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;current&lt;/span&gt; = value
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt;&amp;nbsp;编写一个BankAccount类，加入deposit和withdraw方法，和一个只读的balance属性&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;BankAccount&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;balance&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= 0){
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;deposit&lt;/span&gt;(){}
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;withdraw&lt;/span&gt;(){}
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt;&amp;nbsp;编写一个Time类，加入只读属性hours和minutes，和一个检查某一时刻是否早于另一时刻的方法before(other:Time):Boolean。Time对象应该以new Time(hrs,min)方式构建。其中hrs以军用时间格式呈现(介于0和23之间)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;hours&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;minutes&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){

   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;before&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean&lt;/span&gt;={
     hours &amp;lt; other.hours || (hours == other.hours &amp;amp;&amp;amp; minutes &amp;lt; other.minutes)
   }

   &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
     hours + &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; : &amp;quot;&lt;/span&gt; + minutes
   }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt;&amp;nbsp;重新实现前一个类中的Time类，将内部呈现改成午夜起的分钟数(介于0到24*60-1之间)。不要改变公有接口。也就是说，客户端代码不应因你的修改而受影响&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;hours&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;minutes&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;before&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;other&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Time&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Boolean&lt;/span&gt;={
    hours &amp;lt; other.hours || (hours == other.hours &amp;amp;&amp;amp; minutes &amp;lt; other.minutes)
  }

  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;toString&lt;/span&gt;():&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;={
     hours * 60 + minutes 
  }
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt;&amp;nbsp;创建一个Student类，加入可读写的JavaBeans属性name(类型为String)和id(类型为Long)。有哪些方法被生产？(用javap查看。)你可以在Scala中调用JavaBeans的getter和setter方法吗？应该这样做吗？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			生成了name(),name_=(),id(),id_=(),setName(),getName(),setId(),getId() 编写代码如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.reflect.BeanProperty

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Student&lt;/span&gt;{

    @BeanProperty &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= _
    @BeanProperty &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;id&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long &lt;/span&gt;= _
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			javap -c Student 后显示如下
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
Compiled from &amp;quot;Student.scala&amp;quot;
public class Student extends java.lang.Object implements scala.ScalaObject{
public java.lang.String name();
  Code:
   0:   aload_0
   1:   getfield        #13; //Field name:Ljava/lang/String;
   4:   areturn

public void name_$eq(java.lang.String);
  Code:
   0:   aload_0
   1:   aload_1
   2:   putfield        #13; //Field name:Ljava/lang/String;
   5:   return

public void setName(java.lang.String);
  Code:
   0:   aload_0
   1:   aload_1
   2:   putfield        #13; //Field name:Ljava/lang/String;
   5:   return

public long id();
  Code:
   0:   aload_0
   1:   getfield        #19; //Field id:J
   4:   lreturn

public void id_$eq(long);
  Code:
   0:   aload_0
   1:   lload_1
   2:   putfield        #19; //Field id:J
   5:   return

public void setId(long);
  Code:
   0:   aload_0
   1:   lload_1
   2:   putfield        #19; //Field id:J
   5:   return

public long getId();
  Code:
   0:   aload_0
   1:   invokevirtual   #25; //Method id:()J
   4:   lreturn

public java.lang.String getName();
  Code:
   0:   aload_0
   1:   invokevirtual   #28; //Method name:()Ljava/lang/String;
   4:   areturn

public Student();
  Code:
   0:   aload_0
   1:   invokespecial   #34; //Method java/lang/Object.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
   4:   return

}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.6&lt;/span&gt;&amp;nbsp;在5.2节的Person类中提供一个主构造器,将负年龄转换为0&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Person&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;age&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
  age = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(age &amp;lt; 0) 0 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; age
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.7&lt;/span&gt;&amp;nbsp;编写一个Person类，其主构造器接受一个字符串，该字符串包含名字，空格和姓，如new Person(&amp;quot;Fred Smith&amp;quot;)。提供只读属性firstName和lastName。主构造器参数应该是var,val还是普通参数？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			必须为val。如果为var，则对应的此字符串有get和set方法，而Person中的firstName和lastName为只读的,所以不能重复赋值。如果为var则会重复赋值而报错
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.8&lt;/span&gt;&amp;nbsp;创建一个Car类，以只读属性对应制造商，型号名称，型号年份以及一个可读写的属性用于车牌。提供四组构造器。每个构造器fc都要求制造商和型号为必填。型号年份和车牌可选，如果未填，则型号年份为-1，车牌为空串。你会选择哪一个作为你的主构造器？为什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个没太明白题意。。。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Car&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;maker&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;typeName&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;year&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int &lt;/span&gt;= -1,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;carLice&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;){
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.9&lt;/span&gt;&amp;nbsp;在Java,C#或C++重做前一个练习。Scala相比之下精简多少？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个就不写了。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-6-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-6-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;6.10&lt;/span&gt;&amp;nbsp;考虑如下的类&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-10&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Employ&lt;/span&gt;(&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;,&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;salary&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(){&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;John Q. Public&amp;quot;&lt;/span&gt;,0.0)}
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			重写该类,使用显示的字段定义，和一个缺省主构造器。你更倾向于使用哪种形式？为什么？
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Employ&lt;/span&gt;{
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String &lt;/span&gt;= &lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;John Q. Public&amp;quot;&lt;/span&gt; 
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;salary&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double &lt;/span&gt;= 0.0
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			个人更喜欢第二种方式，简单明了。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第四章 映射和元组</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e5%259b%259b%25e7%25ab%25a0-%25e6%2598%25a0%25e5%25b0%2584%25e5%2592%258c%25e5%2585%2583%25e7%25bb%2584.html"/>
        <updated>2012-12-05T13:30:19+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e6%98%a0%e5%b0%84%e5%92%8c%e5%85%83%e7%bb%84</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-5&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt;&amp;nbsp;映射和元组&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.1&lt;/span&gt;&amp;nbsp;设置一个映射,其中包含你想要的一些装备，以及它们的价格。然后构建另一个映射，采用同一组键，但是价格上打9折&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			映射的简单操作
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; val map = Map(&amp;quot;book&amp;quot;-&amp;gt;10,&amp;quot;gun&amp;quot;-&amp;gt;18,&amp;quot;ipad&amp;quot;-&amp;gt;1000)
map: scala.collection.immutable.Map[java.lang.String,Int] = Map(book -&amp;gt; 10, gun -&amp;gt; 18, ipad -&amp;gt; 1000)

scala&amp;gt; for((k,v) &amp;lt;- map) yield (k,v * 0.9)
res3: scala.collection.immutable.Map[java.lang.String,Double] = Map(book -&amp;gt; 9.0, gun -&amp;gt; 16.2, ipad -&amp;gt; 900.0)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.2&lt;/span&gt;&amp;nbsp;编写一段程序，从文件中读取单词。用一个可变映射来清点每个单词出现的频率。读取这些单词的操作可以使用java.util.Scanner:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			val in = new java.util.Scanner(new java.io.File(&amp;quot;myfile.txt&amp;quot;)) while(in.hasNext()) 处理 in.next() 或者翻到第9章看看更Scala的做法。 最后，打印出所有单词和它们出现的次数。
		&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			当然使用Scala的方法啦。参考第9章
		&lt;/p&gt;
&lt;p&gt;		首先，创建一个文件myfile.txt。输入如下内容&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
test test ttt test ttt t test sss s
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Scala代码如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.HashMap

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;val source = Source.fromFile(&amp;quot;myfile.txt&amp;quot;)&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;val tokens = source.mkString.split(&amp;quot;\s+&amp;quot;)  //此写法tokens为空，不知为何&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[String,Int]

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
    map(key) = map.getOrElse(key,0) + 1
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.3&lt;/span&gt;&amp;nbsp;重复前一个练习，这次用不可变的映射&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不可变映射与可变映射的区别就是，每次添加元素，都会返回一个新的映射
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = Map[String,Int]()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
  map += (key -&amp;gt; (map.getOrElse(key,0) + 1))
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.4&lt;/span&gt;&amp;nbsp;重复前一个练习，这次使用已排序的映射，以便单词可以按顺序打印出来&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			和上面的代码没有什么区别，只是将映射修改为SortedMap
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.SortedMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = SortedMap[String,Int]()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
  map += (key -&amp;gt; (map.getOrElse(key,0) + 1))
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.5&lt;/span&gt;&amp;nbsp;重复前一个练习，这次使用java.util.TreeMap并使之适用于Scala API&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			主要涉及java与scala的转换类的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.Map
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.JavaConversions.mapAsScalaMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.TreeMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[String,Int]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; TreeMap[String,Int]

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
  map(key) = map.getOrElse(key,0) + 1
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.6&lt;/span&gt;&amp;nbsp;定义一个链式哈希映射,将&amp;quot;Monday&amp;quot;映射到java.util.Calendar.MONDAY,依次类推加入其他日期。展示元素是以插入的顺序被访问的&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			LinkedHashMap的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.LinkedHashMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Calendar

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; LinkedHashMap[String,Int]

map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Monday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.MONDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Tuesday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.TUESDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Wednesday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.WEDNESDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Thursday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.THURSDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Friday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.FRIDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Saturday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.SATURDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Sunday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.SUNDAY)


println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.7&lt;/span&gt;&amp;nbsp;打印出所有Java系统属性的表格，&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			属性转scala map的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.JavaConversions.propertiesAsScalaMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;props&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;scala.collection.Map[String,String]&lt;/span&gt; = System.getProperties()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;keys&lt;/span&gt; = props.keySet

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;keyLengths&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;( key &amp;lt;- keys ) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; key.length

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;maxKeyLength&lt;/span&gt; = keyLengths.max

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- keys) {
  print(key)
  print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; * (maxKeyLength - key.length))
  print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; | &amp;quot;&lt;/span&gt;)
  println(props(key))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.8&lt;/span&gt;&amp;nbsp;编写一个函数minmax(values:Array[Int]),返回数组中最小值和最大值的对偶&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;minmax&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;values&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;)={
  (values.max,values.min)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.9&lt;/span&gt;&amp;nbsp;编写一个函数Iteqgt(values:Array[int],v:Int),返回数组中小于v,等于v和大于v的数量，要求三个值一起返回&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;iteqgt&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;values&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;)={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;buf&lt;/span&gt; = values.toBuffer
  (values.count(_ &amp;lt; v),values.count(_ == v),values.count(_ &amp;gt; v))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.10&lt;/span&gt;&amp;nbsp;当你将两个字符串拉链在一起，比如&amp;quot;Hello&amp;quot;.zip(&amp;quot;World&amp;quot;)，会是什么结果？想出一个讲得通的用例&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-10&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; &amp;quot;Hello&amp;quot;.zip(&amp;quot;World&amp;quot;)
res0: scala.collection.immutable.IndexedSeq[(Char, Char)] = Vector((H,W), (e,o), (l,r), (l,l), (o,d))  
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			StringOps中的zip定义如下
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
abstract def zip[B](that: GenIterable[B]): StringOps[(A, B)]
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			GenIterable是可遍历对象需要包含的trait，对于String来说，它是可遍历的。但是它的遍历是遍历单个字母。 所以拉链就针对每个字母来进行。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-5&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt;&amp;nbsp;映射和元组&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.1&lt;/span&gt;&amp;nbsp;设置一个映射,其中包含你想要的一些装备，以及它们的价格。然后构建另一个映射，采用同一组键，但是价格上打9折&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			映射的简单操作
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; val map = Map(&amp;quot;book&amp;quot;-&amp;gt;10,&amp;quot;gun&amp;quot;-&amp;gt;18,&amp;quot;ipad&amp;quot;-&amp;gt;1000)
map: scala.collection.immutable.Map[java.lang.String,Int] = Map(book -&amp;gt; 10, gun -&amp;gt; 18, ipad -&amp;gt; 1000)

scala&amp;gt; for((k,v) &amp;lt;- map) yield (k,v * 0.9)
res3: scala.collection.immutable.Map[java.lang.String,Double] = Map(book -&amp;gt; 9.0, gun -&amp;gt; 16.2, ipad -&amp;gt; 900.0)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.2&lt;/span&gt;&amp;nbsp;编写一段程序，从文件中读取单词。用一个可变映射来清点每个单词出现的频率。读取这些单词的操作可以使用java.util.Scanner:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			val in = new java.util.Scanner(new java.io.File(&amp;quot;myfile.txt&amp;quot;)) while(in.hasNext()) 处理 in.next() 或者翻到第9章看看更Scala的做法。 最后，打印出所有单词和它们出现的次数。
		&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			当然使用Scala的方法啦。参考第9章
		&lt;/p&gt;
&lt;p&gt;		首先，创建一个文件myfile.txt。输入如下内容&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
test test ttt test ttt t test sss s
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Scala代码如下
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.HashMap

&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;val source = Source.fromFile(&amp;quot;myfile.txt&amp;quot;)&lt;/span&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;val tokens = source.mkString.split(&amp;quot;\s+&amp;quot;)  //此写法tokens为空，不知为何&lt;/span&gt;

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; HashMap[String,Int]

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
    map(key) = map.getOrElse(key,0) + 1
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.3&lt;/span&gt;&amp;nbsp;重复前一个练习，这次用不可变的映射&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不可变映射与可变映射的区别就是，每次添加元素，都会返回一个新的映射
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = Map[String,Int]()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
  map += (key -&amp;gt; (map.getOrElse(key,0) + 1))
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.4&lt;/span&gt;&amp;nbsp;重复前一个练习，这次使用已排序的映射，以便单词可以按顺序打印出来&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			和上面的代码没有什么区别，只是将映射修改为SortedMap
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.SortedMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = SortedMap[String,Int]()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
  map += (key -&amp;gt; (map.getOrElse(key,0) + 1))
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.5&lt;/span&gt;&amp;nbsp;重复前一个练习，这次使用java.util.TreeMap并使之适用于Scala API&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			主要涉及java与scala的转换类的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.io.Source
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.Map
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.JavaConversions.mapAsScalaMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.TreeMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;source&lt;/span&gt; = Source.fromFile(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;).mkString

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;tokens&lt;/span&gt; = source.split(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;\s+&amp;quot;&lt;/span&gt;)

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Map[String,Int]&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; TreeMap[String,Int]

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- tokens){
  map(key) = map.getOrElse(key,0) + 1
}

println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.6&lt;/span&gt;&amp;nbsp;定义一个链式哈希映射,将&amp;quot;Monday&amp;quot;映射到java.util.Calendar.MONDAY,依次类推加入其他日期。展示元素是以插入的顺序被访问的&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			LinkedHashMap的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.LinkedHashMap
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; java.util.Calendar

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;map&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;new&lt;/span&gt; LinkedHashMap[String,Int]

map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Monday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.MONDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Tuesday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.TUESDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Wednesday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.WEDNESDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Thursday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.THURSDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Friday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.FRIDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Saturday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.SATURDAY)
map += (&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Sunday&amp;quot;&lt;/span&gt;-&amp;gt;Calendar.SUNDAY)


println(map.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.7&lt;/span&gt;&amp;nbsp;打印出所有Java系统属性的表格，&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			属性转scala map的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.JavaConversions.propertiesAsScalaMap

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;props&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;scala.collection.Map[String,String]&lt;/span&gt; = System.getProperties()

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;keys&lt;/span&gt; = props.keySet

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;keyLengths&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;( key &amp;lt;- keys ) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; key.length

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;maxKeyLength&lt;/span&gt; = keyLengths.max

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(key &amp;lt;- keys) {
  print(key)
  print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; * (maxKeyLength - key.length))
  print(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; | &amp;quot;&lt;/span&gt;)
  println(props(key))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.8&lt;/span&gt;&amp;nbsp;编写一个函数minmax(values:Array[Int]),返回数组中最小值和最大值的对偶&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;minmax&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;values&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;)={
  (values.max,values.min)
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.9&lt;/span&gt;&amp;nbsp;编写一个函数Iteqgt(values:Array[int],v:Int),返回数组中小于v,等于v和大于v的数量，要求三个值一起返回&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;iteqgt&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;values&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;v&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;)={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;buf&lt;/span&gt; = values.toBuffer
  (values.count(_ &amp;lt; v),values.count(_ == v),values.count(_ &amp;gt; v))
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-5-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-5-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;5.10&lt;/span&gt;&amp;nbsp;当你将两个字符串拉链在一起，比如&amp;quot;Hello&amp;quot;.zip(&amp;quot;World&amp;quot;)，会是什么结果？想出一个讲得通的用例&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-10&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; &amp;quot;Hello&amp;quot;.zip(&amp;quot;World&amp;quot;)
res0: scala.collection.immutable.IndexedSeq[(Char, Char)] = Vector((H,W), (e,o), (l,r), (l,l), (o,d))  
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			StringOps中的zip定义如下
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
abstract def zip[B](that: GenIterable[B]): StringOps[(A, B)]
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			GenIterable是可遍历对象需要包含的trait，对于String来说，它是可遍历的。但是它的遍历是遍历单个字母。 所以拉链就针对每个字母来进行。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第三章 数组相关操作</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e4%25b8%2589%25e7%25ab%25a0-%25e6%2595%25b0%25e7%25bb%2584%25e7%259b%25b8%25e5%2585%25b3%25e6%2593%258d%25e4%25bd%259c.html"/>
        <updated>2012-12-04T12:18:19+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e4%b8%89%e7%ab%a0-%e6%95%b0%e7%bb%84%e7%9b%b8%e5%85%b3%e6%93%8d%e4%bd%9c</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-4&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt;&amp;nbsp;数组相关操作&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.1&lt;/span&gt;&amp;nbsp;编写一段代码，将a设置为一个n个随机整数的数组，要求随机数介于0(包含)和n(不包含)之间&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			random和yield的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.ArrayBuffer
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.random

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;randomArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until n) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; (random * n).toInt
     a.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.2&lt;/span&gt;&amp;nbsp;编写一个循环，将整数数组中相邻的元素置换。例如,Array(1,2,3,4,5)经过置换后变为Array(2,1,4,3,5)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			对数组方法的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until (t.length,2) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; i + 1 &amp;lt; t.length){
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = t(i)
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = t(i + 1)
        t.remove(i,2)
        t.insert(i,b)
        t.insert(i + 1,a)
    }
    t.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.3&lt;/span&gt;&amp;nbsp;重复前一个练习，不过这一次生成一个新的值交换过的数组。用for/yield&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until t.length)
                    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(i%2==0 &amp;amp;&amp;amp; i + 1 &amp;lt; t.length)t(i + 1)
                          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(i%2==0 &amp;amp;&amp;amp; i + 1 &amp;gt;= t.length)t(i)
                          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; t(i - 1)
    result.toArray
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			感觉代码有点丑也难读。需要优化。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.4&lt;/span&gt;&amp;nbsp;给定一个整数数组，产生一个新的数组，包含元数组中的所有正值，以原有顺序排列，之后的元素是所有零或负值，以原有顺序排列&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用循环&lt;/span&gt;
 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = ArrayBuffer[Int]()
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = ArrayBuffer[Int]()
     arr.foreach(arg =&amp;gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(arg &amp;gt; 0) a += arg &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b += arg)
     a ++= b
     a.toArray
 }
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用filter&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = arr.filter(_ &amp;gt; 0).map(1 * _)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = arr.filter(_ &amp;lt;= 0).map(1 * _)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt; = a.toBuffer
  c ++= b
  c.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.5&lt;/span&gt;&amp;nbsp;如何计算Array[Double]的平均值？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;aveArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Double]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;={
  arr.sum/arr.length
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.6&lt;/span&gt;&amp;nbsp;如何重新组织Array[Int]的元素将他们以反序排列？对于ArrayBuffer[Int]你又会怎么做呢？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reverseArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  arr.reverse
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.7&lt;/span&gt;&amp;nbsp;编写一段代码，产出数组中的所有值，去掉重复项。(提示：查看Scaladoc)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			产出数组的代码就不编写了。去重只需要调用api即可
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;distinctArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
  t.distinct.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.8&lt;/span&gt;&amp;nbsp;重新编写3.4节结尾的示例。收集负值元素的下标，反序，去掉最后一个下标，然后对每个下标调用a.remove(i)。比较这样做的效率和3.4节中另外两种方法的效率&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			性能嘛，自己比较吧!
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;idx&lt;/span&gt; = ArrayBuffer[Int]()
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until t.length){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(t(i) &amp;lt; 0)idx += i
  }
  idx.remove(0)
  idx.reverse
  idx.foreach(t.remove(_))
  t.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.9&lt;/span&gt;&amp;nbsp;创建一个由java.util.TimeZone.getAvailableIDs返回ide时区集合，判断条件是它们在美洲。去掉&amp;quot;America/&amp;quot;前缀并排序&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			显示的都是中文时间，后续的过滤无法操作。只列出所有的时区
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- getAvailableIDs) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt;
          getTimeZone(i).getDisplayName()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.10&lt;/span&gt;&amp;nbsp;引入java.awt.datatransfer.&lt;sub&gt;并构建一个类型为SystemFlavorMap类型的对象&lt;/sub&gt;:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			val flavors = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap] 然后以DataFlavor.imageFlavor为参数调用getNativesForFlavor方法，以Scala缓冲保存返回值。 (为什么用这样一个晦涩难懂的类？因为在Java标准库中很难找到使用java.util.List的代码)
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flavors&lt;/span&gt; = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]
println(flavors.getNativesForFlavor(DataFlavor.imageFlavor).toArray.toBuffer.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; | &amp;quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-4&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt;&amp;nbsp;数组相关操作&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.1&lt;/span&gt;&amp;nbsp;编写一段代码，将a设置为一个n个随机整数的数组，要求随机数介于0(包含)和n(不包含)之间&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			random和yield的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.collection.mutable.ArrayBuffer
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.random

&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;randomArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until n) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; (random * n).toInt
     a.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.2&lt;/span&gt;&amp;nbsp;编写一个循环，将整数数组中相邻的元素置换。例如,Array(1,2,3,4,5)经过置换后变为Array(2,1,4,3,5)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			对数组方法的使用
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until (t.length,2) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; i + 1 &amp;lt; t.length){
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = t(i)
        &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = t(i + 1)
        t.remove(i,2)
        t.insert(i,b)
        t.insert(i + 1,a)
    }
    t.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.3&lt;/span&gt;&amp;nbsp;重复前一个练习，不过这一次生成一个新的值交换过的数组。用for/yield&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-3&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until t.length)
                    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(i%2==0 &amp;amp;&amp;amp; i + 1 &amp;lt; t.length)t(i + 1)
                          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(i%2==0 &amp;amp;&amp;amp; i + 1 &amp;gt;= t.length)t(i)
                          &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; t(i - 1)
    result.toArray
}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			感觉代码有点丑也难读。需要优化。
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.4&lt;/span&gt;&amp;nbsp;给定一个整数数组，产生一个新的数组，包含元数组中的所有正值，以原有顺序排列，之后的元素是所有零或负值，以原有顺序排列&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-4&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用循环&lt;/span&gt;
 &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = ArrayBuffer[Int]()
     &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = ArrayBuffer[Int]()
     arr.foreach(arg =&amp;gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(arg &amp;gt; 0) a += arg &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; b += arg)
     a ++= b
     a.toArray
 }
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;使用filter&lt;/span&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reorderArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;a&lt;/span&gt; = arr.filter(_ &amp;gt; 0).map(1 * _)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;b&lt;/span&gt; = arr.filter(_ &amp;lt;= 0).map(1 * _)
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;c&lt;/span&gt; = a.toBuffer
  c ++= b
  c.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.5&lt;/span&gt;&amp;nbsp;如何计算Array[Double]的平均值？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-5&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;aveArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Double]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;={
  arr.sum/arr.length
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.6&lt;/span&gt;&amp;nbsp;如何重新组织Array[Int]的元素将他们以反序排列？对于ArrayBuffer[Int]你又会怎么做呢？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-6&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;reverseArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  arr.reverse
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.7&lt;/span&gt;&amp;nbsp;编写一段代码，产出数组中的所有值，去掉重复项。(提示：查看Scaladoc)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			产出数组的代码就不编写了。去重只需要调用api即可
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;distinctArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
  t.distinct.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.8&lt;/span&gt;&amp;nbsp;重新编写3.4节结尾的示例。收集负值元素的下标，反序，去掉最后一个下标，然后对每个下标调用a.remove(i)。比较这样做的效率和3.4节中另外两种方法的效率&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			性能嘛，自己比较吧!
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;removeArray&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;arr&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Array[Int]&lt;/span&gt;={
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = arr.toBuffer
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;idx&lt;/span&gt; = ArrayBuffer[Int]()
  &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 until t.length){
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(t(i) &amp;lt; 0)idx += i
  }
  idx.remove(0)
  idx.reverse
  idx.foreach(t.remove(_))
  t.toArray
}
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.9&lt;/span&gt;&amp;nbsp;创建一个由java.util.TimeZone.getAvailableIDs返回ide时区集合，判断条件是它们在美洲。去掉&amp;quot;America/&amp;quot;前缀并排序&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			显示的都是中文时间，后续的过滤无法操作。只列出所有的时区
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt; = &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- getAvailableIDs) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;yield&lt;/span&gt;
          getTimeZone(i).getDisplayName()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-4-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-4-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;4.10&lt;/span&gt;&amp;nbsp;引入java.awt.datatransfer.&lt;sub&gt;并构建一个类型为SystemFlavorMap类型的对象&lt;/sub&gt;:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			val flavors = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap] 然后以DataFlavor.imageFlavor为参数调用getNativesForFlavor方法，以Scala缓冲保存返回值。 (为什么用这样一个晦涩难懂的类？因为在Java标准库中很难找到使用java.util.List的代码)
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;flavors&lt;/span&gt; = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]
println(flavors.getNativesForFlavor(DataFlavor.imageFlavor).toArray.toBuffer.mkString(&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot; | &amp;quot;&lt;/span&gt;)&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第二章 控制结构和函数</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e4%25b8%2580%25e7%25ab%25a0-%25e6%258e%25a7%25e5%2588%25b6%25e7%25bb%2593%25e6%259e%2584%25e5%2592%258c%25e5%2587%25bd%25e6%2595%25b0.html"/>
        <updated>2012-12-03T15:28:32+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e4%b8%80%e7%ab%a0-%e6%8e%a7%e5%88%b6%e7%bb%93%e6%9e%84%e5%92%8c%e5%87%bd%e6%95%b0</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-3&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt;&amp;nbsp;控制结构和函数&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt;&amp;nbsp;一个数字如果为正数，则它的signum为1;如果是负数,则signum为-1;如果为0,则signum为0.编写一个函数来计算这个值&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			简单的逻辑判断
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;signum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(num&amp;gt;0)print(1)&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(num&amp;lt;0)print(-1)&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; print(0)}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Scala中已经有此方法了，刚才查找API的时候，应该能看到
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
BigInt(10).signum
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt;&amp;nbsp;一个空的快表达式{}的值是什么？类型是什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			在REPL中就能看出来了
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; val t = {}
t: Unit = ()
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			可以看出，它的值是()类型是Unit
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt;&amp;nbsp;指出在Scala中何种情况下赋值语句x=y=1是合法的。(提示：给x找个合适的类型定义)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			题目已经给了明确的提示了。本章节中已经说过了，在scala中的赋值语句是Unit类型。所以只要x为Unit类型就可以了。
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; var y=4;
y: Int = 4

scala&amp;gt; var x={}
x: Unit = ()

scala&amp;gt; x=y=7
x: Unit = ()
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这也再次证明了{}是Unit类型
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt;&amp;nbsp;针对下列Java循环编写一个Scala版本:for(int i=10;i&amp;gt;=0;i&amp;ndash;)System.out.println(i);&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			使用Scala版本改写就OK了
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 to 10 reverse)print(i)
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt;&amp;nbsp;编写一个过程countdown(n:Int)，打印从n到0的数字&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个就是将上面的循环包装到过程中而已。还是换个写法吧。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;countdown&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
    0 to n reverse foreach print
}
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.6&lt;/span&gt;&amp;nbsp;编写一个for循环,计算字符串中所有字母的Unicode代码的乘积。举例来说，&amp;quot;Hello&amp;quot;中所有字符串的乘积为9415087488L&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; var t:Long = 1
t: Long = 1

scala&amp;gt; for(i &amp;lt;- &amp;quot;Hello&amp;quot;){
     | t = t * i.toLong
     | }

scala&amp;gt; t
res57: Long = 9415087488
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.7&lt;/span&gt;&amp;nbsp;同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-7&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; var t:Long = 1
t: Long = 1

scala&amp;gt; &amp;quot;Hello&amp;quot;.foreach(t *= _.toLong)

scala&amp;gt; t
res59: Long = 9415087488
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.8&lt;/span&gt;&amp;nbsp;编写一个函数product(s:String)，计算前面练习中提到的乘积&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;product&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long &lt;/span&gt;= 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- s){
        t *= i.toLong
    }
    t
}
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.9&lt;/span&gt;&amp;nbsp;把前一个练习中的函数改成递归函数&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			配合前一章的take和drop来实现
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;product&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(s.length == 1) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; s.charAt(0).toLong
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; s.take(1).charAt(0).toLong * product(s.drop(1))
}
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.10&lt;/span&gt;&amp;nbsp;编写函数计算x&lt;sup&gt;n&lt;/sup&gt;,其中n是整数，使用如下的递归定义:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-10&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
				x&lt;sup&gt;n&lt;/sup&gt;=y&lt;sup&gt;2&lt;/sup&gt;,如果n是正偶数的话，这里的y=x&lt;sup&gt;(n/2)&lt;/sup&gt;
			&lt;/li&gt;
&lt;li&gt;
				x&lt;sup&gt;n&lt;/sup&gt;&amp;nbsp;= x*x&lt;sup&gt;(n-1)&lt;/sup&gt;,如果n是正奇数的话
			&lt;/li&gt;
&lt;li&gt;
				x&lt;sup&gt;0&lt;/sup&gt;&amp;nbsp;= 1
			&lt;/li&gt;
&lt;li&gt;
				x&lt;sup&gt;n&lt;/sup&gt;&amp;nbsp;= 1/x&lt;sup&gt;(-n)&lt;/sup&gt;,如果n是负数的话
			&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不得使用return语句
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;mi&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(n == 0) 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (n &amp;gt; 0 &amp;amp;&amp;amp; n%2 == 0) mi(x,n/2) * mi(x,n/2)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(n&amp;gt;0 &amp;amp;&amp;amp; n%2 == 1) x * mi(x,n-1)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 1/mi(x,-n)
}&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;sec-3&quot; style=&quot;margin: 5px; color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; background-color: rgb(253, 246, 227);&quot;&gt;
	&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt;&amp;nbsp;控制结构和函数&lt;br /&gt;
&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
	&amp;nbsp;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt;&amp;nbsp;一个数字如果为正数，则它的signum为1;如果是负数,则signum为-1;如果为0,则signum为0.编写一个函数来计算这个值&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			简单的逻辑判断
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;signum&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;num&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(num&amp;gt;0)print(1)&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(num&amp;lt;0)print(-1)&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; print(0)}
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			Scala中已经有此方法了，刚才查找API的时候，应该能看到
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
BigInt(10).signum
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt;&amp;nbsp;一个空的快表达式{}的值是什么？类型是什么？&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			在REPL中就能看出来了
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; val t = {}
t: Unit = ()
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			可以看出，它的值是()类型是Unit
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-3&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt;&amp;nbsp;指出在Scala中何种情况下赋值语句x=y=1是合法的。(提示：给x找个合适的类型定义)&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			题目已经给了明确的提示了。本章节中已经说过了，在scala中的赋值语句是Unit类型。所以只要x为Unit类型就可以了。
		&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; var y=4;
y: Int = 4

scala&amp;gt; var x={}
x: Unit = ()

scala&amp;gt; x=y=7
x: Unit = ()
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这也再次证明了{}是Unit类型
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-4&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt;&amp;nbsp;针对下列Java循环编写一个Scala版本:for(int i=10;i&amp;gt;=0;i&amp;ndash;)System.out.println(i);&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			使用Scala版本改写就OK了
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- 0 to 10 reverse)print(i)
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-5&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt;&amp;nbsp;编写一个过程countdown(n:Int)，打印从n到0的数字&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			这个就是将上面的循环包装到过程中而已。还是换个写法吧。
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;countdown&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;){
    0 to n reverse foreach print
}
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-6&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.6&lt;/span&gt;&amp;nbsp;编写一个for循环,计算字符串中所有字母的Unicode代码的乘积。举例来说，&amp;quot;Hello&amp;quot;中所有字符串的乘积为9415087488L&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; var t:Long = 1
t: Long = 1

scala&amp;gt; for(i &amp;lt;- &amp;quot;Hello&amp;quot;){
     | t = t * i.toLong
     | }

scala&amp;gt; t
res57: Long = 9415087488
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-7&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.7&lt;/span&gt;&amp;nbsp;同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-7&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; var t:Long = 1
t: Long = 1

scala&amp;gt; &amp;quot;Hello&amp;quot;.foreach(t *= _.toLong)

scala&amp;gt; t
res59: Long = 9415087488
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-8&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.8&lt;/span&gt;&amp;nbsp;编写一个函数product(s:String)，计算前面练习中提到的乘积&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-8&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;product&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;t&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long &lt;/span&gt;= 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;for&lt;/span&gt;(i &amp;lt;- s){
        t *= i.toLong
    }
    t
}
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-9&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.9&lt;/span&gt;&amp;nbsp;把前一个练习中的函数改成递归函数&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-9&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			配合前一章的take和drop来实现
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;product&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;s&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;String&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Long&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(s.length == 1) &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;return&lt;/span&gt; s.charAt(0).toLong
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; s.take(1).charAt(0).toLong * product(s.drop(1))
}
&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-3-10&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h3 id=&quot;sec-3-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
		&lt;span class=&quot;section-number-3&quot;&gt;3.10&lt;/span&gt;&amp;nbsp;编写函数计算x&lt;sup&gt;n&lt;/sup&gt;,其中n是整数，使用如下的递归定义:&lt;br /&gt;
	&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-10&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
				x&lt;sup&gt;n&lt;/sup&gt;=y&lt;sup&gt;2&lt;/sup&gt;,如果n是正偶数的话，这里的y=x&lt;sup&gt;(n/2)&lt;/sup&gt;
			&lt;/li&gt;
&lt;li&gt;
				x&lt;sup&gt;n&lt;/sup&gt;&amp;nbsp;= x*x&lt;sup&gt;(n-1)&lt;/sup&gt;,如果n是正奇数的话
			&lt;/li&gt;
&lt;li&gt;
				x&lt;sup&gt;0&lt;/sup&gt;&amp;nbsp;= 1
			&lt;/li&gt;
&lt;li&gt;
				x&lt;sup&gt;n&lt;/sup&gt;&amp;nbsp;= 1/x&lt;sup&gt;(-n)&lt;/sup&gt;,如果n是负数的话
			&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			不得使用return语句
		&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;mi&lt;/span&gt;(&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;x&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;,&lt;span style=&quot;color: rgb(38, 139, 210);&quot;&gt;n&lt;/span&gt;:&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Int&lt;/span&gt;):&lt;span style=&quot;color: rgb(181, 137, 0);&quot;&gt;Double&lt;/span&gt;={
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(n == 0) 1
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt; (n &amp;gt; 0 &amp;amp;&amp;amp; n%2 == 0) mi(x,n/2) * mi(x,n/2)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;if&lt;/span&gt;(n&amp;gt;0 &amp;amp;&amp;amp; n%2 == 1) x * mi(x,n-1)
    &lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;else&lt;/span&gt; 1/mi(x,-n)
}&lt;/pre&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>快学Scala习题解答—第一章 基础</title>
        <link href="http://liyouhai.com/java-scala/%25e5%25bf%25ab%25e5%25ad%25a6scala%25e4%25b9%25a0%25e9%25a2%2598%25e8%25a7%25a3%25e7%25ad%2594-%25e7%25ac%25ac%25e4%25b8%2580%25e7%25ab%25a0-%25e5%259f%25ba%25e7%25a1%2580-2.html"/>
        <updated>2012-12-03T15:21:01+08:00</updated>
        <id>http://liyouhai.com//java-scala/%e5%bf%ab%e5%ad%a6scala%e4%b9%a0%e9%a2%98%e8%a7%a3%e7%ad%94-%e7%ac%ac%e4%b8%80%e7%ab%a0-%e5%9f%ba%e7%a1%80-2</id>
        <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-1&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt;&amp;nbsp;简介&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			近期对Scala比较感兴趣，买了本《快学Scala》,感觉不错。比《Programming Scala:Tackle Multi-Core Complexity on the Java Virtual Machine》好很多。 是本不错的入门书。而且每个章节都设置了难度级别，每章有习题，可以巩固Scala语法。
		&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			本文的目的就是针对这些习题进行解答
		&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-2&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt;&amp;nbsp;基础&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
		&amp;nbsp;
	&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-1&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt;&amp;nbsp;在Scala REPL中键入3,然后按Tab键。有哪些方法可以被应用?&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				这个。。。。直接操作一遍就有结果了.此题不知是翻译的问题，还是原题的问题，在Scala REPL中需要按3. 然后按Tab才会提示。 直接按3加Tab是没有提示的。下面是结果
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
!=             ##             %              &amp;amp;              *              +
-              /              &amp;lt;              &amp;lt;&amp;lt;             &amp;lt;=             ==
&amp;gt;              &amp;gt;=             &amp;gt;&amp;gt;             &amp;gt;&amp;gt;&amp;gt;            ^              asInstanceOf
equals         getClass       hashCode       isInstanceOf   toByte         toChar
toDouble       toFloat        toInt          toLong         toShort        toString
unary_+        unary_-        unary_~        |
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				列出的方法并不全，需要查询全部方法还是需要到Scaladoc中的Int,Double,RichInt,RichDouble等类中去查看。
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-2&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt;&amp;nbsp;在Scala REPL中，计算3的平方根,然后再对该值求平方。现在，这个结果与3相差多少？(提示:res变量是你的朋友)&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				依次进行计算即可
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; scala.math.sqrt(3)
warning: there were 1 deprecation warnings; re-run with -deprecation for details
res5: Double = 1.7320508075688772

scala&amp;gt; res5*res5
res6: Double = 2.9999999999999996

scala&amp;gt; 3 - res6
res7: Double = 4.440892098500626E-16
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt;&amp;nbsp;res变量是val还是var?&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				val是不可变的，而var是可变的，只需要给res变量重新赋值就可以检测res是val还是var了
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; res9 = 3
&amp;lt;console&amp;gt;:8: error: reassignment to val
       res9 = 3
            ^
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-4&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt;&amp;nbsp;Scala允许你用数字去乘字符串&amp;mdash;去REPL中试一下&amp;quot;crazy&amp;quot;*3。这个操作做什么？在Scaladoc中如何找到这个操作?&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; &amp;quot;crazy&amp;quot;*3
res11: String = crazycrazycrazy
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				从代码可以推断,*是&amp;quot;crazy&amp;quot;这个字符串所具有的方法，但是Java中的String可没这个方法，很明显。此方法在StringOps中。
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-5&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt;&amp;nbsp;10 max 2的含义是什么？max方法定义在哪个类中？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				直接在REPL中执行
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; 10 max 2
res0: Int = 10

scala&amp;gt; 7 max 8
res1: Int = 8

scala&amp;gt; 0 max 0
res2: Int = 0
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				可以看出,此方法返回两个数字中较大的那个。此方法Java中不存在，所以在RichInt中。
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-6&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.6&lt;/span&gt;&amp;nbsp;用BigInt计算2的1024次方&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				简单的API调用
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; BigInt(2).pow(1024)
res4: scala.math.BigInt = 1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224
075360211201138798713933576587897688144166224928474306394741243777678934248654852763022196012460941194530829520850057688
38150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-7&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.7&lt;/span&gt;&amp;nbsp;为了在使用probablePrime(100,Random)获取随机素数时不在probablePrime和Radom之前使用任何限定符，你需要引入什么？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				so easy. import需要的包啊。Random在scala.util中，而probablePrime是BigInt中的方法，引入即可
			&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.BigInt._
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.util.Random

probablePrime(3,Random)
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-8&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.8&lt;/span&gt;&amp;nbsp;创建随机文件的方式之一是生成一个随机的BigInt，然后将它转换成三十六进制，输出类似&amp;quot;qsnvbevtomcj38o06kul&amp;quot;这样的字符串。查阅Scaladoc，找到在Scala中实现该逻辑的办法。&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				到BigInt中查找方法。
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; scala.math.BigInt(scala.util.Random.nextInt).toString(36)
res21: String = utydx
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-9&quot;&gt;
&lt;h3 id=&quot;sec-2-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.9&lt;/span&gt;&amp;nbsp;在Scala中如何获取字符串的首字符和尾字符？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;获取首字符&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;(0)
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;.take(1)
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;获取尾字符&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;.reverse(0)
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;.takeRight(1)
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-10&quot;&gt;
&lt;h3 id=&quot;sec-2-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.10&lt;/span&gt;&amp;nbsp;take,drop,takeRight和dropRight这些字符串函数是做什么用的？和substring相比，他们的优点和缺点都是哪些？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				查询API即可 take是从字符串首开始获取字符串,drop是从字符串首开始去除字符串。 takeRight和dropRight是从字符串尾开始操作。 这四个方法都是单方向的。 如果我想要字符串中间的子字符串，那么需要同时调用drop和dropRight，或者使用substring
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-1&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-1&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt;&amp;nbsp;简介&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			近期对Scala比较感兴趣，买了本《快学Scala》,感觉不错。比《Programming Scala:Tackle Multi-Core Complexity on the Java Virtual Machine》好很多。 是本不错的入门书。而且每个章节都设置了难度级别，每章有习题，可以巩固Scala语法。
		&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			本文的目的就是针对这些习题进行解答
		&lt;/p&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;outline-2&quot; id=&quot;outline-container-2&quot; style=&quot;color: rgb(101, 122, 131); font-family: MONACO, 'trebuchet ms', arial, helvetica, sans-serif; font-size: 13px; background-color: rgb(253, 246, 227);&quot;&gt;
&lt;h2 id=&quot;sec-2&quot; style=&quot;margin: 5px;&quot;&gt;
		&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt;&amp;nbsp;基础&lt;br /&gt;
	&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
		&amp;nbsp;
	&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-1&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt;&amp;nbsp;在Scala REPL中键入3,然后按Tab键。有哪些方法可以被应用?&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				这个。。。。直接操作一遍就有结果了.此题不知是翻译的问题，还是原题的问题，在Scala REPL中需要按3. 然后按Tab才会提示。 直接按3加Tab是没有提示的。下面是结果
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
!=             ##             %              &amp;amp;              *              +
-              /              &amp;lt;              &amp;lt;&amp;lt;             &amp;lt;=             ==
&amp;gt;              &amp;gt;=             &amp;gt;&amp;gt;             &amp;gt;&amp;gt;&amp;gt;            ^              asInstanceOf
equals         getClass       hashCode       isInstanceOf   toByte         toChar
toDouble       toFloat        toInt          toLong         toShort        toString
unary_+        unary_-        unary_~        |
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				列出的方法并不全，需要查询全部方法还是需要到Scaladoc中的Int,Double,RichInt,RichDouble等类中去查看。
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-2&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt;&amp;nbsp;在Scala REPL中，计算3的平方根,然后再对该值求平方。现在，这个结果与3相差多少？(提示:res变量是你的朋友)&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				依次进行计算即可
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; scala.math.sqrt(3)
warning: there were 1 deprecation warnings; re-run with -deprecation for details
res5: Double = 1.7320508075688772

scala&amp;gt; res5*res5
res6: Double = 2.9999999999999996

scala&amp;gt; 3 - res6
res7: Double = 4.440892098500626E-16
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt;&amp;nbsp;res变量是val还是var?&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				val是不可变的，而var是可变的，只需要给res变量重新赋值就可以检测res是val还是var了
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; res9 = 3
&amp;lt;console&amp;gt;:8: error: reassignment to val
       res9 = 3
            ^
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-4&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt;&amp;nbsp;Scala允许你用数字去乘字符串&amp;mdash;去REPL中试一下&amp;quot;crazy&amp;quot;*3。这个操作做什么？在Scaladoc中如何找到这个操作?&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; &amp;quot;crazy&amp;quot;*3
res11: String = crazycrazycrazy
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				从代码可以推断,*是&amp;quot;crazy&amp;quot;这个字符串所具有的方法，但是Java中的String可没这个方法，很明显。此方法在StringOps中。
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-5&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt;&amp;nbsp;10 max 2的含义是什么？max方法定义在哪个类中？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				直接在REPL中执行
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; 10 max 2
res0: Int = 10

scala&amp;gt; 7 max 8
res1: Int = 8

scala&amp;gt; 0 max 0
res2: Int = 0
&lt;/pre&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				可以看出,此方法返回两个数字中较大的那个。此方法Java中不存在，所以在RichInt中。
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-6&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.6&lt;/span&gt;&amp;nbsp;用BigInt计算2的1024次方&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				简单的API调用
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; BigInt(2).pow(1024)
res4: scala.math.BigInt = 1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224
075360211201138798713933576587897688144166224928474306394741243777678934248654852763022196012460941194530829520850057688
38150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-7&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.7&lt;/span&gt;&amp;nbsp;为了在使用probablePrime(100,Random)获取随机素数时不在probablePrime和Radom之前使用任何限定符，你需要引入什么？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				so easy. import需要的包啊。Random在scala.util中，而probablePrime是BigInt中的方法，引入即可
			&lt;/p&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.math.BigInt._
&lt;span style=&quot;color: rgb(133, 153, 0);&quot;&gt;import&lt;/span&gt; scala.util.Random

probablePrime(3,Random)
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-8&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.8&lt;/span&gt;&amp;nbsp;创建随机文件的方式之一是生成一个随机的BigInt，然后将它转换成三十六进制，输出类似&amp;quot;qsnvbevtomcj38o06kul&amp;quot;这样的字符串。查阅Scaladoc，找到在Scala中实现该逻辑的办法。&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				到BigInt中查找方法。
			&lt;/p&gt;
&lt;pre class=&quot;example&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
scala&amp;gt; scala.math.BigInt(scala.util.Random.nextInt).toString(36)
res21: String = utydx
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-9&quot;&gt;
&lt;h3 id=&quot;sec-2-9&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.9&lt;/span&gt;&amp;nbsp;在Scala中如何获取字符串的首字符和尾字符？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;
&lt;pre class=&quot;src src-scala&quot; style=&quot;border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; font-size: small; overflow: auto; margin: 5px 10px;&quot;&gt;
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;获取首字符&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;(0)
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;.take(1)
&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: rgb(147, 161, 161); font-style: italic;&quot;&gt;获取尾字符&lt;/span&gt;
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;.reverse(0)
&lt;span style=&quot;color: rgb(42, 161, 152);&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;.takeRight(1)
&lt;/pre&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;outline-3&quot; id=&quot;outline-container-2-10&quot;&gt;
&lt;h3 id=&quot;sec-2-10&quot; style=&quot;margin: 5px 10px;&quot;&gt;
			&lt;span class=&quot;section-number-3&quot;&gt;2.10&lt;/span&gt;&amp;nbsp;take,drop,takeRight和dropRight这些字符串函数是做什么用的？和substring相比，他们的优点和缺点都是哪些？&lt;br /&gt;
		&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-10&quot;&gt;
&lt;p style=&quot;margin: 5px 10px; text-indent: 40px;&quot;&gt;
				查询API即可 take是从字符串首开始获取字符串,drop是从字符串首开始去除字符串。 takeRight和dropRight是从字符串尾开始操作。 这四个方法都是单方向的。 如果我想要字符串中间的子字符串，那么需要同时调用drop和dropRight，或者使用substring
			&lt;/p&gt;
&lt;p&gt;
				&amp;nbsp;
			&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;
			&amp;nbsp;
		&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>是时候做做减法了</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e6%2598%25af%25e6%2597%25b6%25e5%2580%2599%25e5%2581%259a%25e5%2581%259a%25e5%2587%258f%25e6%25b3%2595%25e4%25ba%2586.html"/>
        <updated>2012-11-23T09:06:17+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e6%98%af%e6%97%b6%e5%80%99%e5%81%9a%e5%81%9a%e5%87%8f%e6%b3%95%e4%ba%86</id>
        <content type="html">&lt;p&gt;      一晃已经工作5年了。脑子里塞的东西是越来越多,电脑里光pdf就5g多了，500G的硬盘也吃紧啊。&lt;br /&gt;
      但真正深入的东西却寥寥无几。能真正的说出个所以然的东西没几个。&lt;br /&gt;
      是时候做做减法了，找出需要深入的内容好好研究研究，不需要的内容，下狠心删掉。。。。&lt;br /&gt;
      今年最后的任务就这了。确定好自己需要深入的内容。明年好好执行。。。。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;      一晃已经工作5年了。脑子里塞的东西是越来越多,电脑里光pdf就5g多了，500G的硬盘也吃紧啊。&lt;br /&gt;
      但真正深入的东西却寥寥无几。能真正的说出个所以然的东西没几个。&lt;br /&gt;
      是时候做做减法了，找出需要深入的内容好好研究研究，不需要的内容，下狠心删掉。。。。&lt;br /&gt;
      今年最后的任务就这了。确定好自己需要深入的内容。明年好好执行。。。。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>AutoComplete与Yasnippet结合使用</title>
        <link href="http://liyouhai.com/emacs-vim/autocomplete%25e4%25b8%258eyasnippet%25e7%25bb%2593%25e5%2590%2588%25e4%25bd%25bf%25e7%2594%25a8.html"/>
        <updated>2012-08-30T12:53:51+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/autocomplete%e4%b8%8eyasnippet%e7%bb%93%e5%90%88%e4%bd%bf%e7%94%a8</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是一个补全的前端，而&lt;/span&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是代码片段插件，可以作为&lt;/span&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的后端使用。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;但是&lt;/span&gt;Yasnippet0.7.0&lt;span style=&quot;font-family:微软雅黑&quot;&gt;与&lt;/span&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是有冲突的，搞了半天才搞定。配置如下：&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;auto-complete&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/auto-complete-1.3.1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'auto-complete-config)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(defun ac-yasnippet-candidates ()&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(with-no-warnings&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;; &amp;gt;0.6.0&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(apply 'append (mapcar 'ac-yasnippet-candidate-1 (yas/get-snippet-tables)))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'ac-dictionary-directories &quot;~/plugins/auto-complete-1.3.1/dict&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(ac-config-default)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-auto-complete-mode t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;(setq ac-auto-start 2)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;(setq ac-dwim t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;显示doc文档信息&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq ac-use-quick-help t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq ac-quick-help-delay 0)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;输入错误时仍能匹配,需手动触发&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq ac-fuzzy-enable t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-set-key (kbd &quot;M-]&quot;) 'auto-complete)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置auto-complete弹出菜单配色&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-underline 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-selection-face &quot;#93A1A1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;添加需要提示的内容&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq-default ac-sources '(&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-yasnippet&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-filename&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-all-buffer&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-functions&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-variables&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-symbols&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-features&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-abbrev&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-same-mode-buffers&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-dictionary))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置yasnippet&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/yasnippet-0.7.0&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'yasnippet) ;; not yasnippet-bundle&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/initialize)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/load-directory &quot;~/plugins/yasnippet/snippets&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq yas/trigger-key (kbd &quot;M-[&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;最最重要的就是这句了。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(with-no-warnings&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;; &amp;gt;0.6.0&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(apply 'append (mapcar 'ac-yasnippet-candidate-1 (yas/get-snippet-tables)))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;解决&lt;/span&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;与&lt;/span&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;冲突的，否则死活都报错。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;贴张图，其中黄色提示的部分是&lt;/span&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的补全提示&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/083012_1253_AutoComplet1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是一个补全的前端，而&lt;/span&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是代码片段插件，可以作为&lt;/span&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的后端使用。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;但是&lt;/span&gt;Yasnippet0.7.0&lt;span style=&quot;font-family:微软雅黑&quot;&gt;与&lt;/span&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是有冲突的，搞了半天才搞定。配置如下：&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;auto-complete&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/auto-complete-1.3.1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'auto-complete-config)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(defun ac-yasnippet-candidates ()&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(with-no-warnings&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;; &amp;gt;0.6.0&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(apply 'append (mapcar 'ac-yasnippet-candidate-1 (yas/get-snippet-tables)))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'ac-dictionary-directories &quot;~/plugins/auto-complete-1.3.1/dict&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(ac-config-default)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-auto-complete-mode t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;(setq ac-auto-start 2)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;(setq ac-dwim t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;显示doc文档信息&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq ac-use-quick-help t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq ac-quick-help-delay 0)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;输入错误时仍能匹配,需手动触发&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq ac-fuzzy-enable t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-set-key (kbd &quot;M-]&quot;) 'auto-complete)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置auto-complete弹出菜单配色&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-underline 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-selection-face &quot;#93A1A1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;添加需要提示的内容&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq-default ac-sources '(&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-yasnippet&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-filename&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-all-buffer&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-functions&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-variables&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-symbols&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-features&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-abbrev&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-same-mode-buffers&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-dictionary))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置yasnippet&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/yasnippet-0.7.0&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'yasnippet) ;; not yasnippet-bundle&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/initialize)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/load-directory &quot;~/plugins/yasnippet/snippets&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq yas/trigger-key (kbd &quot;M-[&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;最最重要的就是这句了。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(with-no-warnings&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;; &amp;gt;0.6.0&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(apply 'append (mapcar 'ac-yasnippet-candidate-1 (yas/get-snippet-tables)))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;解决&lt;/span&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;与&lt;/span&gt;AutoComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;冲突的，否则死活都报错。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;贴张图，其中黄色提示的部分是&lt;/span&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的补全提示&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/083012_1253_AutoComplet1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Yasnippet java-mode</title>
        <link href="http://liyouhai.com/emacs-vim/yasnippet-java-mode.html"/>
        <updated>2012-08-21T12:38:48+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/yasnippet-java-mode</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认没有提供&lt;/span&gt;java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的代码片段。到此处下载&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nekop/yasnippet-java-mode&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/nekop/yasnippet-java-mode&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;解压到&lt;/span&gt; ~/plugins/yasnippet/snippets/java-mode&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下即可&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;当然你必须要先安装&lt;/span&gt;yasnippet.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认没有提供&lt;/span&gt;java&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的代码片段。到此处下载&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nekop/yasnippet-java-mode&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/nekop/yasnippet-java-mode&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;解压到&lt;/span&gt; ~/plugins/yasnippet/snippets/java-mode&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下即可&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;当然你必须要先安装&lt;/span&gt;yasnippet.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs安装Yasnippet</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e5%25ae%2589%25e8%25a3%2585yasnippet.html"/>
        <updated>2012-08-20T13:18:10+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e5%ae%89%e8%a3%85yasnippet</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;算是&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下很出名的插件了。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;下载地址&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/capitaomorte/yasnippet&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/capitaomorte/yasnippet&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下载后解压缩到&lt;/span&gt;~/plugins&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下面去，在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;里面配置&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置yasnippet&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/yasnippet-0.7.0&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'yasnippet) ;; not yasnippet-bundle&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/initialize)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/load-directory &quot;~/plugins/yasnippet/snippets&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq yas/trigger-key (kbd &quot;M-[&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;当你打开某个&lt;/span&gt;mode&lt;span style=&quot;font-family:微软雅黑&quot;&gt;使自动触发相应的&lt;/span&gt;yasnippet,&lt;span style=&quot;font-family:微软雅黑&quot;&gt;输入内容按&lt;/span&gt;tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;自动完成，如果有多个选项会弹出弹出框，按列表中的首字母可定位到相应的选项，回车选择。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/082012_1318_EmacsYasnip1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;yasnippet&lt;span style=&quot;font-family:微软雅黑&quot;&gt;算是&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下很出名的插件了。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;下载地址&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/capitaomorte/yasnippet&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/capitaomorte/yasnippet&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下载后解压缩到&lt;/span&gt;~/plugins&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下面去，在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;里面配置&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置yasnippet&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/yasnippet-0.7.0&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'yasnippet) ;; not yasnippet-bundle&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/initialize)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(yas/load-directory &quot;~/plugins/yasnippet/snippets&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq yas/trigger-key (kbd &quot;M-[&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;当你打开某个&lt;/span&gt;mode&lt;span style=&quot;font-family:微软雅黑&quot;&gt;使自动触发相应的&lt;/span&gt;yasnippet,&lt;span style=&quot;font-family:微软雅黑&quot;&gt;输入内容按&lt;/span&gt;tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;自动完成，如果有多个选项会弹出弹出框，按列表中的首字母可定位到相应的选项，回车选择。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/082012_1318_EmacsYasnip1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs安装auto-complete</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e5%25ae%2589%25e8%25a3%2585auto-complete.html"/>
        <updated>2012-08-18T12:28:02+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e5%ae%89%e8%a3%85auto-complete</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Auto-complete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下很棒的补全前端，能实现&lt;/span&gt;Vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下&lt;/span&gt;OmniComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的功能。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;下载地址：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/m2ym/auto-complete&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/m2ym/auto-complete&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;压缩包中包含了&lt;/span&gt;manual.txt&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，有详细的安装过程。不过我看挺麻烦的。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;我直接解压到&lt;/span&gt;~/plugins&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下。在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下添加如下内容，搞定！&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置auto-complete&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/auto-complete-1.3.1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'auto-complete-config)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'ac-dictionary-directories &quot;~/plugins/auto-complete-1.3.1/dict&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(ac-config-default)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;全局开启&lt;/span&gt;auto-complete&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-auto-complete-mode t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-set-key (kbd &quot;M-[&quot;) 'auto-complete)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置auto-complete弹出菜单配色&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-underline 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-selection-face &quot;#93A1A1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;添加需要提示的内容&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq-default ac-sources '(&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;ac-source-yasnippet&lt;/span&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;需要安装&lt;/span&gt;yasnippet&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-filename&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-all-buffer&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-functions&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-variables&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-symbols&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-features&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-abbrev&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-same-mode-buffers&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-dictionary))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;看看效果：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081812_1227_Emacsautoco1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;不错吧&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Auto-complete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下很棒的补全前端，能实现&lt;/span&gt;Vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下&lt;/span&gt;OmniComplete&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的功能。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;下载地址：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/m2ym/auto-complete&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/m2ym/auto-complete&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;压缩包中包含了&lt;/span&gt;manual.txt&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，有详细的安装过程。不过我看挺麻烦的。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;我直接解压到&lt;/span&gt;~/plugins&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下。在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下添加如下内容，搞定！&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置auto-complete&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/auto-complete-1.3.1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'auto-complete-config)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'ac-dictionary-directories &quot;~/plugins/auto-complete-1.3.1/dict&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(ac-config-default)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;全局开启&lt;/span&gt;auto-complete&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-auto-complete-mode t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-set-key (kbd &quot;M-[&quot;) 'auto-complete)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置auto-complete弹出菜单配色&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-underline 'ac-candidate-face &quot;#657B83&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(set-face-background 'ac-selection-face &quot;#93A1A1&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;添加需要提示的内容&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq-default ac-sources '(&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;ac-source-yasnippet&lt;/span&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;需要安装&lt;/span&gt;yasnippet&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-filename&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-all-buffer&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-functions&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-variables&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-symbols&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-features&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-abbrev&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-words-in-same-mode-buffers&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;     ac-source-dictionary))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;看看效果：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081812_1227_Emacsautoco1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;不错吧&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Vim显示Tab页</title>
        <link href="http://liyouhai.com/emacs-vim/vim%25e6%2598%25be%25e7%25a4%25batab%25e9%25a1%25b5.html"/>
        <updated>2012-08-17T10:10:13+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/vim%e6%98%be%e7%a4%batab%e9%a1%b5</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认就支持&lt;/span&gt;Tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;页，只需要在配置文件中添加配置就行了&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081712_1010_VimTab1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认&lt;/span&gt;vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;只能同时显示&lt;/span&gt;10&lt;span style=&quot;font-family:微软雅黑&quot;&gt;个&lt;/span&gt;tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;页，通过设置&lt;/span&gt;tabpagemax&lt;span style=&quot;font-family:微软雅黑&quot;&gt;可以修改为你想要的任意值&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;guitablabel&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是在&lt;/span&gt;tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;页上显示的方式，这里是需要&lt;/span&gt;+&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件名&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081712_1010_VimTab2.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在&lt;/span&gt;Normal&lt;span style=&quot;font-family:微软雅黑&quot;&gt;模式下&lt;/span&gt; gt&lt;span style=&quot;font-family:微软雅黑&quot;&gt;为下一个&lt;/span&gt;tab   gT&lt;span style=&quot;font-family:微软雅黑&quot;&gt;为上一个&lt;/span&gt;tab&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认就支持&lt;/span&gt;Tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;页，只需要在配置文件中添加配置就行了&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081712_1010_VimTab1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认&lt;/span&gt;vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;只能同时显示&lt;/span&gt;10&lt;span style=&quot;font-family:微软雅黑&quot;&gt;个&lt;/span&gt;tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;页，通过设置&lt;/span&gt;tabpagemax&lt;span style=&quot;font-family:微软雅黑&quot;&gt;可以修改为你想要的任意值&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;guitablabel&lt;span style=&quot;font-family:微软雅黑&quot;&gt;是在&lt;/span&gt;tab&lt;span style=&quot;font-family:微软雅黑&quot;&gt;页上显示的方式，这里是需要&lt;/span&gt;+&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件名&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081712_1010_VimTab2.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在&lt;/span&gt;Normal&lt;span style=&quot;font-family:微软雅黑&quot;&gt;模式下&lt;/span&gt; gt&lt;span style=&quot;font-family:微软雅黑&quot;&gt;为下一个&lt;/span&gt;tab   gT&lt;span style=&quot;font-family:微软雅黑&quot;&gt;为上一个&lt;/span&gt;tab&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>修改Vim字体</title>
        <link href="http://liyouhai.com/emacs-vim/%25e4%25bf%25ae%25e6%2594%25b9vim%25e5%25ad%2597%25e4%25bd%2593.html"/>
        <updated>2012-08-16T14:01:55+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/%e4%bf%ae%e6%94%b9vim%e5%ad%97%e4%bd%93</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;字体的修改和&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;很相似，同样的修改配置文件就可以了。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改&lt;/span&gt;_vimrc&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加如下内容&lt;/span&gt;:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081612_1401_Vim1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;字体的修改和&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;很相似，同样的修改配置文件就可以了。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改&lt;/span&gt;_vimrc&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加如下内容&lt;/span&gt;:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081612_1401_Vim1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Vim安装Solarized主题</title>
        <link href="http://liyouhai.com/emacs-vim/vim%25e5%25ae%2589%25e8%25a3%2585solarized%25e4%25b8%25bb%25e9%25a2%2598-2.html"/>
        <updated>2012-08-15T13:33:56+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/vim%e5%ae%89%e8%a3%85solarized%e4%b8%bb%e9%a2%98-2</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;从如下网址下载主题&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/altercation/vim-colors-solarized&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/altercation/vim-colors-solarized&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;将压缩文件中的&lt;/span&gt;solarized.vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件复制到&lt;/span&gt;vimfile/color&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件夹下。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;设置&lt;/span&gt;_vimrc&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加如下内容&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081512_1333_VimSolarize1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;从如下网址下载主题&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/altercation/vim-colors-solarized&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;https://github.com/altercation/vim-colors-solarized&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;将压缩文件中的&lt;/span&gt;solarized.vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件复制到&lt;/span&gt;vimfile/color&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件夹下。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;设置&lt;/span&gt;_vimrc&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加如下内容&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081512_1333_VimSolarize1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Win7安装Vim</title>
        <link href="http://liyouhai.com/emacs-vim/win7%25e5%25ae%2589%25e8%25a3%2585vim.html"/>
        <updated>2012-08-14T12:41:32+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/win7%e5%ae%89%e8%a3%85vim</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;Vim安装还是很方便的，从如下地址下载exe文件，双击安装就OK了&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.vim.org/download.php&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;http://www.vim.org/download.php#pc&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081412_1241_Win7Vim1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;界面挺难看的吧？没关系，改改样式就行了&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;Vim安装还是很方便的，从如下地址下载exe文件，双击安装就OK了&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.vim.org/download.php&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;http://www.vim.org/download.php#pc&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081412_1241_Win7Vim1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;界面挺难看的吧？没关系，改改样式就行了&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs重新载入Buffer</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e9%2587%258d%25e6%2596%25b0%25e8%25bd%25bd%25e5%2585%25a5buffer.html"/>
        <updated>2012-08-13T12:56:52+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e9%87%8d%e6%96%b0%e8%bd%bd%e5%85%a5buffer</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中是&lt;/span&gt;buffer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的概念，载入文件后即到了&lt;/span&gt;buffer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中，但是如果此时其他程序修改了此文件，&lt;/span&gt;emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;如何重新加载呢？&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;你当然可以使用&lt;/span&gt; C-x C-f &lt;span style=&quot;font-family:微软雅黑&quot;&gt;在打开一边文件&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;不过你也可以使用&lt;/span&gt; M-x revert-buffer &lt;span style=&quot;font-family:微软雅黑&quot;&gt;来重新载入&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中是&lt;/span&gt;buffer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的概念，载入文件后即到了&lt;/span&gt;buffer&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中，但是如果此时其他程序修改了此文件，&lt;/span&gt;emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;如何重新加载呢？&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;你当然可以使用&lt;/span&gt; C-x C-f &lt;span style=&quot;font-family:微软雅黑&quot;&gt;在打开一边文件&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;不过你也可以使用&lt;/span&gt; M-x revert-buffer &lt;span style=&quot;font-family:微软雅黑&quot;&gt;来重新载入&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs包管理</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e5%258c%2585%25e7%25ae%25a1%25e7%2590%2586.html"/>
        <updated>2012-08-12T14:50:04+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e5%8c%85%e7%ae%a1%e7%90%86</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs24.1&lt;span style=&quot;font-family:微软雅黑&quot;&gt;提供了一个包管理器，来方便你安装&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;插件。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;输入&lt;/span&gt; M+x list-packages&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;会显示出&lt;/span&gt; Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的插件，点击你想要安装的插件。点击&lt;/span&gt;Install&lt;span style=&quot;font-family:微软雅黑&quot;&gt;即可&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081212_1450_Emacs1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;既然使用&lt;/span&gt; Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;那么就不能怕折腾，所以我还是自己下载插件进行安装和配置，方便自己管理。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs24.1&lt;span style=&quot;font-family:微软雅黑&quot;&gt;提供了一个包管理器，来方便你安装&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;插件。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;输入&lt;/span&gt; M+x list-packages&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;会显示出&lt;/span&gt; Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的插件，点击你想要安装的插件。点击&lt;/span&gt;Install&lt;span style=&quot;font-family:微软雅黑&quot;&gt;即可&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081212_1450_Emacs1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;既然使用&lt;/span&gt; Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;那么就不能怕折腾，所以我还是自己下载插件进行安装和配置，方便自己管理。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs中显示图片</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e4%25b8%25ad%25e6%2598%25be%25e7%25a4%25ba%25e5%259b%25be%25e7%2589%2587.html"/>
        <updated>2012-08-11T10:03:35+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e4%b8%ad%e6%98%be%e7%a4%ba%e5%9b%be%e7%89%87</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;Emacs中是可以显示图片的，但是从GNU网站上下载的Emacs无法实现，目前没找到原因。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;从如下地址下载&lt;/span&gt;windows&lt;span style=&quot;font-family:微软雅黑&quot;&gt;版本的&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;安装包安装，可实现图片显示功能&lt;/span&gt;.&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;支持&lt;/span&gt;jpg,gif,png&lt;span style=&quot;font-family:微软雅黑&quot;&gt;不支持&lt;/span&gt;bmp&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vgoulet.act.ulaval.ca/en/emacs/windows/&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;http://vgoulet.act.ulaval.ca/en/emacs/windows/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081112_1003_Emacs1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;Emacs中是可以显示图片的，但是从GNU网站上下载的Emacs无法实现，目前没找到原因。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;从如下地址下载&lt;/span&gt;windows&lt;span style=&quot;font-family:微软雅黑&quot;&gt;版本的&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;安装包安装，可实现图片显示功能&lt;/span&gt;.&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;支持&lt;/span&gt;jpg,gif,png&lt;span style=&quot;font-family:微软雅黑&quot;&gt;不支持&lt;/span&gt;bmp&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vgoulet.act.ulaval.ca/en/emacs/windows/&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;http://vgoulet.act.ulaval.ca/en/emacs/windows/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081112_1003_Emacs1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs安装Scala插件</title>
        <link href="http://liyouhai.com/emacs-vim/java-scala/emacs%25e5%25ae%2589%25e8%25a3%2585scala%25e6%258f%2592%25e4%25bb%25b6.html"/>
        <updated>2012-08-10T13:08:46+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/java-scala/emacs%e5%ae%89%e8%a3%85scala%e6%8f%92%e4%bb%b6</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;最近对&lt;/span&gt;Scala&lt;span style=&quot;font-family:微软雅黑&quot;&gt;比较感兴趣。安装玩玩&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Scala&lt;span style=&quot;font-family:微软雅黑&quot;&gt;插件需要从&lt;/span&gt;svn&lt;span style=&quot;font-family:微软雅黑&quot;&gt;上&lt;/span&gt;checkout,svn&lt;span style=&quot;font-family:微软雅黑&quot;&gt;地址为&lt;/span&gt;:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/emacs/&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/emacs/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;checkout&lt;span style=&quot;font-family:微软雅黑&quot;&gt;后，将其放到&lt;/span&gt; ~/plugins/scala&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置Scala&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/scala&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'scala-mode-auto)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;搞定&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081012_1308_Scala1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;最近对&lt;/span&gt;Scala&lt;span style=&quot;font-family:微软雅黑&quot;&gt;比较感兴趣。安装玩玩&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Scala&lt;span style=&quot;font-family:微软雅黑&quot;&gt;插件需要从&lt;/span&gt;svn&lt;span style=&quot;font-family:微软雅黑&quot;&gt;上&lt;/span&gt;checkout,svn&lt;span style=&quot;font-family:微软雅黑&quot;&gt;地址为&lt;/span&gt;:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/emacs/&quot;&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/emacs/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;checkout&lt;span style=&quot;font-family:微软雅黑&quot;&gt;后，将其放到&lt;/span&gt; ~/plugins/scala&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置Scala&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/scala&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'scala-mode-auto)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;搞定&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/081012_1308_Scala1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs编辑二进制</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e7%25bc%2596%25e8%25be%2591%25e4%25ba%258c%25e8%25bf%259b%25e5%2588%25b6.html"/>
        <updated>2012-08-09T11:52:08+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e7%bc%96%e8%be%91%e4%ba%8c%e8%bf%9b%e5%88%b6</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;有时有查看二进制文件的需求。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M-x hexl-model&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;即可查看二进制文件了&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080912_1152_Emacs1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;比&lt;/span&gt;vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;好的地方是，&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;可以直接编辑右边的内容，不过好像只能添加不能删除。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;如果需要修改十六进制数，需要&lt;/span&gt;C-M-x&lt;span style=&quot;font-family:微软雅黑&quot;&gt;或者&lt;/span&gt;M-x &lt;span style=&quot;font-family:微软雅黑&quot;&gt;hexl-insert-hex-char 来插入十六进制数&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;退出十六进制&lt;/span&gt;Mode&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M-x&lt;span style=&quot;font-family:微软雅黑&quot;&gt; hexl-mode-exit &lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;有时有查看二进制文件的需求。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M-x hexl-model&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;即可查看二进制文件了&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080912_1152_Emacs1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;比&lt;/span&gt;vim&lt;span style=&quot;font-family:微软雅黑&quot;&gt;好的地方是，&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;可以直接编辑右边的内容，不过好像只能添加不能删除。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;如果需要修改十六进制数，需要&lt;/span&gt;C-M-x&lt;span style=&quot;font-family:微软雅黑&quot;&gt;或者&lt;/span&gt;M-x &lt;span style=&quot;font-family:微软雅黑&quot;&gt;hexl-insert-hex-char 来插入十六进制数&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;退出十六进制&lt;/span&gt;Mode&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M-x&lt;span style=&quot;font-family:微软雅黑&quot;&gt; hexl-mode-exit &lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs显示行号</title>
        <link href="http://liyouhai.com/emacs-vim/%25e6%2598%25be%25e7%25a4%25ba%25e8%25a1%258c%25e5%258f%25b7.html"/>
        <updated>2012-08-08T12:33:37+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/%e6%98%be%e7%a4%ba%e8%a1%8c%e5%8f%b7</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认不显示行号，各种不习惯。修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;显示行号&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-linum-mode t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080812_1233_1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;默认不显示行号，各种不习惯。修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;显示行号&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(global-linum-mode t)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080812_1233_1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt; &lt;br /&gt;
&lt;/span&gt; &lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs基本编辑命令</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e5%259f%25ba%25e6%259c%25ac%25e7%25bc%2596%25e8%25be%2591%25e5%2591%25bd%25e4%25bb%25a4.html"/>
        <updated>2012-08-07T11:26:56+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e5%9f%ba%e6%9c%ac%e7%bc%96%e8%be%91%e5%91%bd%e4%bb%a4</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;大部分命令为&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;自带的教程中摘录出来的，其余为网上搜集&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;总则：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;strong&gt;M+* 与语义有关的操作&lt;/strong&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;strong&gt;C+* 与语义无关的操作&lt;/strong&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+v         向下翻一屏&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+v       向上翻一屏&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-m            移动到第一个非空格字符 (back-to-indentation)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+l          光标所在文字居中&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+f         向前移动&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+b        向后移动&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+p        向上一行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+n        向下一行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+f        向前一个单词（针对英文），中文以符号空格等区分&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+b       向后一个单词（同上）&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M+{            &lt;span style=&quot;font-family:微软雅黑&quot;&gt;段落头&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M+}            &lt;span style=&quot;font-family:微软雅黑&quot;&gt;段落尾&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-r 窗口中间&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-x goto-char RET N 文件的第 N 字节&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-x goto-line RET N 文件第 N 行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+a         移动到行首&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+e         移动到行尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+a       移动到句首&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+e       移动到句尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+&amp;lt;       移动到最开始&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+&amp;gt;       移动到最末尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-a 到函数头&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-e 到函数尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-f 到下一个同级语法结构&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-b 到上一个同级语法结构&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-d 进入到下一级结构里&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-u 进入到上一级结构里&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+u [num] [op]  对op操作num次 (C+u 2 C+n 向下移动两行)特殊情况：对于C+v和M+v来说C+u 8 C+v不是滚动8屏，而是滚动8行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+g         终止命令&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+x 1     保留一个窗格&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&amp;lt;Delback&amp;gt;    删除光标前的一个字符   backspace&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-d          删除光标后的一个字符&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-&amp;lt;Delback&amp;gt;  移除光标前的一个词&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-d          移除光标后的一个词&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-k          移除从光标到&quot;行尾&quot;间的字符&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-k          移除从光标到&quot;句尾&quot;间的字符&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-space = C-@ 选择操作区&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-w 删除区域&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-w 复制区域&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-y 粘贴&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-0 C-y 向前剪切&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-z x 从光标删除到第一x&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-s 搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-r 逆向搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-s 正则搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-x replace-string 替换文本&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x b 切换buffer（要输入buffer名字）&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 方向键也可以切换buffer&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x C-w 保存buffer（也可以看做是另存为）&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x l : 显示文件(buffer)总行数&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 1 : 当前窗口最大化&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 2 : 上下两窗口模式&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 3 : 左右两窗口模式&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 0 : 关闭当前窗口(Buffer仍然存在)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x o : 切换窗口&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;大部分命令为&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;自带的教程中摘录出来的，其余为网上搜集&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;总则：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;strong&gt;M+* 与语义有关的操作&lt;/strong&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&lt;strong&gt;C+* 与语义无关的操作&lt;/strong&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+v         向下翻一屏&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+v       向上翻一屏&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-m            移动到第一个非空格字符 (back-to-indentation)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+l          光标所在文字居中&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+f         向前移动&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+b        向后移动&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+p        向上一行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+n        向下一行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+f        向前一个单词（针对英文），中文以符号空格等区分&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+b       向后一个单词（同上）&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M+{            &lt;span style=&quot;font-family:微软雅黑&quot;&gt;段落头&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;M+}            &lt;span style=&quot;font-family:微软雅黑&quot;&gt;段落尾&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-r 窗口中间&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-x goto-char RET N 文件的第 N 字节&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-x goto-line RET N 文件第 N 行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+a         移动到行首&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+e         移动到行尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+a       移动到句首&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+e       移动到句尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+&amp;lt;       移动到最开始&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M+&amp;gt;       移动到最末尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-a 到函数头&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-e 到函数尾&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-f 到下一个同级语法结构&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-b 到上一个同级语法结构&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-d 进入到下一级结构里&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-u 进入到上一级结构里&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+u [num] [op]  对op操作num次 (C+u 2 C+n 向下移动两行)特殊情况：对于C+v和M+v来说C+u 8 C+v不是滚动8屏，而是滚动8行&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+g         终止命令&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C+x 1     保留一个窗格&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;&amp;lt;Delback&amp;gt;    删除光标前的一个字符   backspace&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-d          删除光标后的一个字符&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-&amp;lt;Delback&amp;gt;  移除光标前的一个词&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-d          移除光标后的一个词&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-k          移除从光标到&quot;行尾&quot;间的字符&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-k          移除从光标到&quot;句尾&quot;间的字符&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-space = C-@ 选择操作区&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-w 删除区域&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-w 复制区域&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-y 粘贴&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-0 C-y 向前剪切&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-z x 从光标删除到第一x&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-s 搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-r 逆向搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;C-M-s 正则搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;M-x replace-string 替换文本&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x b 切换buffer（要输入buffer名字）&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 方向键也可以切换buffer&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x C-w 保存buffer（也可以看做是另存为）&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x l : 显示文件(buffer)总行数&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 1 : 当前窗口最大化&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 2 : 上下两窗口模式&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 3 : 左右两窗口模式&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x 0 : 关闭当前窗口(Buffer仍然存在)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;C-x o : 切换窗口&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>启动时Emacs窗口大小</title>
        <link href="http://liyouhai.com/emacs-vim/%25e5%2590%25af%25e5%258a%25a8%25e6%2597%25b6emacs%25e7%25aa%2597%25e5%258f%25a3%25e5%25a4%25a7%25e5%25b0%258f.html"/>
        <updated>2012-08-06T13:27:31+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/%e5%90%af%e5%8a%a8%e6%97%b6emacs%e7%aa%97%e5%8f%a3%e5%a4%a7%e5%b0%8f</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在设置了&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;字体后，&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;窗口大小会随之变化，比如我设置了雅黑&lt;/span&gt;12&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的字体，我的笔记本屏幕相对较小，则启动后，&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的大小太大了，超出了屏幕的范围，还要手动修改，非常的不方便。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中添加如下内容，就可以控制&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;启动后的窗口大小了。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置启动时Emacs的高度和宽度&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq default-frame-alist '((height . 30) (width . 100)))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在设置了&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;字体后，&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;窗口大小会随之变化，比如我设置了雅黑&lt;/span&gt;12&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的字体，我的笔记本屏幕相对较小，则启动后，&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;的大小太大了，超出了屏幕的范围，还要手动修改，非常的不方便。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;中添加如下内容，就可以控制&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;启动后的窗口大小了。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;设置启动时Emacs的高度和宽度&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq default-frame-alist '((height . 30) (width . 100)))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs保存历史命令</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e4%25bf%259d%25e5%25ad%2598%25e5%258e%2586%25e5%258f%25b2%25e5%2591%25bd%25e4%25bb%25a4.html"/>
        <updated>2012-08-05T08:45:18+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e4%bf%9d%e5%ad%98%e5%8e%86%e5%8f%b2%e5%91%bd%e4%bb%a4</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;保存的命令在关闭后就没有了，第二次打开又要重新输入一遍，非常的麻烦。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;幸好有了&lt;/span&gt;session.el&lt;span style=&quot;font-family:微软雅黑&quot;&gt;，请到&lt;a href=&quot;http://www.emacswiki.org/emacs/EmacsSession&quot;&gt;http://www.emacswiki.org/emacs/EmacsSession&lt;/a&gt; 下载&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;保存到&lt;/span&gt;home&lt;span style=&quot;font-family:微软雅黑&quot;&gt;路径下，我保存在&lt;/span&gt;~/plugins/session&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下。在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件中添加如下内容&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;关闭Emacs后依然保存历史记录&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/session&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'session)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-hook 'after-init-hook&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;'session-initialize)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;这样在你重新打开&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;后，之前敲打的命令依然存在，你好像没有关闭&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;一样。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;保存的命令在关闭后就没有了，第二次打开又要重新输入一遍，非常的麻烦。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;幸好有了&lt;/span&gt;session.el&lt;span style=&quot;font-family:微软雅黑&quot;&gt;，请到&lt;a href=&quot;http://www.emacswiki.org/emacs/EmacsSession&quot;&gt;http://www.emacswiki.org/emacs/EmacsSession&lt;/a&gt; 下载&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;保存到&lt;/span&gt;home&lt;span style=&quot;font-family:微软雅黑&quot;&gt;路径下，我保存在&lt;/span&gt;~/plugins/session&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录下。在&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件中添加如下内容&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;关闭Emacs后依然保存历史记录&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-to-list 'load-path &quot;~/plugins/session&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(require 'session)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(add-hook 'after-init-hook&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;'session-initialize)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;这样在你重新打开&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;后，之前敲打的命令依然存在，你好像没有关闭&lt;/span&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;一样。&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs关闭菜单栏</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e5%2585%25b3%25e9%2597%25ad%25e8%258f%259c%25e5%258d%2595%25e6%25a0%258f.html"/>
        <updated>2012-08-04T14:21:10+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e5%85%b3%e9%97%ad%e8%8f%9c%e5%8d%95%e6%a0%8f</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;当然不建议使用鼠标了，不过刚开始使用还不是很习惯，慢慢的来，先去掉大大的菜单来。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080412_1421_1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;从左到右分别是&lt;/span&gt;:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;新建，打开，目录，关闭，保存，撤消，剪切，复制，粘帖，搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;其对应的快捷键为：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;新建&lt;/span&gt;/&lt;span style=&quot;font-family:微软雅黑&quot;&gt;打开&lt;/span&gt;:  C-x C-f&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录&lt;/span&gt;: M-x dired &amp;lt;enter&amp;gt;  &lt;span style=&quot;font-family:微软雅黑&quot;&gt;输入目录&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;关闭&lt;/span&gt;:  C-x k &amp;lt;enter&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;保存&lt;/span&gt;: C-x C-s&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;撤消&lt;/span&gt;: C-x u   &lt;span style=&quot;font-family:微软雅黑&quot;&gt;或者&lt;/span&gt;  C-/&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;剪切&lt;/span&gt;: C-@ &lt;span style=&quot;font-family:微软雅黑&quot;&gt;标记&lt;/span&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;移动鼠标选中文字&lt;/span&gt; C-w &lt;span style=&quot;font-family:微软雅黑&quot;&gt;剪切&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;复制&lt;/span&gt;: C-@ &lt;span style=&quot;font-family:微软雅黑&quot;&gt;标记&lt;/span&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;移动鼠标选中文字&lt;/span&gt; M-w &lt;span style=&quot;font-family:微软雅黑&quot;&gt;复制&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;粘帖&lt;/span&gt;:  C-y&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;搜索&lt;/span&gt;: C-s&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;记住如上的快捷键，关闭菜单栏吧。修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;关闭工具栏&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(tool-bar-mode -1)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;当然不建议使用鼠标了，不过刚开始使用还不是很习惯，慢慢的来，先去掉大大的菜单来。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080412_1421_1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;从左到右分别是&lt;/span&gt;:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;新建，打开，目录，关闭，保存，撤消，剪切，复制，粘帖，搜索&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;其对应的快捷键为：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;新建&lt;/span&gt;/&lt;span style=&quot;font-family:微软雅黑&quot;&gt;打开&lt;/span&gt;:  C-x C-f&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;目录&lt;/span&gt;: M-x dired &amp;lt;enter&amp;gt;  &lt;span style=&quot;font-family:微软雅黑&quot;&gt;输入目录&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;关闭&lt;/span&gt;:  C-x k &amp;lt;enter&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;保存&lt;/span&gt;: C-x C-s&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;撤消&lt;/span&gt;: C-x u   &lt;span style=&quot;font-family:微软雅黑&quot;&gt;或者&lt;/span&gt;  C-/&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;剪切&lt;/span&gt;: C-@ &lt;span style=&quot;font-family:微软雅黑&quot;&gt;标记&lt;/span&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;移动鼠标选中文字&lt;/span&gt; C-w &lt;span style=&quot;font-family:微软雅黑&quot;&gt;剪切&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;复制&lt;/span&gt;: C-@ &lt;span style=&quot;font-family:微软雅黑&quot;&gt;标记&lt;/span&gt;&lt;br /&gt;
			&lt;span style=&quot;font-family:微软雅黑&quot;&gt;移动鼠标选中文字&lt;/span&gt; M-w &lt;span style=&quot;font-family:微软雅黑&quot;&gt;复制&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;粘帖&lt;/span&gt;:  C-y&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;搜索&lt;/span&gt;: C-s&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;记住如上的快捷键，关闭菜单栏吧。修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;关闭工具栏&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(tool-bar-mode -1)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs关闭备份文件</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e5%2585%25b3%25e9%2597%25ad%25e5%25a4%2587%25e4%25bb%25bd%25e6%2596%2587%25e4%25bb%25b6.html"/>
        <updated>2012-08-03T14:34:38+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e5%85%b3%e9%97%ad%e5%a4%87%e4%bb%bd%e6%96%87%e4%bb%b6</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;会默认给你建立备份文件。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;比如你创建了一个&lt;/span&gt; test.txt &lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，则&lt;/span&gt;emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;会给你创建一个&lt;/span&gt; test.txt~ &lt;span style=&quot;font-family:微软雅黑&quot;&gt;备份文件。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;个人觉得没什么用。关闭之。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;不产生备份文件&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq make-backup-files nil)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:10pt&quot;&gt;搞定&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;Emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;会默认给你建立备份文件。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;比如你创建了一个&lt;/span&gt; test.txt &lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，则&lt;/span&gt;emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;会给你创建一个&lt;/span&gt; test.txt~ &lt;span style=&quot;font-family:微软雅黑&quot;&gt;备份文件。&lt;/span&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;个人觉得没什么用。关闭之。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:11pt&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改&lt;/span&gt;.emacs&lt;span style=&quot;font-family:微软雅黑&quot;&gt;文件，添加&lt;/span&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
			&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;;不产生备份文件&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;(setq make-backup-files nil)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:10pt&quot;&gt;搞定&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs添加Tab</title>
        <link href="http://liyouhai.com/emacs-vim/emacs%25e6%25b7%25bb%25e5%258a%25a0tab.html"/>
        <updated>2012-08-02T12:51:01+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs%e6%b7%bb%e5%8a%a0tab</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;用惯了&lt;/span&gt;Tab&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;页的显示方式，不大习惯&lt;/span&gt;Emacs&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;的&lt;/span&gt;buffer&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;。&lt;/span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;只要使用&lt;/span&gt;Tabbar&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，&lt;/span&gt;Emacs&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;也能支持&lt;/span&gt;Tab&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;页的展示方式。&lt;/span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;下载地址：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://emacswiki.org/emacs/tabbar.el&quot;&gt;&lt;span style=&quot;font-family: Georgia; font-size: 10pt; background-color: white;&quot;&gt;http://emacswiki.org/emacs/tabbar.el&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: 宋体; font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/download/tabbar-ruler.el&quot;&gt;&lt;span style=&quot;font-family: Georgia; font-size: 10pt; background-color: white;&quot;&gt;http://www.emacswiki.org/emacs/download/tabbar-ruler.el&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;&lt;span style=&quot;color: #595959;&quot;&gt;将其保存到 &lt;/span&gt;～plugins\tabbar&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #595959; font-family: 微软雅黑; font-size: 11pt;&quot;&gt;修改.emacs文件，添加如下内容：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;设置Tab页&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(add-to-list 'load-path (expand-file-name &quot;~/plugins/tabbar&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(setq tabbar-ruler-global-tabbar 't) ; If you want tabbar&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(setq tabbar-ruler-global-ruler 't) ; if you want a global ruler&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;(setq tabbar-ruler-popup-menu 't) ; If you want a popup menu.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;(setq tabbar-ruler-popup-toolbar 't) ; If you want a popup toolbar&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;(require 'tabbar-ruler)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;Tab页快捷键&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(global-set-key (kbd &quot;C-,&quot;) 'tabbar-backward)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(global-set-key (kbd &quot;C-.&quot;) 'tabbar-forward)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080212_1250_Tab1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family: 宋体; font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;修改Tab的样式，默认Tab样式不太好看，可以对其进行修改。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;如下内容为从网上搜索到的内容。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置tabbar外观&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置默认主题: 字体, 背景和前景颜色，大小&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-default-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:family &quot;DejaVu Sans Mono&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:background &quot;gray80&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:foreground &quot;gray30&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:height 1.0&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置左边按钮外观：外框框边大小和颜色&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-button-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:inherit 'tabbar-default&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:box '(:line-width 1 :color &quot;yellow70&quot;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置当前tab外观：颜色，字体，外框大小和颜色&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-selected-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:inherit 'tabbar-default&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:foreground &quot;DarkGreen&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:background &quot;LightGoldenrod&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:box '(:line-width 2 :color &quot;DarkGoldenrod&quot;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;\:overline &quot;black&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:underline &quot;black&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:weight 'bold&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置非当前tab外观：外框大小和颜色&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-unselected-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:inherit 'tabbar-default&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:box '(:line-width 2 :color &quot;#00B2BF&quot;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;我对其进行了一些修改，最终我的Tab看起来像这样&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt; &lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2012/08/1.png&quot;&gt;&lt;img class=&quot;alignnone  wp-image-416&quot; title=&quot;1&quot; src=&quot;assets/1.png&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;用惯了&lt;/span&gt;Tab&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;页的显示方式，不大习惯&lt;/span&gt;Emacs&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;的&lt;/span&gt;buffer&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;。&lt;/span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;只要使用&lt;/span&gt;Tabbar&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，&lt;/span&gt;Emacs&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;也能支持&lt;/span&gt;Tab&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;页的展示方式。&lt;/span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;下载地址：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://emacswiki.org/emacs/tabbar.el&quot;&gt;&lt;span style=&quot;font-family: Georgia; font-size: 10pt; background-color: white;&quot;&gt;http://emacswiki.org/emacs/tabbar.el&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: 宋体; font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/download/tabbar-ruler.el&quot;&gt;&lt;span style=&quot;font-family: Georgia; font-size: 10pt; background-color: white;&quot;&gt;http://www.emacswiki.org/emacs/download/tabbar-ruler.el&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;&lt;span style=&quot;color: #595959;&quot;&gt;将其保存到 &lt;/span&gt;～plugins\tabbar&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #595959; font-family: 微软雅黑; font-size: 11pt;&quot;&gt;修改.emacs文件，添加如下内容：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;设置Tab页&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(add-to-list 'load-path (expand-file-name &quot;~/plugins/tabbar&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(setq tabbar-ruler-global-tabbar 't) ; If you want tabbar&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(setq tabbar-ruler-global-ruler 't) ; if you want a global ruler&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;(setq tabbar-ruler-popup-menu 't) ; If you want a popup menu.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;(setq tabbar-ruler-popup-toolbar 't) ; If you want a popup toolbar&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;(require 'tabbar-ruler)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;;Tab页快捷键&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(global-set-key (kbd &quot;C-,&quot;) 'tabbar-backward)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;(global-set-key (kbd &quot;C-.&quot;) 'tabbar-forward)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/080212_1250_Tab1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family: 宋体; font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;修改Tab的样式，默认Tab样式不太好看，可以对其进行修改。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;如下内容为从网上搜索到的内容。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置tabbar外观&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置默认主题: 字体, 背景和前景颜色，大小&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-default-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:family &quot;DejaVu Sans Mono&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:background &quot;gray80&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:foreground &quot;gray30&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:height 1.0&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置左边按钮外观：外框框边大小和颜色&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-button-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:inherit 'tabbar-default&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:box '(:line-width 1 :color &quot;yellow70&quot;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置当前tab外观：颜色，字体，外框大小和颜色&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-selected-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:inherit 'tabbar-default&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:foreground &quot;DarkGreen&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:background &quot;LightGoldenrod&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:box '(:line-width 2 :color &quot;DarkGoldenrod&quot;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;\:overline &quot;black&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:underline &quot;black&quot;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:weight 'bold&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;;; 设置非当前tab外观：外框大小和颜色&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-face-attribute 'tabbar-unselected-face nil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:inherit 'tabbar-default&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;:box '(:line-width 2 :color &quot;#00B2BF&quot;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;我对其进行了一些修改，最终我的Tab看起来像这样&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑; font-size: 11pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt; &lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2012/08/1.png&quot;&gt;&lt;img class=&quot;alignnone  wp-image-416&quot; title=&quot;1&quot; src=&quot;assets/1.png&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>修改Emacs字体</title>
        <link href="http://liyouhai.com/emacs-vim/%25e4%25bf%25ae%25e6%2594%25b9emacs%25e5%25ad%2597%25e4%25bd%2593.html"/>
        <updated>2012-08-01T12:06:14+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/%e4%bf%ae%e6%94%b9emacs%e5%ad%97%e4%bd%93</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;修改Emacs字体为微软雅黑，方法如下：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;修改.emacs文件，添加如下几行:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;;(set-language-environment 'UTF-8)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;;(set-locale-environment &quot;UTF-8&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;(set-default-font &quot;Microsoft YaHei-12&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;(set-fontset-font &quot;fontset-default&quot; 'unicode '(&quot;Microsoft YaHei&quot; . &quot;unicode-ttf&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;第一第二行为修改Emacs的编码，这里不建议修改，修改后与Windows的交互操作都是乱码，比如shell。因为windows使用的是GBK的编码。后面两行是设置Emacs字体为雅黑字体。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;补充一点：在之前设置了&lt;/span&gt;.emacs&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，&lt;span style=&quot;font-size: 11pt;&quot;&gt;(setenv &quot;PATH&quot; &quot;E:/JTools/emacs-24.1/bin&quot;)这样的问题是当你在使用&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;shell&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;的时候，系统配置的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;是没有效果的。两种方法解决：一是将系统中配置的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;配置到这里，注意分隔符要是&lt;/span&gt;/&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，否则会转义。二就是不设置这里的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，而将其配置到系统中去&lt;/span&gt;&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;strong&gt;中文和英文使用不同的字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;找到了比较好看的字体&lt;/p&gt;
&lt;p&gt;Mac的Monaco字体(自行搜索下载)，不过此字体对中文支持不好，所以想中文使用雅黑，英文使用此字体。修改.emacs文件&lt;/p&gt;
&lt;p&gt;将上面的字体设置修改为&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-frame-font &quot;MONACO-12&quot;)&lt;/p&gt;
&lt;p&gt;(set-fontset-font &quot;fontset-default&quot; 'han '(&quot;Microsoft YaHei&quot; . &quot;unicode-bmp&quot;))&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2012/08/未命名图片.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-363&quot; title=&quot;未命名图片&quot; src=&quot;assets/&amp;#26410;&amp;#21629;&amp;#21517;&amp;#22270;&amp;#29255;.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;75&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;修改Emacs字体为微软雅黑，方法如下：&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;修改.emacs文件，添加如下几行:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;;(set-language-environment 'UTF-8)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;;(set-locale-environment &quot;UTF-8&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;(set-default-font &quot;Microsoft YaHei-12&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;(set-fontset-font &quot;fontset-default&quot; 'unicode '(&quot;Microsoft YaHei&quot; . &quot;unicode-ttf&quot;))&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;第一第二行为修改Emacs的编码，这里不建议修改，修改后与Windows的交互操作都是乱码，比如shell。因为windows使用的是GBK的编码。后面两行是设置Emacs字体为雅黑字体。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;补充一点：在之前设置了&lt;/span&gt;.emacs&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，&lt;span style=&quot;font-size: 11pt;&quot;&gt;(setenv &quot;PATH&quot; &quot;E:/JTools/emacs-24.1/bin&quot;)这样的问题是当你在使用&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;shell&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;的时候，系统配置的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;是没有效果的。两种方法解决：一是将系统中配置的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;配置到这里，注意分隔符要是&lt;/span&gt;/&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，否则会转义。二就是不设置这里的&lt;/span&gt;path&lt;span style=&quot;font-family: 微软雅黑;&quot;&gt;，而将其配置到系统中去&lt;/span&gt;&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;strong&gt;中文和英文使用不同的字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;找到了比较好看的字体&lt;/p&gt;
&lt;p&gt;Mac的Monaco字体(自行搜索下载)，不过此字体对中文支持不好，所以想中文使用雅黑，英文使用此字体。修改.emacs文件&lt;/p&gt;
&lt;p&gt;将上面的字体设置修改为&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(set-frame-font &quot;MONACO-12&quot;)&lt;/p&gt;
&lt;p&gt;(set-fontset-font &quot;fontset-default&quot; 'han '(&quot;Microsoft YaHei&quot; . &quot;unicode-bmp&quot;))&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2012/08/未命名图片.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-363&quot; title=&quot;未命名图片&quot; src=&quot;assets/&amp;#26410;&amp;#21629;&amp;#21517;&amp;#22270;&amp;#29255;.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;75&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Emacs Theme</title>
        <link href="http://liyouhai.com/emacs-vim/emacs-theme-2.html"/>
        <updated>2012-07-31T13:19:03+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/emacs-theme-2</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;针对Emacs24.1&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;一. 使用已有的Theme&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;M+x customize-themes   选择想要的主题即可&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;二. 安装新主题&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;以安装Solarized主题为例&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;http://ethanschoonover.com/solarized&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下载Emacs主题，包含如下内容&lt;br /&gt; &lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;assets/073112_1318_EmacsTheme1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
				&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;将此目录放置到HOME目录下，我放的位置为~/themes/solarized&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;将其中的solarized-dark-theme.el和solarized-light-theme.el拷贝到Emacs目录下的etc/themes下。&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改.emacs文件，添加(add-to-list 'load-path (expand-file-name &quot;~/themes/solarized&quot;))将主题添加到load-path下&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;如此即完成了主题的安装。你可以如上方式来使用新主题。也可以在.emacs中添加&lt;br /&gt;(load-theme 'solarized-light t)来使用新主题&lt;br /&gt; &lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;img src=&quot;assets/073112_1318_EmacsTheme2.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
				&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;三. 快速切换Theme&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;M+x    load-theme     输入想要切换的主题即可&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;关闭Emacs即失效&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;例如:M+x load-theme 回车 tango-dark&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/073112_1318_EmacsTheme3.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;针对Emacs24.1&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;一. 使用已有的Theme&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;M+x customize-themes   选择想要的主题即可&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;二. 安装新主题&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;以安装Solarized主题为例&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;http://ethanschoonover.com/solarized&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;下载Emacs主题，包含如下内容&lt;br /&gt; &lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;assets/073112_1318_EmacsTheme1.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体&quot;&gt;&lt;br /&gt;
				&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;将此目录放置到HOME目录下，我放的位置为~/themes/solarized&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;将其中的solarized-dark-theme.el和solarized-light-theme.el拷贝到Emacs目录下的etc/themes下。&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;修改.emacs文件，添加(add-to-list 'load-path (expand-file-name &quot;~/themes/solarized&quot;))将主题添加到load-path下&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;如此即完成了主题的安装。你可以如上方式来使用新主题。也可以在.emacs中添加&lt;br /&gt;(load-theme 'solarized-light t)来使用新主题&lt;br /&gt; &lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;img src=&quot;assets/073112_1318_EmacsTheme2.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;&lt;br /&gt;
				&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; &lt;br /&gt;
 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;三. 快速切换Theme&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;M+x    load-theme     输入想要切换的主题即可&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑&quot;&gt;关闭Emacs即失效&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:微软雅黑; font-size:11pt&quot;&gt;例如:M+x load-theme 回车 tango-dark&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/073112_1318_EmacsTheme3.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-family:宋体; font-size:12pt&quot;&gt;&lt;br /&gt;
		&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Win7安装Emacs</title>
        <link href="http://liyouhai.com/emacs-vim/win7%25e5%25ae%2589%25e8%25a3%2585emacs.html"/>
        <updated>2012-07-30T13:14:46+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/win7%e5%ae%89%e8%a3%85emacs</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Emacs for Windows下载地址:&lt;a href=&quot;http://ftp.gnu.org/gnu/emacs/windows/&quot;&gt;http://ftp.gnu.org/gnu/emacs/windows/&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;解压，运行bin目录中的runemacs.exe就可以运行了。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/073012_1314_Win7Emacs1.png&quot; alt=&quot;&quot; width=&quot;400px&quot; height=&quot;450px&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;设置Emacs的HOME。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在Emacs中按Ctrl+x Ctrl+f，输入 ~ 回车。会显示当前的HOME路径。&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在HOME路径下新建一个.emacs文件，编写如下内容:&lt;br /&gt;
(load-file &quot;D:/My DBank/emacs-24.1/home/.emacs&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在此路径下编写你自己的.emacs。前面两行需要设置你的HOME和PATH&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(setenv &quot;HOME&quot; &quot;D:/My DBank/emacs-24.1/home&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(setenv &quot;PATH&quot; &quot;D:/My DBank/emacs-24.1/bin&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Emacs for Windows下载地址:&lt;a href=&quot;http://ftp.gnu.org/gnu/emacs/windows/&quot;&gt;http://ftp.gnu.org/gnu/emacs/windows/&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;解压，运行bin目录中的runemacs.exe就可以运行了。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/073012_1314_Win7Emacs1.png&quot; alt=&quot;&quot; width=&quot;400px&quot; height=&quot;450px&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;设置Emacs的HOME。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在Emacs中按Ctrl+x Ctrl+f，输入 ~ 回车。会显示当前的HOME路径。&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在HOME路径下新建一个.emacs文件，编写如下内容:&lt;br /&gt;
(load-file &quot;D:/My DBank/emacs-24.1/home/.emacs&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在此路径下编写你自己的.emacs。前面两行需要设置你的HOME和PATH&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(setenv &quot;HOME&quot; &quot;D:/My DBank/emacs-24.1/home&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(setenv &quot;PATH&quot; &quot;D:/My DBank/emacs-24.1/bin&quot;)&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
    </entry>
    
    <entry>
        <title>使用Nexus建立私有仓库</title>
        <link href="http://liyouhai.com/maven/%25e4%25bd%25bf%25e7%2594%25a8nexus%25e5%25bb%25ba%25e7%25ab%258b%25e7%25a7%2581%25e6%259c%2589%25e4%25bb%2593%25e5%25ba%2593.html"/>
        <updated>2012-06-03T07:55:23+08:00</updated>
        <id>http://liyouhai.com//maven/%e4%bd%bf%e7%94%a8nexus%e5%bb%ba%e7%ab%8b%e7%a7%81%e6%9c%89%e4%bb%93%e5%ba%93</id>
        <content type="html">&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Maven的一个致命问题是国内访问它的jar仓库实在太慢了。不得不找镜像，但是目前没找到哪个镜像能很好的同步中心仓库，所以决定使用Nexus建立个人的jar仓库。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;strong&gt;一. 软件准备&lt;/strong&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Nexus:&lt;a href=&quot;http://www.sonatype.org/nexus/&quot;&gt;http://www.sonatype.org/nexus/&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Maven3:&lt;a href=&quot;http://maven.apache.org/&quot;&gt;http://maven.apache.org/&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;strong&gt;二. 软件安装&lt;/strong&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;br /&gt;
&lt;strong&gt;Maven的安装&lt;/strong&gt;：Maven安装很简单，只需要将下载下来的包解压后，设置M2_HOME环境变量即可。例如我的 maven解压在E:\JTools\apache-maven-3.0.4，则设置M2_HOME环境变量为E:\JTools\apache-maven-3.0.4 。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在path变量中添加其属性,%M2_HOME%\bin即可。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 打开命令行，输入mvn -version 可得到如下画面&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus1.png&quot; alt=&quot;&quot; width=&quot;352&quot; height=&quot;88&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: red; font-size: 10pt;&quot;&gt;注意：个人发现win7下的powershell使用maven有问题，不建议使用&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;&lt;strong&gt; Nexus的安装：&lt;/strong&gt;解压缩后有两个文件夹&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus2.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;进入nexus-2.0.4-1/bin/jsw下，你会看到很多目录。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus3.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;看名字应该能猜到是干吗的吧？进入你系统对应的目录，我是win7 64位，则进入windows-x86-64目录下，运行install-nexus.bat安装nexus，然后运行nexus.bat start即可启动nexus服务了。然后访问&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8081/nexus&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 9pt; background-color: white;&quot;&gt;http://localhost:8081/nexus&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 即可看到nexus页面了。默认的login用户名和密码分别是admin和admin123。个人使用就不改用户名和密码了。&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;&lt;strong&gt;三. 建立私有仓库&lt;/strong&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; nexus分为proxy仓库和host仓库。proxy仓库顾名思义就是对外网仓库的代理，而host仓库则是个人内部使用的仓库。创建方式类似。以创建host仓库为例:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus4.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;填写相应内容，点击save即可&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus5.png&quot; alt=&quot;&quot; width=&quot;417&quot; height=&quot;244&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;列表中多出了一个仓库列表&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus6.png&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;19&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;strong&gt;四. 配置maven使用nexus仓库&lt;/strong&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 修改 maven中的setting.xml文件，在&amp;lt;mirrors&amp;gt;标签内添加如下内容:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;mirror&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/groups/public&amp;lt;/url&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/mirror&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 此内容，将对中心仓库的访问映射到本地nexus上，如果本地nexus中没有jar，nexus则到中心仓库中下载到本地&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 接着配置添加的host仓库。在&amp;lt;settings&amp;gt;标签内添加如下内容:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;profile&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;ivan&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;!--Enable snapshots for the built in central repo to direct --&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;!--all requests to nexus via the mirror --&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;repositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;repository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;ivan&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/repositories/ivan_repo/&amp;lt;/url&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/repository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/repositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;pluginRepositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;pluginRepository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;ivan&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/repositories/ivan_repo/&amp;lt;/url&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/pluginRepository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/pluginRepositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/profile&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/profiles&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;activeProfiles&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;!--make the profile active all the time --&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;activeProfile&amp;gt;ivan&amp;lt;/activeProfile&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/activeProfiles&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;即可&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Maven的一个致命问题是国内访问它的jar仓库实在太慢了。不得不找镜像，但是目前没找到哪个镜像能很好的同步中心仓库，所以决定使用Nexus建立个人的jar仓库。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;strong&gt;一. 软件准备&lt;/strong&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Nexus:&lt;a href=&quot;http://www.sonatype.org/nexus/&quot;&gt;http://www.sonatype.org/nexus/&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; Maven3:&lt;a href=&quot;http://maven.apache.org/&quot;&gt;http://maven.apache.org/&lt;/a&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;strong&gt;二. 软件安装&lt;/strong&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;br /&gt;
&lt;strong&gt;Maven的安装&lt;/strong&gt;：Maven安装很简单，只需要将下载下来的包解压后，设置M2_HOME环境变量即可。例如我的 maven解压在E:\JTools\apache-maven-3.0.4，则设置M2_HOME环境变量为E:\JTools\apache-maven-3.0.4 。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;在path变量中添加其属性,%M2_HOME%\bin即可。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 打开命令行，输入mvn -version 可得到如下画面&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus1.png&quot; alt=&quot;&quot; width=&quot;352&quot; height=&quot;88&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: red; font-size: 10pt;&quot;&gt;注意：个人发现win7下的powershell使用maven有问题，不建议使用&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;&lt;strong&gt; Nexus的安装：&lt;/strong&gt;解压缩后有两个文件夹&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus2.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;进入nexus-2.0.4-1/bin/jsw下，你会看到很多目录。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus3.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;看名字应该能猜到是干吗的吧？进入你系统对应的目录，我是win7 64位，则进入windows-x86-64目录下，运行install-nexus.bat安装nexus，然后运行nexus.bat start即可启动nexus服务了。然后访问&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8081/nexus&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 9pt; background-color: white;&quot;&gt;http://localhost:8081/nexus&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 即可看到nexus页面了。默认的login用户名和密码分别是admin和admin123。个人使用就不改用户名和密码了。&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;&lt;strong&gt;三. 建立私有仓库&lt;/strong&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; nexus分为proxy仓库和host仓库。proxy仓库顾名思义就是对外网仓库的代理，而host仓库则是个人内部使用的仓库。创建方式类似。以创建host仓库为例:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus4.png&quot; alt=&quot;&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;填写相应内容，点击save即可&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus5.png&quot; alt=&quot;&quot; width=&quot;417&quot; height=&quot;244&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;列表中多出了一个仓库列表&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;assets/060312_0755_Nexus6.png&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;19&quot; /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;strong&gt;四. 配置maven使用nexus仓库&lt;/strong&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 修改 maven中的setting.xml文件，在&amp;lt;mirrors&amp;gt;标签内添加如下内容:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;mirror&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/groups/public&amp;lt;/url&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/mirror&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 此内容，将对中心仓库的访问映射到本地nexus上，如果本地nexus中没有jar，nexus则到中心仓库中下载到本地&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; 接着配置添加的host仓库。在&amp;lt;settings&amp;gt;标签内添加如下内容:&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;profile&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;ivan&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;!--Enable snapshots for the built in central repo to direct --&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;!--all requests to nexus via the mirror --&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;repositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;repository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;ivan&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/repositories/ivan_repo/&amp;lt;/url&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/repository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/repositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;pluginRepositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;pluginRepository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;id&amp;gt;ivan&amp;lt;/id&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;url&amp;gt;http://localhost:8081/nexus/content/repositories/ivan_repo/&amp;lt;/url&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/releases&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/snapshots&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/pluginRepository&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/pluginRepositories&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/profile&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/profiles&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;activeProfiles&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;!--make the profile active all the time --&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;activeProfile&amp;gt;ivan&amp;lt;/activeProfile&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &amp;lt;/activeProfiles&amp;gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;即可&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>什么时候中国会议能这样开</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e4%25bb%2580%25e4%25b9%2588%25e6%2597%25b6%25e5%2580%2599%25e4%25b8%25ad%25e5%259b%25bd%25e4%25bc%259a%25e8%25ae%25ae%25e8%2583%25bd%25e8%25bf%2599%25e6%25a0%25b7%25e5%25bc%2580.html"/>
        <updated>2012-05-01T14:31:04+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e4%b8%ad%e5%9b%bd%e4%bc%9a%e8%ae%ae%e8%83%bd%e8%bf%99%e6%a0%b7%e5%bc%80</id>
        <content type="html">&lt;div&gt;&lt;object id=&quot;ssss&quot; width=&quot;480&quot; height=&quot;370&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;embed pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=76055561_2036021381_bEyySyU9CWHK+l1lHz2stqkP7KQNt6nniWmyu1ClJgZYQ0/XM5GeZN0C5SzQAdkEqDhAQ54/cPsj0Rw/s.swf&quot; type=&quot;application/x-shockwave-flash&quot; name=&quot;ssss&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;480&quot; height=&quot;370&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
</content>
        <summary type="html">&lt;div&gt;&lt;object id=&quot;ssss&quot; width=&quot;480&quot; height=&quot;370&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;embed pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=76055561_2036021381_bEyySyU9CWHK+l1lHz2stqkP7KQNt6nniWmyu1ClJgZYQ0/XM5GeZN0C5SzQAdkEqDhAQ54/cPsj0Rw/s.swf&quot; type=&quot;application/x-shockwave-flash&quot; name=&quot;ssss&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;480&quot; height=&quot;370&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>泰坦尼克背后的100个细节</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e6%25b3%25b0%25e5%259d%25a6%25e5%25b0%25bc%25e5%2585%258b%25e8%2583%258c%25e5%2590%258e%25e7%259a%2584100%25e4%25b8%25aa%25e7%25bb%2586%25e8%258a%2582.html"/>
        <updated>2012-04-22T07:56:11+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e6%b3%b0%e5%9d%a6%e5%b0%bc%e5%85%8b%e8%83%8c%e5%90%8e%e7%9a%84100%e4%b8%aa%e7%bb%86%e8%8a%82</id>
        <content type="html">&lt;p&gt;1 泰坦尼克号航行过程中，一位船员对二等舱女乘客西尔维亚·考德威尔说：“就是上帝亲自来，他也弄不沉这艘船。”&lt;/p&gt;
&lt;p&gt;2 泰坦尼克号头等舱票价4350美元，二等舱票价1750美元，三等舱30美元。&lt;/p&gt;
&lt;p&gt;3 一位名叫阿道夫·萨阿弗尔德的头等舱乘客在遇难前5天给妻子写了一封长达3页的书信。这封信以头等舱乘客的视角，对船上的生活进行了深入而详尽的描写，包括每天在船上的食物、客舱的大小以及装潢状况等。&lt;/p&gt;
&lt;p&gt;4 4月14日晚10时55分，加州人号在泰坦尼克号以北的冰场前抛锚过夜，并向附近的所有航行船只发出警报。当无线电讯号抵达泰坦尼克号时，冰山警报却被中断并被回应：“勿搔扰！住口吧！你已经干扰我的讯号了！我正向瑞斯角发电报！”&lt;/p&gt;
&lt;p&gt;5 由于船员忘记带上望远镜，瞭望员不得不用肉眼观测海面情况。4月14日11点40分，瞭望员弗雷德里克·弗利特发现远处有“两张桌子大小”的一块黑影，并以很快的速度变大。他敲了三下驾驶台的警钟，并抓起电话：“正前方有冰山！”&lt;/p&gt;
&lt;p&gt;6 接到电话的六副穆迪通知了旁边的大副默多克，他立即向舵手惊呼“右满舵”，命令机房关闭引擎向后驶，并把吃水线的水闸关上。舵手全速转动船舵，数秒之后，泰坦尼克号向左舷改变方向，但冰山已正面撞向右舷弓并沿船侧擦身而过。&lt;/p&gt;
&lt;p&gt;7 头等舱和二等舱一些睡得不熟的乘客被轻微的金属刮擦声惊醒，有人以为遇上了大浪，有人以为触礁了，还有人以为螺旋桨发生了故障。下面船舱的乘客感觉到的震动剧烈得多。有的乘客看到了舷窗外擦身而过的乳白色冰山，有些擦掉的冰块掉到了船舱里。船身开始进水。&lt;/p&gt;
&lt;p&gt;8 得知船已撞击冰山，史密斯船长和哈兰·沃尔夫公司的首席造船师托马斯·安德鲁一起检查受损情况。检查过所有水密舱之后，安德鲁对史密斯船长说：“这艘船没救了。”&lt;/p&gt;
&lt;p&gt;9 1908年，国际通用的遇难信号刚从CQD改为SOS。泰坦尼克号的无线电首席官员约翰·乔治·菲利普自船撞击冰山后一直在发送CQD遇难信号，直到下级无线电操作员哈罗德·布莱德建议：“发送SOS吧，这是新的呼叫信号，这也可能是你最后的机会来发送它了！”&lt;/p&gt;
&lt;p&gt;10 在船的左舷，救生艇只载妇女和儿童；在右舷，则在妇女优先逃生之后允许男性登艇。&lt;/p&gt;
&lt;p&gt;11 救生艇边的工作乱七八糟，尽管妇女和儿童（头等舱和二等舱的妇女儿童）先登上救生艇的美德得到了遵守，但很多救生艇在半空的状态下就被放了下去。当时的航海界都认为如果救生艇满载人员放下去，会造成损坏甚至倾覆。泰坦尼克号的救生艇设计得很结实，但是船员们不知道这一点。结果可以搭载1178人的救生艇，只上去651人（还有一些人是跳海之后被救上救生艇）。&lt;/p&gt;
&lt;p&gt;12 为头等舱乘客服务的8人乐队在指挥华莱士·哈特利的带领下，站在救生艇入口的阶梯附近为撤离泰坦尼克号的乘客继续演奏轻快的爵士乐和庄严的圣歌《上帝与我们同在》，以安抚这些绝望的人们，直到最后一刻。&lt;/p&gt;
&lt;p&gt;13 面对死亡，世界著名管道大亨本杰明·古根海姆穿上了最华丽的晚礼服，说：“我要死得体面，像一个绅士。”他给太太留下纸条：“这条船不会有任何一个女性因为我抢占了救生艇的位置而留在甲板上。我不会死得像一个畜生，会像一个真正的男子汉。”&lt;/p&gt;
&lt;p&gt;14 亿万富翁约翰·雅各布·阿斯德询问负责救生艇的船员可否陪同正怀着身孕的妻子马德琳上艇，船员说了一句“妇孺先上”之后，他就像一个真正的绅士一样，回到甲板，安静地坐在那里，直到轮船沉没，倒下的大烟囱把他砸进大西洋中。&lt;/p&gt;
&lt;p&gt;15 美国银行家华盛顿·道奇的妻子鲁丝进餐时无意中将菜单放进了手提包。失事后，鲁丝与儿子乘坐救生艇离开并获救，这张放在鲁丝手提包中的“最后的午餐”菜单得以留存至今。菜单上列出了泰坦尼克号为头等舱乘客提供的奢华午餐菜品。&lt;/p&gt;
&lt;p&gt;16 幸存者、船上理发师奥古斯特·韦科曼回忆，当时他和阿斯德先生在甲板上呆了一会儿，聊着只有在理发椅上才谈的小事情。临别时，韦科曼问阿斯德：“你介不介意我和你握个手？”阿斯德说：“我很高兴。”&lt;/p&gt;
&lt;p&gt;17 美国梅西百货公司创始人斯特劳斯和夫人当时也在船上。当有人向67岁的斯特劳斯先生提出，“我保证不会有人反对像您这样的老先生上小艇……”斯特劳斯坚定地回答：“我绝不会在别的男人之前上救生艇。”&lt;/p&gt;
&lt;p&gt;18 63岁的斯特劳斯夫人刚上8号救生艇，又马上改变主意，回来和斯特劳斯先生待在一起。“这么多年来我们都生活在一起，你要去的地方，我也去！”她把自己在艇里的位置给了一个年轻的女佣，并把自己的皮毛大衣甩给她，说：“我再也用不着它了！”&lt;/p&gt;
&lt;p&gt;19 白星公司主席布鲁斯·伊斯梅抛下他的乘客、他的船员、他的船，在最后一刻跳进救生艇。&lt;/p&gt;
&lt;p&gt;20 造船师托马斯·安德鲁在泰坦尼克号即将沉没时毫无逃生的意念。他在最后时刻，还痛悔地对一个女服务员说“孩子，我没有给你造一条不会沉没的船。”&lt;/p&gt;
&lt;p&gt;21 4月15日凌晨2时17分，此时离泰坦尼克号被撞击已经过去了两个半小时，史密斯船长对船员说：“现在大家要靠自己了。”之后步往舰桥，等候与泰坦尼克号同归于尽。&lt;/p&gt;
&lt;p&gt;22 4月15日凌晨2时20分，泰坦尼克号船尾部分在水面悬浮了一会，便缓缓地消失。泰坦尼克号上2208名船员和旅客中，只有705人生还。&lt;/p&gt;
&lt;p&gt;23 泰坦尼克号的沉没引起了人们对海上安全问题的关注。1913年11月12日，第一届海上生命安全国际大会在伦敦召开。大会通过了关于救生艇、无线电通讯、航行安全训练等数项提议，并讨论了冰山检测问题。&lt;/p&gt;
&lt;p&gt;24 1914年1月30日，在第一届海上生命安全国际大会上，国际冰山检测组织正式成立，直到今天它还在检测和报告大西洋与太平洋上可能威胁航船的冰山。&lt;/p&gt;
&lt;p&gt;25 当时国际通用的海事安全规则是，救生艇的搭载人数是船上总人数的三分之一，而泰坦尼克号的救生艇可以搭载一半乘客，白星公司为这种“对乘客安全高度负责”的额外配置没有引起公众注意而感到不平。但是，泰坦尼克号的沉没永久改变了这种救生策略：新的规则要求，救生艇必须能容纳船上的所有人员。&lt;/p&gt;
&lt;p&gt;26 泰坦尼克号遇难时发出的求救信号第二天早上才被其他船只收到，因为那些船没有24小时监听无线电。1914年，《国际海上生命安全公约》规定，轮船必须配备无线电设备并24小时开机值守。&lt;/p&gt;
&lt;p&gt;27 泰坦尼克号的第一艘姐妹船奥林匹克号在它“姐姐”沉没后，立即被召回船厂改装。它的防水隔墙被升高到船体的最上一层甲板，救生艇甲板两侧还装满了救生艇。&lt;/p&gt;
&lt;p&gt;28 泰坦尼克号的第二艘姐妹船本来叫作“巨人”号（RMS Gigantic）。由于Gigantic和Titanic在英语中都有“巨大的、非凡的”的意思，泰坦尼克号失事后，白星公司把船名换成了“不列颠尼克”号，不想让新船与那场灾难有任何联系。&lt;/p&gt;
&lt;p&gt;29 沉没事故之后，泰坦尼克号成了灾难的代名词。金融危机时，有评论形容美元的大幅贬值会使美国经济“像泰坦尼克号一样沉没”；欧洲债务危机时，雅典《每日新闻》头条以“他们在泰坦尼克号上打牌”为题，批评希腊政客为各自私利争吵。&lt;/p&gt;
&lt;p&gt;30 泰坦尼克号沉没后，许多海底打捞公司瞄准这一机遇，疯狂打捞一切能找到的遗存物，并在黑市上高价出售。美国已制定一项保护法案，目前泰坦尼克号的打捞权只属于RMS泰坦尼克公司所有。&lt;/p&gt;
&lt;p&gt;31 泰坦尼克号上一件LV硬型皮箱从海底打捞上岸后，竟然没有渗进海水，箱子里的照片、信件等都完好无损。从此，LV因其高质量而迅速走红。&lt;/p&gt;
&lt;p&gt;32 1985年，美国著名海洋学家罗伯特·巴拉德发现了泰坦尼克号的残骸。他对散落在残骸周围的无数双鞋子印象深刻，“妈妈的鞋，女儿的鞋，男人的鞋，船员的鞋，像一座座墓碑。”之后，美国的深海探险公司组织了多次潜水，带领人们观看泰坦尼克号残骸，费用高达5。9万美元。&lt;/p&gt;
&lt;p&gt;33 泰坦尼克号撞上冰山时分离出的船体碎片以及救生艇吊艇架等去年4月21日在美国达拉斯被拍卖，所得部分金额用于慈善事业。&lt;/p&gt;
&lt;p&gt;34 来自泰坦尼克号沉船遗址的5900件打捞物于今年4月11日在美国被拍卖，“成批出售”。这批物品估价1。89亿美元。赢家将负担起对泰坦尼克号遗存物的“如同管家般细致”的维护工作，并需要“在任何需要的时间，无条件将一部分遗存物展示给大众”。&lt;/p&gt;
&lt;p&gt;35 一本1912年6月出版的中国小学教科书《新国文》，其中课文《铁达尼邮船遇险记》介绍了这场震惊世界的海难，还绘制了船撞冰山沉没的插图。这本教科书的出版仅在泰坦尼克号事件发生两个月之后，是辛亥革命后出版的第一批教科书。&lt;/p&gt;
&lt;p&gt;36 英国贝尔法斯特市为纪念泰坦尼克号起航100周年，耗资1亿英镑修建了泰坦尼克旅游中心。在这里，游客可以参观泰坦尼克号造船厂的模拟场景，借助计算机生成的画面参观完工后的泰坦尼克号，并体验模拟的沉船场景。&lt;/p&gt;
&lt;p&gt;37 电影《泰坦尼克号》大获成功后，片中露丝佩戴的项链“海洋之心”获得人们的青睐，尤其是女性。“海洋之心”的原型是产自非洲的坦桑石。3D版《泰坦尼克号》即将上映时，“海洋之心”再次走俏热卖。&lt;/p&gt;
&lt;p&gt;38 加拿大皇家铸币厂将发行一款纪念银币，以纪念泰坦尼克号沉没100周年。银币的正面图案是泰坦尼克号正向冰山冲去，船舶与冰山之间标有具体沉没在北大西洋的经度和纬度。英国皇家铸币局则制作了两枚硬币以纪念这一灾难。&lt;/p&gt;
&lt;p&gt;39 在对泰坦尼克号的的研究中，昆士兰理工大学行为经济学家大卫·萨维奇发现，很多英国乘客为了保持绅士风度，排队等候救生艇，结果失去最后的机会而葬身大海。他总结，爱德华七世时代是社会上推崇绅士风度的巅峰时代。即使在最后关头，史密斯船长还大声提醒英国男人：“男人们，别忘了我们是英国人！”&lt;/p&gt;
&lt;p&gt;40 泰坦尼克号充分运用了第二次科技革命的成果，这艘“永不沉没的轮船”也是人类的美好愿景达到顶峰的产物，反映了人类征服世界的超强信心。她的沉没警告人们不可对自然失去敬畏之心。&lt;/p&gt;
&lt;p&gt;41 泰坦尼克号共耗资7500万英镑，吨位46328吨，长882。9英尺，宽92。5英尺，从龙骨到4个大烟囱的顶端有175英尺，高度相当于11层楼。动力方面，25台双端及4台单端锅炉，两台往复式四缸三胀倒缸蒸汽机及一台低压蒸汽轮机，59000匹马力，排水量达到了规模空前的66000吨。&lt;/p&gt;
&lt;p&gt;42 泰坦尼克号被认为是航海技术史上的一个里程碑，《造船专家》杂志认为其“根本不可能沉没”。全船分为16个水密舱，连接各舱的水密门可通过电开关统一关闭。泰坦尼克号良好的防水措施，使得它在任何4个水密舱进水的情况下都不会沉没。但实际上，防水壁并没有穿过整个甲板，仅仅达到了E层。&lt;/p&gt;
&lt;p&gt;43 出事后，很多大西洋上的船只都收到求救电报，都在加速向出事地点赶来。但18海里外的加利福尼亚人号的收发报员关掉电报机睡觉去了–1913年12月12日，伦敦召开了第一届海上生命安全国际大会，达成规定，无线电通讯应该24小时开通，加上一个2级备用电源，这样就不会漏掉呼救信号。&lt;/p&gt;
&lt;p&gt;44 沉没原因最流行的说法是冰山撞上船头后大量进水，船体“头重脚轻”，船尾翘起，船身最终裂成两半。2006年，美国探险家发现残骸底部切口非常整齐，不可能是断裂形成，而应是由一种特殊的外来压力造成的。换句话说是因为冰山撞中了船身，而非船头；巨大的冲击力使轮船裂成两半，沉入水底。&lt;/p&gt;
&lt;p&gt;45 泰坦尼克号的沉船形式有很多说法。包括全船沉没；船身近第二及第三支烟囱中间折开，然后各自垂直沉没；船身近第三及第四支烟囱中间折开，然后前船身部分拖着船尾，船尾垂直下沉。残骸最初被找到时，是前两支烟囱的船头部分，以及第四支烟囱之后的船尾部分，初步证明了第三个理论，詹姆斯·卡梅隆拍摄《泰坦尼克》时，采用了这个理论。当时普遍认为，第三支烟囱的船身部分已经被炸毁成碎片。但在2005年8月，由History Channel赞助的考古队在船尾残骸后500米找到船身部分，残骸约12米乘27米。部分科学家相信，泰坦尼克号是折开3截后沉没。&lt;/p&gt;
&lt;p&gt;46 事故原因猜想之一：航速太快，根本没有时间避开冰山。&lt;/p&gt;
&lt;p&gt;47 事故原因猜想之二：船员们判断失误，转错了方向舵，从而导致“泰坦尼克号”不幸撞上冰山。一种说法认为，若泰坦尼克号不转向而是笔直前进的话，就会搁浅在冰山上，因为冰山只有一小部分露出海面，船上的人都可以转移到冰山上等候救援。&lt;/p&gt;
&lt;p&gt;48 事故原因猜想之三：铆钉问题。冶金专家提姆·费克于1998年将那些由残骸中取得的船身样本进行检验后表示，钢铁品质并没有问题，即使在低温下亦没有异常脆弱。最致命的关键，就是那些用以接合船身的铆钉，由于泰坦尼克号船头部分空间狭小，不能像其他部分那样可以用重型机器来安装钢铁铆钉，所以需要以人手来安装锻铁铆钉，但坚固程度不及钢铁铆钉，所以就加入矿渣来强化，但过量的矿渣使铆钉变得脆弱。从泰坦尼克号残骸取出的几根铆钉，经检验后发现有高含量的矿渣，后来一家铸铁厂制成一批矿渣含量相近的铆钉，经试验后证实它们于不足1万磅的压力下断裂，换句话说矿渣含量超标的铆钉不能承受强力的撞击，它们遭受破坏之后，船身接合位就出现裂缝，使海水涌入船舱。&lt;/p&gt;
&lt;p&gt;49 事故原因猜想之四：视觉偏差。英国历史学家蒂姆·马尔汀认为，事发当晚出事地点附近海域的大气状况为超折射的发生提供了必要的条件。这种特殊的光线弯曲现象导致了幻象的产生，并且他发现海上附近区域的几艘船只都记录到了这一现象。他说这个现象妨碍了泰坦尼克号的瞭望员的视线，让他没能及时看到冰山，也妨碍了加利福尼亚号货船对泰坦尼克号的确认及两船之间通信。&lt;/p&gt;
&lt;p&gt;50 事故原因猜想之五：月亮惹的祸。1912年1月4日，月球距地球“近地点”距离是1400年以来最近的，这种罕见的“近距离”导致月球对海洋潮汐的引力影响比平时至少增强了74%，美国得克萨斯州大学的科学家们相信，这一罕见的天文现象导致海洋潮汐异常升高，正是不断起伏的强大海洋潮汐导致撞上泰坦尼克号的那座冰山在1912年 1月4日那天脱离它所在的格陵兰岛冰川，漂向北大西洋，并最终导致了“泰坦尼克号”的悲剧。&lt;/p&gt;
&lt;p&gt;51 纪录片《撞沉泰坦尼克号的冰山》则认为，“肇事冰山”形成于1。5万年前，于1909年从极地冰川上脱落，1912年漂流到大西洋的航线上。当它与泰坦尼克号相撞后，也迎来了自己的噩运。两周后，这座冰山就漂向更温暖的海域，渐渐融化掉。&lt;/p&gt;
&lt;p&gt;52 1985年，美国著名海洋探险家罗伯特·巴拉德和他的两位同事乘坐阿尔文号潜水器，在纽芬兰东南约380英里海域发现了沉睡多年的“泰坦尼克”号残骸。&lt;/p&gt;
&lt;p&gt;53 1994年夏天，法国海洋开发研究所的“鹦鹉螺”号潜水器到沉船地点考察，发现乘务员室的保险柜不见了，邮轮的右舷并没有裂缝，裂缝是在船底，轮机舱也没有发生爆炸。&lt;/p&gt;
&lt;p&gt;54 当今世界上接触泰坦尼克号最多的是一位名叫保罗·亨利·纳尔若莱的法国人。在过去25年中，这位66岁的深海潜水员曾造访遗址三十多次，最近一次2010年，他带领团队，利用声纳以及机械控制的水下拍摄车拍摄了13万张照片，首次绘制出这片3英里宽、5英里长的残骸区全景图。&lt;/p&gt;
&lt;p&gt;55 根据这张全景图，一名探险家表示，泰坦尼克号撞上冰山后，并不是直接下沉的，而是螺旋式下降，沉入海底。&lt;/p&gt;
&lt;p&gt;56 世界上只有5艘潜艇–采用高科技金属打造–能够经受住泰坦尼克号残骸所在深度的巨大压力。&lt;/p&gt;
&lt;p&gt;57 打捞泰坦尼克号一直备受争议，反对者包括发现沉船的巴拉德。巴拉德认为，世人不应打破泰坦尼克号的宁静，而应让它作为死于这场灾难的1500多名乘客和船员的“神圣墓地”；支持者则认为，“难道我们让它自然分解？或者，我们尽力保存这些遗产，从海底打捞部分文物？”&lt;/p&gt;
&lt;p&gt;58 沉船被发现后，RMS泰坦尼克公司先后6次下海打捞，打捞的文物共计5900件。还有未知数量的文物可能已被非法打捞。该公司遗址惟一合法的管理及监护机构，它是第一家提出认领该遗址的公司。它赠与法官一件泰坦尼克号文物，就搞定了其他所有的认领申请。&lt;/p&gt;
&lt;p&gt;59 由于遭受海底生物的腐蚀、强大的洋流冲击，乃至人类自身的过失，这艘沉船的5万吨铸铁正在慢慢分解。科学家们认为，要保存残骸已经不可能，15到20年之内，泰坦尼克残骸将成为大西洋底的一块锈斑。看来，泰坦尼克号只能保存在影像当中了。&lt;/p&gt;
&lt;p&gt;60 摩根·罗伯森，海员出身，纪实作家。1898年发表了名为《徒劳无功》的航海题材小说，情节与泰坦尼克号事件几乎一模一样。船难之后，罗伯森收到数以百计的来自孤儿寡母的哭诉信，指责他小说中的恶毒诅咒才使得他们的亲人遭此灾难。未久罗伯森离奇自杀。&lt;/p&gt;
&lt;p&gt;61 1938年，德国作者Robert Prechtl出版了《泰坦尼克号》一书，这是第一本记叙泰坦尼克事件的小说，书中虚构与纪实交织，开创了此后此类书籍的范例。&lt;/p&gt;
&lt;p&gt;62 1955年，Walter Lord的《冰海沉船》一书出版。不同于其他厚重刻板地历史纪录书，其鲜活的文风创造了此类书籍的一个模式。这本书被认为是数百本写泰坦尼克号书籍中最好的一本。&lt;/p&gt;
&lt;p&gt;63 1976年，小说《泰坦尼克重见天日》出版，并于1980年改编成一部昂贵的好莱坞电影。本片成本高达4000万美元，其中仅是特效经费就足够当年建造一艘泰坦尼克号了。&lt;/p&gt;
&lt;p&gt;64 迄今为止有8部关于泰坦尼克灾难的英语电影剧情片（不包括电视电影）：4部美国，2部英国，2部德国，产自1912年至1997年间。&lt;/p&gt;
&lt;p&gt;65 第一部关于泰坦尼克灾难的剧情片《泰坦尼克号脱险》，仅仅在事故29日后就上映了。其演员兼联合剧作者桃乐茜·吉布森，正是生还乘客，这部影片很大程度上根据其经历改编而成。&lt;/p&gt;
&lt;p&gt;66 在二战中，泰坦尼克号还沦为纳粹德国打击英国人的法宝。当年，戈培尔认定，这艘“上帝也沉不了”的轮船，是“日不落帝国”绝妙的象征。于是下令拍摄德国版《泰坦尼克号》。影片讲述英国船主伊斯麦图谋在首航中让巨轮沉没，然后向保险公司套赔巨额保险金，为此不惜以贿赂的手段让船长改变航线，往冰山区海域行进。船撞上冰山后，船上最镇静、最有绅士风度的是德国人，不择手段逃生的是英国人。那位著名的大副也摇身一变，成了德国人，在危难之际，挺身而出，组织救援。二战后，这部影片遭到英国的猛烈抨击，后德国也明令禁放了。&lt;/p&gt;
&lt;p&gt;67 英国人也曾多次演绎过泰坦尼克的故事。最出名的是1958年由洛伊·贝克导演的《冰海沉船记》。按照英国人的观点，该片之所以没像97版《泰坦尼克号》誉满全球，是因为“摈弃了那些虚华的、惹眼的男女情感戏”。他们认定，自己是以严肃的态度，拍摄了一部注重细节与史实的精致电影， 97版《泰坦尼克号》很多地方都是在向《冰海沉船记》学习与致敬。&lt;/p&gt;
&lt;p&gt;68 英国一家媒体曾报道，1945年一艘日本潜艇发射的鱼雷，穿越时空隧道，击沉了1912年的泰坦尼克号。&lt;/p&gt;
&lt;p&gt;69 《纽约时报》关于泰坦尼克灾难的报道帮助其从一份地方报纸转变为一份全球媒体。1912年，纽约地区有二十多份日报，在惨烈的竞争中，不实与误导的消息泛滥。对泰坦尼克事件的报道让《纽约时报》的知名度更上层楼。&lt;/p&gt;
&lt;p&gt;70 这场灾难直接影响了大众传媒日后的传播方式。这是历史上首次重大新闻通过电子方式传播，从4月15日最初的灾难到营救船于3日后驶入纽约港，所有的消息都通过无线电报发送。&lt;/p&gt;
&lt;p&gt;71 97版《泰坦尼克号》获得第70届奥斯卡11项大奖，其中包括“最佳影片”。全世界票房收入达18亿美元，并保持纪录直至2010年1月26日，被詹姆斯·卡梅隆执导的新片《阿凡达》打破。&lt;/p&gt;
&lt;p&gt;72 80遍–据传国内观看《泰坦尼克号》最多次数的纪录。&lt;/p&gt;
&lt;p&gt;73 《泰坦尼克号》主题曲《My Heart Will Go On》曾使加拿大籍歌手Celine Dion在第41届格莱美颁奖仪式上独拿3项大奖：最佳年度唱片，最佳年度歌曲，最佳流行女歌手；并获得第70 届奥斯卡最佳电影歌曲。&lt;/p&gt;
&lt;p&gt;74 据美国民俗学家DK Wilgus的研究， 泰坦尼克号激励了大量歌曲的创作，可能超过美国历史上的任何事件。仅在1912年至1913年，就有百余首歌曲在美国诞生。已知最早的关于泰坦尼克号的商业歌曲，在灾难发生后短短十几天后就登记了版权。&lt;/p&gt;
&lt;p&gt;75 卡梅隆自述：“在为《泰坦尼克号》寻找投资商时，我跟电影公司说这将是船上的”罗密欧与朱丽叶“，将会是一部史诗般的浪漫激情的电影。但我的真实动机是去拜访一下泰坦尼克号的残骸，这才是我制作那部电影的原因。我说的是事实，不过电影公司当时不知情，我说服了他们投资一场冒险历程。这听起来很疯狂，但这就是想象力创造了现实。”&lt;/p&gt;
&lt;p&gt;76 一共有4部以《泰坦尼克号》命名的电影：1915年拍摄的一部意大利无声电影，导演Pier Angelo Mazzolotti；成片于1943年，由德国导演Werner Klingler和Herbert Selpin拍摄；成片于1953年，导演Jean Negulesco；1997年的好莱坞大片，导演是詹姆斯·卡梅隆。&lt;/p&gt;
&lt;p&gt;77 97版《泰坦尼克号》里，露丝有一个瞬间的裸体镜头，15年后，这个镜头在中国被删除。&lt;/p&gt;
&lt;p&gt;78 为了拍摄真实的外景，20世纪福克斯在墨西哥下加利福尼亚州的太平洋海岸购买了一块16平方公里的地区，1996年5月31日设立了一个完整的电影摄影场。4个月内在罗萨里多的北部建造了一座小城市一样规模的摄影场，包括完整的基础结构和多个摄影棚。&lt;/p&gt;
&lt;p&gt;79 20世纪福克斯拥有全世界的出租和名称权，但为了保险，它将在美国的发行权以6500万美元的价格卖给派拉蒙电影公司。由于费用不断增高卡梅隆决定放弃他800万美元的报酬，但是在电影完成后他从20世纪福克斯获得了2000万美元的奖金。&lt;/p&gt;
&lt;p&gt;80 97版《泰坦尼克号》经典台词：I am the king of the world！（我是世界之王！）；You jump， I jump。（你要跳，我也跳。）I’m flying！（我在飞！）。男女主人公在船头相拥伸展双臂成为很多情侣日后模仿的经典动作。&lt;/p&gt;
&lt;p&gt;81 卡梅隆为了收集素材，召集了一支科学家、摄影师、水手和历史学家的队伍，组织了12次潜水，使用了当时世界上最大的深海考察船–俄罗斯“姆斯蒂斯拉夫·凯尔蒂什学院”号。船上的两艘和平号潜艇是当时唯一能够潜到废墟的深度的五艘潜艇之二。船上还有一台专门为摄影制造的遥控潜水器，&lt;/p&gt;
&lt;p&gt;82 尽管作为一部好莱坞影片，但97版《泰坦尼克号》近70%的收入是在美国和加拿大外获得的。&lt;/p&gt;
&lt;p&gt;83 J·P·摩根&lt;/p&gt;
&lt;p&gt;这位传奇金融家庞大的商业帝国中就有控制着英国白星航运公司（泰坦尼克号所属公司）的国际航运集团。摩根出席了1911年该船的下水仪式，并在船上拥有自己的私人套间，内有自己的私人散步甲板和装备特殊设计烟嘴的浴缸。有人为他预订好了处女航，但他没有成行，而是留在了法国享受他的早间按摩和硫磺浴。&lt;/p&gt;
&lt;p&gt;84 亨利·克雷·弗里克&lt;/p&gt;
&lt;p&gt;这位匹兹堡钢铁巨头与J·P·摩根是一同共事的生意合伙人，与摩根一样受到命运的眷顾，本来预定了泰坦尼克号船票的他后来没有上船。他之所以取消泰坦尼克号之旅，是因为他妻子扭伤了脚踝，不得不在意大利就医。&lt;/p&gt;
&lt;p&gt;85 吉列尔莫·马可尼&lt;/p&gt;
&lt;p&gt;这位意大利无线电报的先驱、1909年诺贝尔物理学奖获得者，收到泰坦尼克号的免费船票，却因为要用“卢西塔尼亚号”上的速记员而搭乘了该轮船。他的无线电发明挽救了泰坦尼克号上七百余条生命，不过有人指控马可尼公司的无线电报员为将新闻卖给《纽约时报》而向公众封锁消息。3年后，马可尼又幸运地逃过另一场海难。&lt;/p&gt;
&lt;p&gt;86 西奥多·德莱塞&lt;/p&gt;
&lt;p&gt;“两千名乘客呀，从他们的舱位鼠窜而出，只能徒然无助地漂浮在数英里的水域，祈祷着，呼嚎着！”小说家西奥多·德莱塞后来追忆他听到泰坦尼克号沉没时内心的震惊。40岁那年，本来在欧洲度假的他要搭乘泰坦尼克号返回美国，最终一位英国出版商说服了作家改乘另一艘便宜的轮船。&lt;/p&gt;
&lt;p&gt;87 弥尔顿·斯内夫利·赫尔希&lt;/p&gt;
&lt;p&gt;弥尔顿是赫尔希牛奶巧克力块、赫尔希糖果和赫尔希糖浆的幕后人物。赫尔希当时乘坐的亚美利加号就是发给泰坦尼克号冰山预警的几艘船只之一，他本来是计划坐泰坦尼克号的。赫尔希公共档案馆还收藏着弥尔顿1911年为泰坦尼克号特等舱支付的定金支票。&lt;/p&gt;
&lt;p&gt;88 阿尔弗雷德·格温尼·范德比尔特&lt;/p&gt;
&lt;p&gt;这位34岁的千万富翁级运动员是范德比尔特航运铁路帝国的继承人，泰坦尼克号出事后他被一些报纸列为船上乘客，实际上他在快开船前取消了这次旅行。但3年后他就不复被命运垂青，成为卢西塔尼亚号沉船事故中最有名的遇难者之一。&lt;/p&gt;
&lt;p&gt;89 约翰·莫特&lt;/p&gt;
&lt;p&gt;“仁慈的上帝一定还有更多的工作留给我们去做。”莫特和同事在获悉泰坦尼克号灾难时说。他是一位颇具影响力的布道者，于1946年获得诺贝尔和平奖。据推测，一位对他们的工作颇感兴趣的白星航运公司官员为他及其同事提供了免费的泰坦尼克号船票，但他们拒绝了好意，改乘更低廉的邮轮“拉普兰德号”。&lt;/p&gt;
&lt;p&gt;90 阿斯特四世&lt;/p&gt;
&lt;p&gt;是当时著名的房地产大亨（影片中有他在餐厅里一晃而过的镜头），灾难中他把已有5个月身孕的妻子送上救生艇，因为他是影响股市的关键人物，也曾被命令上救生艇，但他愤怒地拒绝，“我喜欢最初的说法（保护弱者的古老守则）”，把位子让给了三等舱的一个爱尔兰妇女。&lt;/p&gt;
&lt;p&gt;91 斯特劳斯夫妇&lt;/p&gt;
&lt;p&gt;电影《泰坦尼克号》中躺在正在入水的套房床上相互拥抱的老年夫妇原型。斯特劳斯是美国“梅西百货公司”创始人，他太太罗莎莉始终拒绝上8号救生艇。在纽约市，矗立着为这对夫妇修建的纪念碑，上面写的是，“再多再多的海水都不能淹没的爱。”&lt;/p&gt;
&lt;p&gt;92 杰克。飞利浦&lt;/p&gt;
&lt;p&gt;杰克时年25岁，马可尼电报公司的资深职员，曾在多艘轮船上做过报务员。那天晚上，他向外发报求援，当泰坦尼克号船首和前舷已浸入水中时，船长示意菲利普可以离开岗位，但是他坚持直到最后一刻，没能生还。英国的邮轮卡帕西亚号收到电报之后从93公里外火速赶来，把711个幸存者从冰冷的海水中救起。&lt;/p&gt;
&lt;p&gt;93 杰克·福翠尔&lt;/p&gt;
&lt;p&gt;著名的美国推理小说家，著有《思考机器探案集》系列。在灾难中，他安排妻子上了救生艇后回到娱乐大厅，当时他妻子最后回头一瞥，看到他和亚斯特四世一起抽雪茄。最终，福翠尔这个推理界的神话，以及几份未发表的推理小说手稿，随着泰坦尼克永埋大西洋底。&lt;/p&gt;
&lt;p&gt;94 船长爱德华·史密斯&lt;/p&gt;
&lt;p&gt;当时他被誉为世界上最老练的船长之一，英国国王曾授予他运输勋章，他被大家称为“安全上尉”。但是在最后一次航行中却因为判断失误导致泰坦尼克号撞上冰山。在轮船沉没之际，下达让妇孺先上船的命令。&lt;/p&gt;
&lt;p&gt;95 托马斯·安德鲁&lt;/p&gt;
&lt;p&gt;生于爱尔兰，Harland and Wolff（位于北爱尔兰首府贝尔法斯特）造船公司制图部门负责人和经理，负责泰坦尼克号的设计，他参加了泰坦尼克号的处女航，死于这场灾难。&lt;/p&gt;
&lt;p&gt;96 二副莱特勒&lt;/p&gt;
&lt;p&gt;最后一艘救生艇放下时，大副突然发现这艘救生艇上没有会驾驶的海员，于是命令莱特勒下去，莱特勒断然拒绝了大副的命令，他在后来的回忆录中说：“我坚持留在甲板上，与剩下的人呆在一起。”他是最后一个获救者，后来在1940年敦刻尔克大撤退时再次死里逃生。&lt;/p&gt;
&lt;p&gt;97 细野正文&lt;/p&gt;
&lt;p&gt;日本铁道院副参事，男扮女装爬上满载妇女和儿童的10号救生艇逃生，回到日本被立即解职，受到所有日本报纸指名道姓的公开指责，在忏悔与耻辱里过了10年后死去，留下一篇手记，记录了当时他正准备为日本的荣誉献身时，突然背后有人喊他下来，说救生艇上还有两个空位。&lt;/p&gt;
&lt;p&gt;98 理查德·威廉姆斯&lt;/p&gt;
&lt;p&gt;上船时已是世界知名的网球选手。海难发生后，他在冰冷的海水里泡了几个小时被救起。获救后，船上的医生告诉他必须截去两腿才能保命，他拒绝了，坚持每隔两小时就起来走一走，终于保住了双腿。获救几个月后，他被哈佛大学录取，在当年的美国网球公开赛上打入八强，并在1924年的巴黎奥运会上夺得混双金牌。&lt;/p&gt;
&lt;p&gt;99 卡尔·贝尔&lt;/p&gt;
&lt;p&gt;知名网球手，在1906年到1915年间，曾7次闯入美国排名前10位，并在1914年上升到第三位。后来他还在温网闯入双打决赛。他是与未婚妻纽萨姆和她的父母一起登上泰坦尼克号的，灾难中他和未婚妻登上第二艘救生艇获救。在救生艇上，他向纽萨姆求婚。&lt;/p&gt;
&lt;p&gt;100 米尔维纳·迪恩&lt;/p&gt;
&lt;p&gt;最后一位幸存者，于2009年辞世，享年97岁。事故发生时，她还是一个婴儿，被带上救生艇得救。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;1 泰坦尼克号航行过程中，一位船员对二等舱女乘客西尔维亚·考德威尔说：“就是上帝亲自来，他也弄不沉这艘船。”&lt;/p&gt;
&lt;p&gt;2 泰坦尼克号头等舱票价4350美元，二等舱票价1750美元，三等舱30美元。&lt;/p&gt;
&lt;p&gt;3 一位名叫阿道夫·萨阿弗尔德的头等舱乘客在遇难前5天给妻子写了一封长达3页的书信。这封信以头等舱乘客的视角，对船上的生活进行了深入而详尽的描写，包括每天在船上的食物、客舱的大小以及装潢状况等。&lt;/p&gt;
&lt;p&gt;4 4月14日晚10时55分，加州人号在泰坦尼克号以北的冰场前抛锚过夜，并向附近的所有航行船只发出警报。当无线电讯号抵达泰坦尼克号时，冰山警报却被中断并被回应：“勿搔扰！住口吧！你已经干扰我的讯号了！我正向瑞斯角发电报！”&lt;/p&gt;
&lt;p&gt;5 由于船员忘记带上望远镜，瞭望员不得不用肉眼观测海面情况。4月14日11点40分，瞭望员弗雷德里克·弗利特发现远处有“两张桌子大小”的一块黑影，并以很快的速度变大。他敲了三下驾驶台的警钟，并抓起电话：“正前方有冰山！”&lt;/p&gt;
&lt;p&gt;6 接到电话的六副穆迪通知了旁边的大副默多克，他立即向舵手惊呼“右满舵”，命令机房关闭引擎向后驶，并把吃水线的水闸关上。舵手全速转动船舵，数秒之后，泰坦尼克号向左舷改变方向，但冰山已正面撞向右舷弓并沿船侧擦身而过。&lt;/p&gt;
&lt;p&gt;7 头等舱和二等舱一些睡得不熟的乘客被轻微的金属刮擦声惊醒，有人以为遇上了大浪，有人以为触礁了，还有人以为螺旋桨发生了故障。下面船舱的乘客感觉到的震动剧烈得多。有的乘客看到了舷窗外擦身而过的乳白色冰山，有些擦掉的冰块掉到了船舱里。船身开始进水。&lt;/p&gt;
&lt;p&gt;8 得知船已撞击冰山，史密斯船长和哈兰·沃尔夫公司的首席造船师托马斯·安德鲁一起检查受损情况。检查过所有水密舱之后，安德鲁对史密斯船长说：“这艘船没救了。”&lt;/p&gt;
&lt;p&gt;9 1908年，国际通用的遇难信号刚从CQD改为SOS。泰坦尼克号的无线电首席官员约翰·乔治·菲利普自船撞击冰山后一直在发送CQD遇难信号，直到下级无线电操作员哈罗德·布莱德建议：“发送SOS吧，这是新的呼叫信号，这也可能是你最后的机会来发送它了！”&lt;/p&gt;
&lt;p&gt;10 在船的左舷，救生艇只载妇女和儿童；在右舷，则在妇女优先逃生之后允许男性登艇。&lt;/p&gt;
&lt;p&gt;11 救生艇边的工作乱七八糟，尽管妇女和儿童（头等舱和二等舱的妇女儿童）先登上救生艇的美德得到了遵守，但很多救生艇在半空的状态下就被放了下去。当时的航海界都认为如果救生艇满载人员放下去，会造成损坏甚至倾覆。泰坦尼克号的救生艇设计得很结实，但是船员们不知道这一点。结果可以搭载1178人的救生艇，只上去651人（还有一些人是跳海之后被救上救生艇）。&lt;/p&gt;
&lt;p&gt;12 为头等舱乘客服务的8人乐队在指挥华莱士·哈特利的带领下，站在救生艇入口的阶梯附近为撤离泰坦尼克号的乘客继续演奏轻快的爵士乐和庄严的圣歌《上帝与我们同在》，以安抚这些绝望的人们，直到最后一刻。&lt;/p&gt;
&lt;p&gt;13 面对死亡，世界著名管道大亨本杰明·古根海姆穿上了最华丽的晚礼服，说：“我要死得体面，像一个绅士。”他给太太留下纸条：“这条船不会有任何一个女性因为我抢占了救生艇的位置而留在甲板上。我不会死得像一个畜生，会像一个真正的男子汉。”&lt;/p&gt;
&lt;p&gt;14 亿万富翁约翰·雅各布·阿斯德询问负责救生艇的船员可否陪同正怀着身孕的妻子马德琳上艇，船员说了一句“妇孺先上”之后，他就像一个真正的绅士一样，回到甲板，安静地坐在那里，直到轮船沉没，倒下的大烟囱把他砸进大西洋中。&lt;/p&gt;
&lt;p&gt;15 美国银行家华盛顿·道奇的妻子鲁丝进餐时无意中将菜单放进了手提包。失事后，鲁丝与儿子乘坐救生艇离开并获救，这张放在鲁丝手提包中的“最后的午餐”菜单得以留存至今。菜单上列出了泰坦尼克号为头等舱乘客提供的奢华午餐菜品。&lt;/p&gt;
&lt;p&gt;16 幸存者、船上理发师奥古斯特·韦科曼回忆，当时他和阿斯德先生在甲板上呆了一会儿，聊着只有在理发椅上才谈的小事情。临别时，韦科曼问阿斯德：“你介不介意我和你握个手？”阿斯德说：“我很高兴。”&lt;/p&gt;
&lt;p&gt;17 美国梅西百货公司创始人斯特劳斯和夫人当时也在船上。当有人向67岁的斯特劳斯先生提出，“我保证不会有人反对像您这样的老先生上小艇……”斯特劳斯坚定地回答：“我绝不会在别的男人之前上救生艇。”&lt;/p&gt;
&lt;p&gt;18 63岁的斯特劳斯夫人刚上8号救生艇，又马上改变主意，回来和斯特劳斯先生待在一起。“这么多年来我们都生活在一起，你要去的地方，我也去！”她把自己在艇里的位置给了一个年轻的女佣，并把自己的皮毛大衣甩给她，说：“我再也用不着它了！”&lt;/p&gt;
&lt;p&gt;19 白星公司主席布鲁斯·伊斯梅抛下他的乘客、他的船员、他的船，在最后一刻跳进救生艇。&lt;/p&gt;
&lt;p&gt;20 造船师托马斯·安德鲁在泰坦尼克号即将沉没时毫无逃生的意念。他在最后时刻，还痛悔地对一个女服务员说“孩子，我没有给你造一条不会沉没的船。”&lt;/p&gt;
&lt;p&gt;21 4月15日凌晨2时17分，此时离泰坦尼克号被撞击已经过去了两个半小时，史密斯船长对船员说：“现在大家要靠自己了。”之后步往舰桥，等候与泰坦尼克号同归于尽。&lt;/p&gt;
&lt;p&gt;22 4月15日凌晨2时20分，泰坦尼克号船尾部分在水面悬浮了一会，便缓缓地消失。泰坦尼克号上2208名船员和旅客中，只有705人生还。&lt;/p&gt;
&lt;p&gt;23 泰坦尼克号的沉没引起了人们对海上安全问题的关注。1913年11月12日，第一届海上生命安全国际大会在伦敦召开。大会通过了关于救生艇、无线电通讯、航行安全训练等数项提议，并讨论了冰山检测问题。&lt;/p&gt;
&lt;p&gt;24 1914年1月30日，在第一届海上生命安全国际大会上，国际冰山检测组织正式成立，直到今天它还在检测和报告大西洋与太平洋上可能威胁航船的冰山。&lt;/p&gt;
&lt;p&gt;25 当时国际通用的海事安全规则是，救生艇的搭载人数是船上总人数的三分之一，而泰坦尼克号的救生艇可以搭载一半乘客，白星公司为这种“对乘客安全高度负责”的额外配置没有引起公众注意而感到不平。但是，泰坦尼克号的沉没永久改变了这种救生策略：新的规则要求，救生艇必须能容纳船上的所有人员。&lt;/p&gt;
&lt;p&gt;26 泰坦尼克号遇难时发出的求救信号第二天早上才被其他船只收到，因为那些船没有24小时监听无线电。1914年，《国际海上生命安全公约》规定，轮船必须配备无线电设备并24小时开机值守。&lt;/p&gt;
&lt;p&gt;27 泰坦尼克号的第一艘姐妹船奥林匹克号在它“姐姐”沉没后，立即被召回船厂改装。它的防水隔墙被升高到船体的最上一层甲板，救生艇甲板两侧还装满了救生艇。&lt;/p&gt;
&lt;p&gt;28 泰坦尼克号的第二艘姐妹船本来叫作“巨人”号（RMS Gigantic）。由于Gigantic和Titanic在英语中都有“巨大的、非凡的”的意思，泰坦尼克号失事后，白星公司把船名换成了“不列颠尼克”号，不想让新船与那场灾难有任何联系。&lt;/p&gt;
&lt;p&gt;29 沉没事故之后，泰坦尼克号成了灾难的代名词。金融危机时，有评论形容美元的大幅贬值会使美国经济“像泰坦尼克号一样沉没”；欧洲债务危机时，雅典《每日新闻》头条以“他们在泰坦尼克号上打牌”为题，批评希腊政客为各自私利争吵。&lt;/p&gt;
&lt;p&gt;30 泰坦尼克号沉没后，许多海底打捞公司瞄准这一机遇，疯狂打捞一切能找到的遗存物，并在黑市上高价出售。美国已制定一项保护法案，目前泰坦尼克号的打捞权只属于RMS泰坦尼克公司所有。&lt;/p&gt;
&lt;p&gt;31 泰坦尼克号上一件LV硬型皮箱从海底打捞上岸后，竟然没有渗进海水，箱子里的照片、信件等都完好无损。从此，LV因其高质量而迅速走红。&lt;/p&gt;
&lt;p&gt;32 1985年，美国著名海洋学家罗伯特·巴拉德发现了泰坦尼克号的残骸。他对散落在残骸周围的无数双鞋子印象深刻，“妈妈的鞋，女儿的鞋，男人的鞋，船员的鞋，像一座座墓碑。”之后，美国的深海探险公司组织了多次潜水，带领人们观看泰坦尼克号残骸，费用高达5。9万美元。&lt;/p&gt;
&lt;p&gt;33 泰坦尼克号撞上冰山时分离出的船体碎片以及救生艇吊艇架等去年4月21日在美国达拉斯被拍卖，所得部分金额用于慈善事业。&lt;/p&gt;
&lt;p&gt;34 来自泰坦尼克号沉船遗址的5900件打捞物于今年4月11日在美国被拍卖，“成批出售”。这批物品估价1。89亿美元。赢家将负担起对泰坦尼克号遗存物的“如同管家般细致”的维护工作，并需要“在任何需要的时间，无条件将一部分遗存物展示给大众”。&lt;/p&gt;
&lt;p&gt;35 一本1912年6月出版的中国小学教科书《新国文》，其中课文《铁达尼邮船遇险记》介绍了这场震惊世界的海难，还绘制了船撞冰山沉没的插图。这本教科书的出版仅在泰坦尼克号事件发生两个月之后，是辛亥革命后出版的第一批教科书。&lt;/p&gt;
&lt;p&gt;36 英国贝尔法斯特市为纪念泰坦尼克号起航100周年，耗资1亿英镑修建了泰坦尼克旅游中心。在这里，游客可以参观泰坦尼克号造船厂的模拟场景，借助计算机生成的画面参观完工后的泰坦尼克号，并体验模拟的沉船场景。&lt;/p&gt;
&lt;p&gt;37 电影《泰坦尼克号》大获成功后，片中露丝佩戴的项链“海洋之心”获得人们的青睐，尤其是女性。“海洋之心”的原型是产自非洲的坦桑石。3D版《泰坦尼克号》即将上映时，“海洋之心”再次走俏热卖。&lt;/p&gt;
&lt;p&gt;38 加拿大皇家铸币厂将发行一款纪念银币，以纪念泰坦尼克号沉没100周年。银币的正面图案是泰坦尼克号正向冰山冲去，船舶与冰山之间标有具体沉没在北大西洋的经度和纬度。英国皇家铸币局则制作了两枚硬币以纪念这一灾难。&lt;/p&gt;
&lt;p&gt;39 在对泰坦尼克号的的研究中，昆士兰理工大学行为经济学家大卫·萨维奇发现，很多英国乘客为了保持绅士风度，排队等候救生艇，结果失去最后的机会而葬身大海。他总结，爱德华七世时代是社会上推崇绅士风度的巅峰时代。即使在最后关头，史密斯船长还大声提醒英国男人：“男人们，别忘了我们是英国人！”&lt;/p&gt;
&lt;p&gt;40 泰坦尼克号充分运用了第二次科技革命的成果，这艘“永不沉没的轮船”也是人类的美好愿景达到顶峰的产物，反映了人类征服世界的超强信心。她的沉没警告人们不可对自然失去敬畏之心。&lt;/p&gt;
&lt;p&gt;41 泰坦尼克号共耗资7500万英镑，吨位46328吨，长882。9英尺，宽92。5英尺，从龙骨到4个大烟囱的顶端有175英尺，高度相当于11层楼。动力方面，25台双端及4台单端锅炉，两台往复式四缸三胀倒缸蒸汽机及一台低压蒸汽轮机，59000匹马力，排水量达到了规模空前的66000吨。&lt;/p&gt;
&lt;p&gt;42 泰坦尼克号被认为是航海技术史上的一个里程碑，《造船专家》杂志认为其“根本不可能沉没”。全船分为16个水密舱，连接各舱的水密门可通过电开关统一关闭。泰坦尼克号良好的防水措施，使得它在任何4个水密舱进水的情况下都不会沉没。但实际上，防水壁并没有穿过整个甲板，仅仅达到了E层。&lt;/p&gt;
&lt;p&gt;43 出事后，很多大西洋上的船只都收到求救电报，都在加速向出事地点赶来。但18海里外的加利福尼亚人号的收发报员关掉电报机睡觉去了–1913年12月12日，伦敦召开了第一届海上生命安全国际大会，达成规定，无线电通讯应该24小时开通，加上一个2级备用电源，这样就不会漏掉呼救信号。&lt;/p&gt;
&lt;p&gt;44 沉没原因最流行的说法是冰山撞上船头后大量进水，船体“头重脚轻”，船尾翘起，船身最终裂成两半。2006年，美国探险家发现残骸底部切口非常整齐，不可能是断裂形成，而应是由一种特殊的外来压力造成的。换句话说是因为冰山撞中了船身，而非船头；巨大的冲击力使轮船裂成两半，沉入水底。&lt;/p&gt;
&lt;p&gt;45 泰坦尼克号的沉船形式有很多说法。包括全船沉没；船身近第二及第三支烟囱中间折开，然后各自垂直沉没；船身近第三及第四支烟囱中间折开，然后前船身部分拖着船尾，船尾垂直下沉。残骸最初被找到时，是前两支烟囱的船头部分，以及第四支烟囱之后的船尾部分，初步证明了第三个理论，詹姆斯·卡梅隆拍摄《泰坦尼克》时，采用了这个理论。当时普遍认为，第三支烟囱的船身部分已经被炸毁成碎片。但在2005年8月，由History Channel赞助的考古队在船尾残骸后500米找到船身部分，残骸约12米乘27米。部分科学家相信，泰坦尼克号是折开3截后沉没。&lt;/p&gt;
&lt;p&gt;46 事故原因猜想之一：航速太快，根本没有时间避开冰山。&lt;/p&gt;
&lt;p&gt;47 事故原因猜想之二：船员们判断失误，转错了方向舵，从而导致“泰坦尼克号”不幸撞上冰山。一种说法认为，若泰坦尼克号不转向而是笔直前进的话，就会搁浅在冰山上，因为冰山只有一小部分露出海面，船上的人都可以转移到冰山上等候救援。&lt;/p&gt;
&lt;p&gt;48 事故原因猜想之三：铆钉问题。冶金专家提姆·费克于1998年将那些由残骸中取得的船身样本进行检验后表示，钢铁品质并没有问题，即使在低温下亦没有异常脆弱。最致命的关键，就是那些用以接合船身的铆钉，由于泰坦尼克号船头部分空间狭小，不能像其他部分那样可以用重型机器来安装钢铁铆钉，所以需要以人手来安装锻铁铆钉，但坚固程度不及钢铁铆钉，所以就加入矿渣来强化，但过量的矿渣使铆钉变得脆弱。从泰坦尼克号残骸取出的几根铆钉，经检验后发现有高含量的矿渣，后来一家铸铁厂制成一批矿渣含量相近的铆钉，经试验后证实它们于不足1万磅的压力下断裂，换句话说矿渣含量超标的铆钉不能承受强力的撞击，它们遭受破坏之后，船身接合位就出现裂缝，使海水涌入船舱。&lt;/p&gt;
&lt;p&gt;49 事故原因猜想之四：视觉偏差。英国历史学家蒂姆·马尔汀认为，事发当晚出事地点附近海域的大气状况为超折射的发生提供了必要的条件。这种特殊的光线弯曲现象导致了幻象的产生，并且他发现海上附近区域的几艘船只都记录到了这一现象。他说这个现象妨碍了泰坦尼克号的瞭望员的视线，让他没能及时看到冰山，也妨碍了加利福尼亚号货船对泰坦尼克号的确认及两船之间通信。&lt;/p&gt;
&lt;p&gt;50 事故原因猜想之五：月亮惹的祸。1912年1月4日，月球距地球“近地点”距离是1400年以来最近的，这种罕见的“近距离”导致月球对海洋潮汐的引力影响比平时至少增强了74%，美国得克萨斯州大学的科学家们相信，这一罕见的天文现象导致海洋潮汐异常升高，正是不断起伏的强大海洋潮汐导致撞上泰坦尼克号的那座冰山在1912年 1月4日那天脱离它所在的格陵兰岛冰川，漂向北大西洋，并最终导致了“泰坦尼克号”的悲剧。&lt;/p&gt;
&lt;p&gt;51 纪录片《撞沉泰坦尼克号的冰山》则认为，“肇事冰山”形成于1。5万年前，于1909年从极地冰川上脱落，1912年漂流到大西洋的航线上。当它与泰坦尼克号相撞后，也迎来了自己的噩运。两周后，这座冰山就漂向更温暖的海域，渐渐融化掉。&lt;/p&gt;
&lt;p&gt;52 1985年，美国著名海洋探险家罗伯特·巴拉德和他的两位同事乘坐阿尔文号潜水器，在纽芬兰东南约380英里海域发现了沉睡多年的“泰坦尼克”号残骸。&lt;/p&gt;
&lt;p&gt;53 1994年夏天，法国海洋开发研究所的“鹦鹉螺”号潜水器到沉船地点考察，发现乘务员室的保险柜不见了，邮轮的右舷并没有裂缝，裂缝是在船底，轮机舱也没有发生爆炸。&lt;/p&gt;
&lt;p&gt;54 当今世界上接触泰坦尼克号最多的是一位名叫保罗·亨利·纳尔若莱的法国人。在过去25年中，这位66岁的深海潜水员曾造访遗址三十多次，最近一次2010年，他带领团队，利用声纳以及机械控制的水下拍摄车拍摄了13万张照片，首次绘制出这片3英里宽、5英里长的残骸区全景图。&lt;/p&gt;
&lt;p&gt;55 根据这张全景图，一名探险家表示，泰坦尼克号撞上冰山后，并不是直接下沉的，而是螺旋式下降，沉入海底。&lt;/p&gt;
&lt;p&gt;56 世界上只有5艘潜艇–采用高科技金属打造–能够经受住泰坦尼克号残骸所在深度的巨大压力。&lt;/p&gt;
&lt;p&gt;57 打捞泰坦尼克号一直备受争议，反对者包括发现沉船的巴拉德。巴拉德认为，世人不应打破泰坦尼克号的宁静，而应让它作为死于这场灾难的1500多名乘客和船员的“神圣墓地”；支持者则认为，“难道我们让它自然分解？或者，我们尽力保存这些遗产，从海底打捞部分文物？”&lt;/p&gt;
&lt;p&gt;58 沉船被发现后，RMS泰坦尼克公司先后6次下海打捞，打捞的文物共计5900件。还有未知数量的文物可能已被非法打捞。该公司遗址惟一合法的管理及监护机构，它是第一家提出认领该遗址的公司。它赠与法官一件泰坦尼克号文物，就搞定了其他所有的认领申请。&lt;/p&gt;
&lt;p&gt;59 由于遭受海底生物的腐蚀、强大的洋流冲击，乃至人类自身的过失，这艘沉船的5万吨铸铁正在慢慢分解。科学家们认为，要保存残骸已经不可能，15到20年之内，泰坦尼克残骸将成为大西洋底的一块锈斑。看来，泰坦尼克号只能保存在影像当中了。&lt;/p&gt;
&lt;p&gt;60 摩根·罗伯森，海员出身，纪实作家。1898年发表了名为《徒劳无功》的航海题材小说，情节与泰坦尼克号事件几乎一模一样。船难之后，罗伯森收到数以百计的来自孤儿寡母的哭诉信，指责他小说中的恶毒诅咒才使得他们的亲人遭此灾难。未久罗伯森离奇自杀。&lt;/p&gt;
&lt;p&gt;61 1938年，德国作者Robert Prechtl出版了《泰坦尼克号》一书，这是第一本记叙泰坦尼克事件的小说，书中虚构与纪实交织，开创了此后此类书籍的范例。&lt;/p&gt;
&lt;p&gt;62 1955年，Walter Lord的《冰海沉船》一书出版。不同于其他厚重刻板地历史纪录书，其鲜活的文风创造了此类书籍的一个模式。这本书被认为是数百本写泰坦尼克号书籍中最好的一本。&lt;/p&gt;
&lt;p&gt;63 1976年，小说《泰坦尼克重见天日》出版，并于1980年改编成一部昂贵的好莱坞电影。本片成本高达4000万美元，其中仅是特效经费就足够当年建造一艘泰坦尼克号了。&lt;/p&gt;
&lt;p&gt;64 迄今为止有8部关于泰坦尼克灾难的英语电影剧情片（不包括电视电影）：4部美国，2部英国，2部德国，产自1912年至1997年间。&lt;/p&gt;
&lt;p&gt;65 第一部关于泰坦尼克灾难的剧情片《泰坦尼克号脱险》，仅仅在事故29日后就上映了。其演员兼联合剧作者桃乐茜·吉布森，正是生还乘客，这部影片很大程度上根据其经历改编而成。&lt;/p&gt;
&lt;p&gt;66 在二战中，泰坦尼克号还沦为纳粹德国打击英国人的法宝。当年，戈培尔认定，这艘“上帝也沉不了”的轮船，是“日不落帝国”绝妙的象征。于是下令拍摄德国版《泰坦尼克号》。影片讲述英国船主伊斯麦图谋在首航中让巨轮沉没，然后向保险公司套赔巨额保险金，为此不惜以贿赂的手段让船长改变航线，往冰山区海域行进。船撞上冰山后，船上最镇静、最有绅士风度的是德国人，不择手段逃生的是英国人。那位著名的大副也摇身一变，成了德国人，在危难之际，挺身而出，组织救援。二战后，这部影片遭到英国的猛烈抨击，后德国也明令禁放了。&lt;/p&gt;
&lt;p&gt;67 英国人也曾多次演绎过泰坦尼克的故事。最出名的是1958年由洛伊·贝克导演的《冰海沉船记》。按照英国人的观点，该片之所以没像97版《泰坦尼克号》誉满全球，是因为“摈弃了那些虚华的、惹眼的男女情感戏”。他们认定，自己是以严肃的态度，拍摄了一部注重细节与史实的精致电影， 97版《泰坦尼克号》很多地方都是在向《冰海沉船记》学习与致敬。&lt;/p&gt;
&lt;p&gt;68 英国一家媒体曾报道，1945年一艘日本潜艇发射的鱼雷，穿越时空隧道，击沉了1912年的泰坦尼克号。&lt;/p&gt;
&lt;p&gt;69 《纽约时报》关于泰坦尼克灾难的报道帮助其从一份地方报纸转变为一份全球媒体。1912年，纽约地区有二十多份日报，在惨烈的竞争中，不实与误导的消息泛滥。对泰坦尼克事件的报道让《纽约时报》的知名度更上层楼。&lt;/p&gt;
&lt;p&gt;70 这场灾难直接影响了大众传媒日后的传播方式。这是历史上首次重大新闻通过电子方式传播，从4月15日最初的灾难到营救船于3日后驶入纽约港，所有的消息都通过无线电报发送。&lt;/p&gt;
&lt;p&gt;71 97版《泰坦尼克号》获得第70届奥斯卡11项大奖，其中包括“最佳影片”。全世界票房收入达18亿美元，并保持纪录直至2010年1月26日，被詹姆斯·卡梅隆执导的新片《阿凡达》打破。&lt;/p&gt;
&lt;p&gt;72 80遍–据传国内观看《泰坦尼克号》最多次数的纪录。&lt;/p&gt;
&lt;p&gt;73 《泰坦尼克号》主题曲《My Heart Will Go On》曾使加拿大籍歌手Celine Dion在第41届格莱美颁奖仪式上独拿3项大奖：最佳年度唱片，最佳年度歌曲，最佳流行女歌手；并获得第70 届奥斯卡最佳电影歌曲。&lt;/p&gt;
&lt;p&gt;74 据美国民俗学家DK Wilgus的研究， 泰坦尼克号激励了大量歌曲的创作，可能超过美国历史上的任何事件。仅在1912年至1913年，就有百余首歌曲在美国诞生。已知最早的关于泰坦尼克号的商业歌曲，在灾难发生后短短十几天后就登记了版权。&lt;/p&gt;
&lt;p&gt;75 卡梅隆自述：“在为《泰坦尼克号》寻找投资商时，我跟电影公司说这将是船上的”罗密欧与朱丽叶“，将会是一部史诗般的浪漫激情的电影。但我的真实动机是去拜访一下泰坦尼克号的残骸，这才是我制作那部电影的原因。我说的是事实，不过电影公司当时不知情，我说服了他们投资一场冒险历程。这听起来很疯狂，但这就是想象力创造了现实。”&lt;/p&gt;
&lt;p&gt;76 一共有4部以《泰坦尼克号》命名的电影：1915年拍摄的一部意大利无声电影，导演Pier Angelo Mazzolotti；成片于1943年，由德国导演Werner Klingler和Herbert Selpin拍摄；成片于1953年，导演Jean Negulesco；1997年的好莱坞大片，导演是詹姆斯·卡梅隆。&lt;/p&gt;
&lt;p&gt;77 97版《泰坦尼克号》里，露丝有一个瞬间的裸体镜头，15年后，这个镜头在中国被删除。&lt;/p&gt;
&lt;p&gt;78 为了拍摄真实的外景，20世纪福克斯在墨西哥下加利福尼亚州的太平洋海岸购买了一块16平方公里的地区，1996年5月31日设立了一个完整的电影摄影场。4个月内在罗萨里多的北部建造了一座小城市一样规模的摄影场，包括完整的基础结构和多个摄影棚。&lt;/p&gt;
&lt;p&gt;79 20世纪福克斯拥有全世界的出租和名称权，但为了保险，它将在美国的发行权以6500万美元的价格卖给派拉蒙电影公司。由于费用不断增高卡梅隆决定放弃他800万美元的报酬，但是在电影完成后他从20世纪福克斯获得了2000万美元的奖金。&lt;/p&gt;
&lt;p&gt;80 97版《泰坦尼克号》经典台词：I am the king of the world！（我是世界之王！）；You jump， I jump。（你要跳，我也跳。）I’m flying！（我在飞！）。男女主人公在船头相拥伸展双臂成为很多情侣日后模仿的经典动作。&lt;/p&gt;
&lt;p&gt;81 卡梅隆为了收集素材，召集了一支科学家、摄影师、水手和历史学家的队伍，组织了12次潜水，使用了当时世界上最大的深海考察船–俄罗斯“姆斯蒂斯拉夫·凯尔蒂什学院”号。船上的两艘和平号潜艇是当时唯一能够潜到废墟的深度的五艘潜艇之二。船上还有一台专门为摄影制造的遥控潜水器，&lt;/p&gt;
&lt;p&gt;82 尽管作为一部好莱坞影片，但97版《泰坦尼克号》近70%的收入是在美国和加拿大外获得的。&lt;/p&gt;
&lt;p&gt;83 J·P·摩根&lt;/p&gt;
&lt;p&gt;这位传奇金融家庞大的商业帝国中就有控制着英国白星航运公司（泰坦尼克号所属公司）的国际航运集团。摩根出席了1911年该船的下水仪式，并在船上拥有自己的私人套间，内有自己的私人散步甲板和装备特殊设计烟嘴的浴缸。有人为他预订好了处女航，但他没有成行，而是留在了法国享受他的早间按摩和硫磺浴。&lt;/p&gt;
&lt;p&gt;84 亨利·克雷·弗里克&lt;/p&gt;
&lt;p&gt;这位匹兹堡钢铁巨头与J·P·摩根是一同共事的生意合伙人，与摩根一样受到命运的眷顾，本来预定了泰坦尼克号船票的他后来没有上船。他之所以取消泰坦尼克号之旅，是因为他妻子扭伤了脚踝，不得不在意大利就医。&lt;/p&gt;
&lt;p&gt;85 吉列尔莫·马可尼&lt;/p&gt;
&lt;p&gt;这位意大利无线电报的先驱、1909年诺贝尔物理学奖获得者，收到泰坦尼克号的免费船票，却因为要用“卢西塔尼亚号”上的速记员而搭乘了该轮船。他的无线电发明挽救了泰坦尼克号上七百余条生命，不过有人指控马可尼公司的无线电报员为将新闻卖给《纽约时报》而向公众封锁消息。3年后，马可尼又幸运地逃过另一场海难。&lt;/p&gt;
&lt;p&gt;86 西奥多·德莱塞&lt;/p&gt;
&lt;p&gt;“两千名乘客呀，从他们的舱位鼠窜而出，只能徒然无助地漂浮在数英里的水域，祈祷着，呼嚎着！”小说家西奥多·德莱塞后来追忆他听到泰坦尼克号沉没时内心的震惊。40岁那年，本来在欧洲度假的他要搭乘泰坦尼克号返回美国，最终一位英国出版商说服了作家改乘另一艘便宜的轮船。&lt;/p&gt;
&lt;p&gt;87 弥尔顿·斯内夫利·赫尔希&lt;/p&gt;
&lt;p&gt;弥尔顿是赫尔希牛奶巧克力块、赫尔希糖果和赫尔希糖浆的幕后人物。赫尔希当时乘坐的亚美利加号就是发给泰坦尼克号冰山预警的几艘船只之一，他本来是计划坐泰坦尼克号的。赫尔希公共档案馆还收藏着弥尔顿1911年为泰坦尼克号特等舱支付的定金支票。&lt;/p&gt;
&lt;p&gt;88 阿尔弗雷德·格温尼·范德比尔特&lt;/p&gt;
&lt;p&gt;这位34岁的千万富翁级运动员是范德比尔特航运铁路帝国的继承人，泰坦尼克号出事后他被一些报纸列为船上乘客，实际上他在快开船前取消了这次旅行。但3年后他就不复被命运垂青，成为卢西塔尼亚号沉船事故中最有名的遇难者之一。&lt;/p&gt;
&lt;p&gt;89 约翰·莫特&lt;/p&gt;
&lt;p&gt;“仁慈的上帝一定还有更多的工作留给我们去做。”莫特和同事在获悉泰坦尼克号灾难时说。他是一位颇具影响力的布道者，于1946年获得诺贝尔和平奖。据推测，一位对他们的工作颇感兴趣的白星航运公司官员为他及其同事提供了免费的泰坦尼克号船票，但他们拒绝了好意，改乘更低廉的邮轮“拉普兰德号”。&lt;/p&gt;
&lt;p&gt;90 阿斯特四世&lt;/p&gt;
&lt;p&gt;是当时著名的房地产大亨（影片中有他在餐厅里一晃而过的镜头），灾难中他把已有5个月身孕的妻子送上救生艇，因为他是影响股市的关键人物，也曾被命令上救生艇，但他愤怒地拒绝，“我喜欢最初的说法（保护弱者的古老守则）”，把位子让给了三等舱的一个爱尔兰妇女。&lt;/p&gt;
&lt;p&gt;91 斯特劳斯夫妇&lt;/p&gt;
&lt;p&gt;电影《泰坦尼克号》中躺在正在入水的套房床上相互拥抱的老年夫妇原型。斯特劳斯是美国“梅西百货公司”创始人，他太太罗莎莉始终拒绝上8号救生艇。在纽约市，矗立着为这对夫妇修建的纪念碑，上面写的是，“再多再多的海水都不能淹没的爱。”&lt;/p&gt;
&lt;p&gt;92 杰克。飞利浦&lt;/p&gt;
&lt;p&gt;杰克时年25岁，马可尼电报公司的资深职员，曾在多艘轮船上做过报务员。那天晚上，他向外发报求援，当泰坦尼克号船首和前舷已浸入水中时，船长示意菲利普可以离开岗位，但是他坚持直到最后一刻，没能生还。英国的邮轮卡帕西亚号收到电报之后从93公里外火速赶来，把711个幸存者从冰冷的海水中救起。&lt;/p&gt;
&lt;p&gt;93 杰克·福翠尔&lt;/p&gt;
&lt;p&gt;著名的美国推理小说家，著有《思考机器探案集》系列。在灾难中，他安排妻子上了救生艇后回到娱乐大厅，当时他妻子最后回头一瞥，看到他和亚斯特四世一起抽雪茄。最终，福翠尔这个推理界的神话，以及几份未发表的推理小说手稿，随着泰坦尼克永埋大西洋底。&lt;/p&gt;
&lt;p&gt;94 船长爱德华·史密斯&lt;/p&gt;
&lt;p&gt;当时他被誉为世界上最老练的船长之一，英国国王曾授予他运输勋章，他被大家称为“安全上尉”。但是在最后一次航行中却因为判断失误导致泰坦尼克号撞上冰山。在轮船沉没之际，下达让妇孺先上船的命令。&lt;/p&gt;
&lt;p&gt;95 托马斯·安德鲁&lt;/p&gt;
&lt;p&gt;生于爱尔兰，Harland and Wolff（位于北爱尔兰首府贝尔法斯特）造船公司制图部门负责人和经理，负责泰坦尼克号的设计，他参加了泰坦尼克号的处女航，死于这场灾难。&lt;/p&gt;
&lt;p&gt;96 二副莱特勒&lt;/p&gt;
&lt;p&gt;最后一艘救生艇放下时，大副突然发现这艘救生艇上没有会驾驶的海员，于是命令莱特勒下去，莱特勒断然拒绝了大副的命令，他在后来的回忆录中说：“我坚持留在甲板上，与剩下的人呆在一起。”他是最后一个获救者，后来在1940年敦刻尔克大撤退时再次死里逃生。&lt;/p&gt;
&lt;p&gt;97 细野正文&lt;/p&gt;
&lt;p&gt;日本铁道院副参事，男扮女装爬上满载妇女和儿童的10号救生艇逃生，回到日本被立即解职，受到所有日本报纸指名道姓的公开指责，在忏悔与耻辱里过了10年后死去，留下一篇手记，记录了当时他正准备为日本的荣誉献身时，突然背后有人喊他下来，说救生艇上还有两个空位。&lt;/p&gt;
&lt;p&gt;98 理查德·威廉姆斯&lt;/p&gt;
&lt;p&gt;上船时已是世界知名的网球选手。海难发生后，他在冰冷的海水里泡了几个小时被救起。获救后，船上的医生告诉他必须截去两腿才能保命，他拒绝了，坚持每隔两小时就起来走一走，终于保住了双腿。获救几个月后，他被哈佛大学录取，在当年的美国网球公开赛上打入八强，并在1924年的巴黎奥运会上夺得混双金牌。&lt;/p&gt;
&lt;p&gt;99 卡尔·贝尔&lt;/p&gt;
&lt;p&gt;知名网球手，在1906年到1915年间，曾7次闯入美国排名前10位，并在1914年上升到第三位。后来他还在温网闯入双打决赛。他是与未婚妻纽萨姆和她的父母一起登上泰坦尼克号的，灾难中他和未婚妻登上第二艘救生艇获救。在救生艇上，他向纽萨姆求婚。&lt;/p&gt;
&lt;p&gt;100 米尔维纳·迪恩&lt;/p&gt;
&lt;p&gt;最后一位幸存者，于2009年辞世，享年97岁。事故发生时，她还是一个婴儿，被带上救生艇得救。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>百年来中国衰败最快的十个专业</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e7%2599%25be%25e5%25b9%25b4%25e6%259d%25a5%25e4%25b8%25ad%25e5%259b%25bd%25e8%25a1%25b0%25e8%25b4%25a5%25e6%259c%2580%25e5%25bf%25ab%25e7%259a%2584%25e5%258d%2581%25e4%25b8%25aa%25e4%25b8%2593%25e4%25b8%259a-%25e7%259c%258b%25e4%25bd%25a0%25e4%25b8%25ad%25e6%259e%25aa%25e4%25ba%2586%25e6%25b2%25a1.html"/>
        <updated>2012-03-15T13:18:17+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e7%99%be%e5%b9%b4%e6%9d%a5%e4%b8%ad%e5%9b%bd%e8%a1%b0%e8%b4%a5%e6%9c%80%e5%bf%ab%e7%9a%84%e5%8d%81%e4%b8%aa%e4%b8%93%e4%b8%9a-%e7%9c%8b%e4%bd%a0%e4%b8%ad%e6%9e%aa%e4%ba%86%e6%b2%a1</id>
        <content type="html">&lt;p&gt;哲学、数学、电子商务、社会学、公共事业管理、历史学、文学、英语、表演艺术、国际贸易……&lt;/p&gt;
&lt;p&gt;《赢未来》杂志为你遴选出，百年来衰败最快的十个专业。他们或曾经火爆一时，却在市场经济的大潮中被人摒弃；他们或匆匆上马，学科设置、教师水平和理论基础都远未成熟；他们或出身西方名门，但不适应中国国情而沦为鸡肋。什么是他们衰弱的原因？而从这些专业和时代的互动之间，我们又看出了什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经，“学好数理化，走遍天下都不怕”不仅是许多学子选择专业的金科玉律，更是报效祖国和建设“四化”的基本要求。与此同时，在华罗庚、陈景润等著名数学家的影响下，数学、物理学等基础学科十分吃香。可从上世纪80年代末开始，经济中国登上舞台，实用主义大行其道，“有用”成为大学生选择专业的首要考虑因素。相对于金融学、市场营销和国际贸易等专业，数学显然成为“没用”的专业。再者，90年代后期计算机与互联网开始勃兴，过于复杂的数字计算都能通过计算机解决，日常需要的计算能力早在高中阶段就能掌握。所以，数学成为连鸡肋都不如的专业。&lt;/p&gt;
&lt;p&gt;然而，第八次中国公民科学素养调查显示，2010年我国具备基本科学素养的公民比例仅为3.27%，相当于日本、加拿大和欧盟等国家在20世纪80年代末的水平。著名教育学者熊丙奇反问， “现在哪个学生有很强的说理能力？有多少人考虑问题时不是观点先行，没有经过严密论证？”数学等传统学科的缺失，导致当下的年轻人鲜有独立思考和思辨的能力，这一点，又有哪个新型学科能弥补？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哲学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2011年，浙江大学5000多名本科毕业生中，出自哲学系的只有3人。这也是自2007年浙大实行大类招生和自主选择专业的第一届毕业生。在此之前的上世纪80年代，浙大哲学系最多的时候一年曾达到近百名毕业生，而之后很长一段时间也能保持每年30名左右。&lt;/p&gt;
&lt;p&gt;1977年恢复高考时，哲学是大家竞相报考的热门文科类专业。这一年南京大学800多名新生里，哲学一个专业就有70多人，几乎占整个招生人数的十分之一。一方面，在那个知识和选择都匮乏的年代，越基础的科目越有市场，甚至是越时尚；另一方面，在那个大学生还包分配的年代，学生基本上没有就业压力，所以选择专业都凭借兴趣。&lt;/p&gt;
&lt;p&gt;然而，经历了一段短暂的哲学热后，80年代中后期，哲学专业面临法学、新闻学等新潮专业的冲击。不仅如此，学生也从思考社会、国家的理想主义转向创业、留学等实用主义，而好坏专业的衡量标准也只剩下就业这一条了。浙江工商大学哲学系主任宋道发无奈表示：“哲学系本科生几乎没有直接对口的岗位，只能和中文、新闻等专业‘抢饭碗’。”这似乎是中国哲学系学生的真实写照。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;民国时，恰逢乱世，人们有强烈认清自己的意愿，而历史学的作用恰如英国史学家科林伍德所说“历史学是为了人类的自我认识”。所以，这一时期，中国出了很多著名的史学家，如王国维、陈寅恽傅斯年、胡适、唐德刚等。新中国成立以后，史学不再是个香饽饽，一方面由于政治因素，史学背离了其客观记录历史的轨道，成为为阶级斗争服务的工具。真正做学问的史学家如陈寅恪被扣上“伪科学”“假权威”的帽子。晚年的陈寅恪甚至被赶出居住了16年的康乐园，在孤苦中黯然辞世。&lt;/p&gt;
&lt;p&gt;历史学的美好时光一去不复返。即使到了今天，近代史和现代史里面还有太多“不可说”。另一方面，实用主义大行其道，理想主义的色彩越来越淡，历史这种几乎全无用武之地的专业，愈发被冷落起来。&lt;/p&gt;
&lt;p&gt;表面上看，近些年穿越剧、宫廷戏、戏说历史的节目和书籍火爆，消费主义似乎救了历史一命，但其背后的悲凉似乎只有史学者自己明白。除了遥远的康熙雍正可以反复意淫，对于正在发现的历史，他们力不从心。只能看着高华渐行渐远的背影，一声叹息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;国际经济与贸易&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《2011年中国大学生就业报告》排出的本科就业十大红牌警告专业（失业量较大、就业率较低、薪资较低，为高失业风险型专业），国际经济与贸易专业赫然在列。&lt;/p&gt;
&lt;p&gt;早在建国初期我国部分高校就设置了国际贸易类专业，然而当时外贸在国民经济中所占比重很小，并未形成太大影响。1979年改革开放以后，国际经济、国际贸易、国际商务、工业外贸等专业迅速成为热门专业。1998年原国家教委将上述四个专业调整为国际经济与贸易专业。如此合并而来的专业，学习内容纷繁庞杂，包括经济学、统计学、政治经济学、西方经济学、国际经济学、会计学等等。2001年，中国加入WTO，国际经济与贸易专业一时大热，吸引大量的学生涌入。&lt;/p&gt;
&lt;p&gt;但这个专业并没有持续坚挺，一来从1997年东南亚金融危机到2008年的全球金融危机，世界经济并不景气；二来在20世纪90年代各高校纷纷跟风开设该专业，培养出来的学生量大质堪忧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公共事业管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“公管公管，东管管，西管管，‘大内总管’最后来个撒手不管。”在各大高校的网络论坛里，关于公共事业管理专业的质疑比比皆是。戏谑之言并非空穴来风，这个专业正处于“宽进窄出”的尴尬境地。&lt;/p&gt;
&lt;p&gt;1999年，东北大学和云南大学率先在全国招收公共事业管理专业的本科生。随后五年，开设该专业的院校更是由57所扩展到300多所。一时间，这个“舶来专业”在国内成了人人争抢的香饽饽，它也在众人的追捧中不断吸收进体育、文教、卫生、环保等专业知识，贪婪地成长。急速的膨胀往往意味着囫囵吞枣，在十多年的发展后，公共事业管理成了一个博而&lt;/p&gt;
&lt;p&gt;不精的专业“怪胎”。大学四年下来，学生们习得的管理知识只有半桶水，其他专业知识也只有半桶水，两者难以融为一桶受市场欢迎的“瓶装水”。更为严峻的是，教育部对该专业的人才培养目标是“培养能在公共事业单位从事管理工作的高级专门人才”。但是，在中国，要从事公共事业管理，那只有千军万马闯过公务员考试这条独木桥。因为除了进入官方体制，当下中国并没有多少NGO组织，更谈不上社会自治和公民社会，而公共事业管理专业的毕业生也只能沦为看守草料场的林冲――英雄无用武之地。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;社会学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“我学社会我贤惠，终身贡献居委会。”在2010年走红网络的日志《一条状态引发的专业爆炸》中，学生们如是吐糟社会学。与大多数研究上层建筑的人文类学科相似，当下的社会学专业已成为社会的“鸡肋”。&lt;/p&gt;
&lt;p&gt;因为其百家争鸣的理论学派和深入生活的田野调查，更因为它以解决社会问题为己任的普世情怀和现实意义，社会学曾一度受到年轻学子的青睐。然而因为种种缘故，直到1979年，中国的社会学才真正发展起来，至今在社会上的影响度和认知度也不高。更让人灰心丧气的是，目前国内的社会学正沦为闭门造车的“政治修辞学”――部分学者每天只会扛着远离社会学精神的口号满街乱窜，向国家骗取经费，然后足不出户就完成毫无现实意义的学术报告。&lt;/p&gt;
&lt;p&gt;在凤凰网制作的“中国大学现今十大最悲哀的学科”中，社会学榜上有名。学社会学的人，或是远离了社会，或是无法提出解决社会问题的方法，即使是提出来解决问题的办法，放到中国的环境里，这些方法也统统失效。这不得不说是整个学科的悲哀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;电子商务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近几年，网络交易的兴起使电子商务专业受到各大高校追捧。据统计，自2001年教育部首次批准13所高校开设电子商务专业以来，如今已有339所高校开设了该专业。目前该专业在校本科生已有7万名，专科生更达到20多万。不过按照人力资源专家预测，电子商务人才缺口在未来几年仍达到200万之多。&lt;/p&gt;
&lt;p&gt;但电子商务专业诞生之初，就存在争议。有学者认为其缺乏充分的实践资料和理论基础。事实证明，不少高校扯着“电子商务”大旗招生，但在课程上仅仅是计算机课程和经济管理课程的简单堆砌，导致学生“样样学，样样不精”。2008年教育部电子商务教学指导委员会提出“电子商务知识体系”模块，指导各个高校的电子商务课程建设，显然是在为之前的仓促埋单。2011年团购网站集体低迷，电子商务第三次浪潮已经到来，这一次动荡持续时长也将考验社会对电子商务专业的热情。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;英语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自2009年麦可思研究院撰写的《中国大学生就业报告》首次公布以来，英语本科专业连续三年都被列进就业红牌警告榜单。这在过去是不可想象的。自改革开放以来，中国与世界的交往越来越多，越来越频繁，这样的社会环境背景下，英语一直以强势面貌出现。其中有两个很明显的英语热潮，一是1990年前后自费留学教育的逐步开放，让考“TOEFL”和“GRE”成为当时潮流；二是2001年中国加入WTO前后的几年时间内，英语教育受到国家自上而下的推动，在民间受到欢迎。&lt;/p&gt;
&lt;p&gt;在中国，英语作为第一外语，获得了官方默许的肯定，但这种肯定已经脱离了英语作为一种交流工具的本质――想想看，即使你报读古汉语专业研究生也要通过英语的考试。另一方面，外资企业实行本土化策略，人民币升值抑制中小企业出口，社会对英语人才的需求缺乏增长点。当英语失去了职场“光环”后，人们开始怀疑英语教育在中国的模式是否恰当。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论是传统文学的衰颓，还是网络写作的风靡，似乎都与大学的中文系无关。北大中文系主任陈平原在回顾中文系的辉煌时曾说：19世纪以前的大学，人文学科是中心，30年前，文科考生首选中文系。但随着自然科学和社会科学的崛起，人文学科逐渐被边缘化。&lt;/p&gt;
&lt;p&gt;中文系教育本身也矛盾重重：号称“不培养作家”的中文系，以《文学史》、《文学理论》等为主要教材，将“文学”彻底知识化、模式化，并在脱离文学本身创造性和想象性的路上越走越远。很多学生毕业的时候，连基本的写作能力都不过关。忽视学生写作能力的培养、人文学科本身就业指向性不明显等诸多因素，直接导致了中文系毕业生在就业市场上缺乏竞争力。“就业面宽”的优势也随着专业细分、就业市场不断被分割而成了劣势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表演艺术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚刚过去的北影招生考试成为媒体和网络热点，一边聚起想看帅哥美女的闲人，一边却牵动着超过2.5万个考生家庭的心。其中，报考表演学院的有6186人，最终录取的只有85人，虽然这已经是大手笔扩招之后的人数，却仍有九成以上的人成了“炮灰”。&lt;/p&gt;
&lt;p&gt;“艺考热”的背后折射出不少隐忧：且不论这九成“炮灰”，即使是那幸运的1%，也未必能如赵薇、章子怡等成为“明星”，不少毕业生都迫于生计而选择另谋生路。高校扩招、艺术院校增多、剧院企业化等诸多因素，让就业形势变得更加严峻。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;哲学、数学、电子商务、社会学、公共事业管理、历史学、文学、英语、表演艺术、国际贸易……&lt;/p&gt;
&lt;p&gt;《赢未来》杂志为你遴选出，百年来衰败最快的十个专业。他们或曾经火爆一时，却在市场经济的大潮中被人摒弃；他们或匆匆上马，学科设置、教师水平和理论基础都远未成熟；他们或出身西方名门，但不适应中国国情而沦为鸡肋。什么是他们衰弱的原因？而从这些专业和时代的互动之间，我们又看出了什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经，“学好数理化，走遍天下都不怕”不仅是许多学子选择专业的金科玉律，更是报效祖国和建设“四化”的基本要求。与此同时，在华罗庚、陈景润等著名数学家的影响下，数学、物理学等基础学科十分吃香。可从上世纪80年代末开始，经济中国登上舞台，实用主义大行其道，“有用”成为大学生选择专业的首要考虑因素。相对于金融学、市场营销和国际贸易等专业，数学显然成为“没用”的专业。再者，90年代后期计算机与互联网开始勃兴，过于复杂的数字计算都能通过计算机解决，日常需要的计算能力早在高中阶段就能掌握。所以，数学成为连鸡肋都不如的专业。&lt;/p&gt;
&lt;p&gt;然而，第八次中国公民科学素养调查显示，2010年我国具备基本科学素养的公民比例仅为3.27%，相当于日本、加拿大和欧盟等国家在20世纪80年代末的水平。著名教育学者熊丙奇反问， “现在哪个学生有很强的说理能力？有多少人考虑问题时不是观点先行，没有经过严密论证？”数学等传统学科的缺失，导致当下的年轻人鲜有独立思考和思辨的能力，这一点，又有哪个新型学科能弥补？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哲学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2011年，浙江大学5000多名本科毕业生中，出自哲学系的只有3人。这也是自2007年浙大实行大类招生和自主选择专业的第一届毕业生。在此之前的上世纪80年代，浙大哲学系最多的时候一年曾达到近百名毕业生，而之后很长一段时间也能保持每年30名左右。&lt;/p&gt;
&lt;p&gt;1977年恢复高考时，哲学是大家竞相报考的热门文科类专业。这一年南京大学800多名新生里，哲学一个专业就有70多人，几乎占整个招生人数的十分之一。一方面，在那个知识和选择都匮乏的年代，越基础的科目越有市场，甚至是越时尚；另一方面，在那个大学生还包分配的年代，学生基本上没有就业压力，所以选择专业都凭借兴趣。&lt;/p&gt;
&lt;p&gt;然而，经历了一段短暂的哲学热后，80年代中后期，哲学专业面临法学、新闻学等新潮专业的冲击。不仅如此，学生也从思考社会、国家的理想主义转向创业、留学等实用主义，而好坏专业的衡量标准也只剩下就业这一条了。浙江工商大学哲学系主任宋道发无奈表示：“哲学系本科生几乎没有直接对口的岗位，只能和中文、新闻等专业‘抢饭碗’。”这似乎是中国哲学系学生的真实写照。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;民国时，恰逢乱世，人们有强烈认清自己的意愿，而历史学的作用恰如英国史学家科林伍德所说“历史学是为了人类的自我认识”。所以，这一时期，中国出了很多著名的史学家，如王国维、陈寅恽傅斯年、胡适、唐德刚等。新中国成立以后，史学不再是个香饽饽，一方面由于政治因素，史学背离了其客观记录历史的轨道，成为为阶级斗争服务的工具。真正做学问的史学家如陈寅恪被扣上“伪科学”“假权威”的帽子。晚年的陈寅恪甚至被赶出居住了16年的康乐园，在孤苦中黯然辞世。&lt;/p&gt;
&lt;p&gt;历史学的美好时光一去不复返。即使到了今天，近代史和现代史里面还有太多“不可说”。另一方面，实用主义大行其道，理想主义的色彩越来越淡，历史这种几乎全无用武之地的专业，愈发被冷落起来。&lt;/p&gt;
&lt;p&gt;表面上看，近些年穿越剧、宫廷戏、戏说历史的节目和书籍火爆，消费主义似乎救了历史一命，但其背后的悲凉似乎只有史学者自己明白。除了遥远的康熙雍正可以反复意淫，对于正在发现的历史，他们力不从心。只能看着高华渐行渐远的背影，一声叹息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;国际经济与贸易&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《2011年中国大学生就业报告》排出的本科就业十大红牌警告专业（失业量较大、就业率较低、薪资较低，为高失业风险型专业），国际经济与贸易专业赫然在列。&lt;/p&gt;
&lt;p&gt;早在建国初期我国部分高校就设置了国际贸易类专业，然而当时外贸在国民经济中所占比重很小，并未形成太大影响。1979年改革开放以后，国际经济、国际贸易、国际商务、工业外贸等专业迅速成为热门专业。1998年原国家教委将上述四个专业调整为国际经济与贸易专业。如此合并而来的专业，学习内容纷繁庞杂，包括经济学、统计学、政治经济学、西方经济学、国际经济学、会计学等等。2001年，中国加入WTO，国际经济与贸易专业一时大热，吸引大量的学生涌入。&lt;/p&gt;
&lt;p&gt;但这个专业并没有持续坚挺，一来从1997年东南亚金融危机到2008年的全球金融危机，世界经济并不景气；二来在20世纪90年代各高校纷纷跟风开设该专业，培养出来的学生量大质堪忧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公共事业管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“公管公管，东管管，西管管，‘大内总管’最后来个撒手不管。”在各大高校的网络论坛里，关于公共事业管理专业的质疑比比皆是。戏谑之言并非空穴来风，这个专业正处于“宽进窄出”的尴尬境地。&lt;/p&gt;
&lt;p&gt;1999年，东北大学和云南大学率先在全国招收公共事业管理专业的本科生。随后五年，开设该专业的院校更是由57所扩展到300多所。一时间，这个“舶来专业”在国内成了人人争抢的香饽饽，它也在众人的追捧中不断吸收进体育、文教、卫生、环保等专业知识，贪婪地成长。急速的膨胀往往意味着囫囵吞枣，在十多年的发展后，公共事业管理成了一个博而&lt;/p&gt;
&lt;p&gt;不精的专业“怪胎”。大学四年下来，学生们习得的管理知识只有半桶水，其他专业知识也只有半桶水，两者难以融为一桶受市场欢迎的“瓶装水”。更为严峻的是，教育部对该专业的人才培养目标是“培养能在公共事业单位从事管理工作的高级专门人才”。但是，在中国，要从事公共事业管理，那只有千军万马闯过公务员考试这条独木桥。因为除了进入官方体制，当下中国并没有多少NGO组织，更谈不上社会自治和公民社会，而公共事业管理专业的毕业生也只能沦为看守草料场的林冲――英雄无用武之地。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;社会学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“我学社会我贤惠，终身贡献居委会。”在2010年走红网络的日志《一条状态引发的专业爆炸》中，学生们如是吐糟社会学。与大多数研究上层建筑的人文类学科相似，当下的社会学专业已成为社会的“鸡肋”。&lt;/p&gt;
&lt;p&gt;因为其百家争鸣的理论学派和深入生活的田野调查，更因为它以解决社会问题为己任的普世情怀和现实意义，社会学曾一度受到年轻学子的青睐。然而因为种种缘故，直到1979年，中国的社会学才真正发展起来，至今在社会上的影响度和认知度也不高。更让人灰心丧气的是，目前国内的社会学正沦为闭门造车的“政治修辞学”――部分学者每天只会扛着远离社会学精神的口号满街乱窜，向国家骗取经费，然后足不出户就完成毫无现实意义的学术报告。&lt;/p&gt;
&lt;p&gt;在凤凰网制作的“中国大学现今十大最悲哀的学科”中，社会学榜上有名。学社会学的人，或是远离了社会，或是无法提出解决社会问题的方法，即使是提出来解决问题的办法，放到中国的环境里，这些方法也统统失效。这不得不说是整个学科的悲哀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;电子商务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近几年，网络交易的兴起使电子商务专业受到各大高校追捧。据统计，自2001年教育部首次批准13所高校开设电子商务专业以来，如今已有339所高校开设了该专业。目前该专业在校本科生已有7万名，专科生更达到20多万。不过按照人力资源专家预测，电子商务人才缺口在未来几年仍达到200万之多。&lt;/p&gt;
&lt;p&gt;但电子商务专业诞生之初，就存在争议。有学者认为其缺乏充分的实践资料和理论基础。事实证明，不少高校扯着“电子商务”大旗招生，但在课程上仅仅是计算机课程和经济管理课程的简单堆砌，导致学生“样样学，样样不精”。2008年教育部电子商务教学指导委员会提出“电子商务知识体系”模块，指导各个高校的电子商务课程建设，显然是在为之前的仓促埋单。2011年团购网站集体低迷，电子商务第三次浪潮已经到来，这一次动荡持续时长也将考验社会对电子商务专业的热情。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;英语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自2009年麦可思研究院撰写的《中国大学生就业报告》首次公布以来，英语本科专业连续三年都被列进就业红牌警告榜单。这在过去是不可想象的。自改革开放以来，中国与世界的交往越来越多，越来越频繁，这样的社会环境背景下，英语一直以强势面貌出现。其中有两个很明显的英语热潮，一是1990年前后自费留学教育的逐步开放，让考“TOEFL”和“GRE”成为当时潮流；二是2001年中国加入WTO前后的几年时间内，英语教育受到国家自上而下的推动，在民间受到欢迎。&lt;/p&gt;
&lt;p&gt;在中国，英语作为第一外语，获得了官方默许的肯定，但这种肯定已经脱离了英语作为一种交流工具的本质――想想看，即使你报读古汉语专业研究生也要通过英语的考试。另一方面，外资企业实行本土化策略，人民币升值抑制中小企业出口，社会对英语人才的需求缺乏增长点。当英语失去了职场“光环”后，人们开始怀疑英语教育在中国的模式是否恰当。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论是传统文学的衰颓，还是网络写作的风靡，似乎都与大学的中文系无关。北大中文系主任陈平原在回顾中文系的辉煌时曾说：19世纪以前的大学，人文学科是中心，30年前，文科考生首选中文系。但随着自然科学和社会科学的崛起，人文学科逐渐被边缘化。&lt;/p&gt;
&lt;p&gt;中文系教育本身也矛盾重重：号称“不培养作家”的中文系，以《文学史》、《文学理论》等为主要教材，将“文学”彻底知识化、模式化，并在脱离文学本身创造性和想象性的路上越走越远。很多学生毕业的时候，连基本的写作能力都不过关。忽视学生写作能力的培养、人文学科本身就业指向性不明显等诸多因素，直接导致了中文系毕业生在就业市场上缺乏竞争力。“就业面宽”的优势也随着专业细分、就业市场不断被分割而成了劣势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表演艺术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚刚过去的北影招生考试成为媒体和网络热点，一边聚起想看帅哥美女的闲人，一边却牵动着超过2.5万个考生家庭的心。其中，报考表演学院的有6186人，最终录取的只有85人，虽然这已经是大手笔扩招之后的人数，却仍有九成以上的人成了“炮灰”。&lt;/p&gt;
&lt;p&gt;“艺考热”的背后折射出不少隐忧：且不论这九成“炮灰”，即使是那幸运的1%，也未必能如赵薇、章子怡等成为“明星”，不少毕业生都迫于生计而选择另谋生路。高校扩招、艺术院校增多、剧院企业化等诸多因素，让就业形势变得更加严峻。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>KindEditor使用</title>
        <link href="http://liyouhai.com/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/kindeditor%25e4%25bd%25bf%25e7%2594%25a8.html"/>
        <updated>2012-03-04T04:03:47+08:00</updated>
        <id>http://liyouhai.com//%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/kindeditor%e4%bd%bf%e7%94%a8</id>
        <content type="html">&lt;div&gt;&lt;strong&gt;一.下载&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;    下载地址:&lt;a href=&quot;http://www.kindsoft.net/&quot;&gt;http://www.kindsoft.net/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;二.使用&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;    引入相应的js&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;script charset=&quot;utf-8&quot; src=&quot;/editor/kindeditor.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script charset=&quot;utf-8&quot; src=&quot;/editor/lang/zh_CN.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;   设置textarea&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;textarea id=&quot;editor_id&quot; name=&quot;content&quot; style=&quot;width:700px;height:300px;&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;  创建KindEditor&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;             &lt;/strong&gt;  var editor;&lt;/div&gt;
&lt;div&gt;        KindEditor.ready(function(K) {&lt;/div&gt;
&lt;div&gt;editor = K.create('#editor_id');&lt;/div&gt;
&lt;div&gt;});&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;打开页面后，如下图所示：&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;assets/ScreenClip.png&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;三.取值&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;    一般来说，如上的方法已经可以使用了，只需要填写内容，提交form就可以了。但是有时需要对textarea的内容进行限制，比如限制字数，而从textarea中取得的值是包括html，影响了数字计算，所以需要使用KindEditor提供的方法来手动取得值。&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;editor.html():取得KindEditor中的html，如果括号内有值，则是设置KindEditor的值（html），与jquery的val很相似&lt;/div&gt;
&lt;div&gt;editor.text():取得KindEditor中的纯文本，如果括号内有值，则是设置KindEditor的值(文本)，与jquery的val很相似&lt;/div&gt;
&lt;div&gt;editor.isEmpty()：判断KindEditor是否为空&lt;/div&gt;
&lt;div&gt;editor.selectedHtml():取得KindEditor中选中的html&lt;/div&gt;
&lt;div&gt;editor.insertHtml():插入html&lt;/div&gt;
&lt;div&gt;editor.appendHtml():追加html，好像和insertHtml没有什么区别&lt;/div&gt;
&lt;div&gt;editor.sync():将KindEditor中的内容同步到textarea中，此操作，在form提交之前会自动执行，有些特殊情况可能需要手动执行&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;四.初始化参数&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;    在上面的创建KindEditor语句中，可以设置一些参数，定义KindEditor的初始化.&lt;/div&gt;
&lt;div&gt;    例如：KindEdior上的菜单图标太多了，我想去掉一些，那么你可以设置items参数，如下&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;var editor;&lt;/div&gt;
&lt;div&gt;KindEditor.ready(function(K) {&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;editor = K.create('#editor_id','&lt;/div&gt;
&lt;div&gt;          items:[&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008000;&quot;&gt;'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color: #008000;&quot;&gt;                        'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'insertorderedlist',&lt;br /&gt;
'insertunorderedlist', '|', 'emoticons', 'image', 'link'&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;]&lt;/div&gt;
&lt;div&gt;     ');&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;});&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;    效果图如下：&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;assets/0848cb1fb049c9574a1184da3966ee59&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;items对应表:&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;45%&quot; /&gt;
&lt;col width=&quot;55%&quot; /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;
&lt;td&gt;source&lt;/td&gt;
&lt;td&gt;HTML代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preview&lt;/td&gt;
&lt;td&gt;预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undo&lt;/td&gt;
&lt;td&gt;后退&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redo&lt;/td&gt;
&lt;td&gt;前进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cut&lt;/td&gt;
&lt;td&gt;剪切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;copy&lt;/td&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paste&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;plainpaste&lt;/td&gt;
&lt;td&gt;粘贴为无格式文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wordpaste&lt;/td&gt;
&lt;td&gt;从Word粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selectall&lt;/td&gt;
&lt;td&gt;全选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifyleft&lt;/td&gt;
&lt;td&gt;左对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifycenter&lt;/td&gt;
&lt;td&gt;居中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifyright&lt;/td&gt;
&lt;td&gt;右对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifyfull&lt;/td&gt;
&lt;td&gt;两端对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insertorderedlist&lt;/td&gt;
&lt;td&gt;编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insertunorderedlist&lt;/td&gt;
&lt;td&gt;项目符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indent&lt;/td&gt;
&lt;td&gt;增加缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outdent&lt;/td&gt;
&lt;td&gt;减少缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subscript&lt;/td&gt;
&lt;td&gt;下标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;superscript&lt;/td&gt;
&lt;td&gt;上标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;formatblock&lt;/td&gt;
&lt;td&gt;段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fontname&lt;/td&gt;
&lt;td&gt;字体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fontsize&lt;/td&gt;
&lt;td&gt;文字大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forecolor&lt;/td&gt;
&lt;td&gt;文字颜色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hilitecolor&lt;/td&gt;
&lt;td&gt;文字背景&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;粗体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;italic&lt;/td&gt;
&lt;td&gt;斜体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;underline&lt;/td&gt;
&lt;td&gt;下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strikethrough&lt;/td&gt;
&lt;td&gt;删除线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;removeformat&lt;/td&gt;
&lt;td&gt;删除格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td&gt;图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flash&lt;/td&gt;
&lt;td&gt;Flash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;media&lt;/td&gt;
&lt;td&gt;视音频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;表格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hr&lt;/td&gt;
&lt;td&gt;插入横线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emoticons&lt;/td&gt;
&lt;td&gt;插入表情&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link&lt;/td&gt;
&lt;td&gt;超级链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unlink&lt;/td&gt;
&lt;td&gt;取消超级链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fullscreen&lt;/td&gt;
&lt;td&gt;全屏显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;about&lt;/td&gt;
&lt;td&gt;关于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print&lt;/td&gt;
&lt;td&gt;打印&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;插入程序代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;td&gt;地图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lineheight&lt;/td&gt;
&lt;td&gt;行距&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clearhtml&lt;/td&gt;
&lt;td&gt;清理HTML代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pagebreak&lt;/td&gt;
&lt;td&gt;插入分页符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quickformat&lt;/td&gt;
&lt;td&gt;一键排版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insertfile&lt;/td&gt;
&lt;td&gt;插入文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template&lt;/td&gt;
&lt;td&gt;插入模板&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;详细的初始化参数请参考官方文档：&lt;a href=&quot;http://www.kindsoft.net/docs/option.html&quot;&gt;http://www.kindsoft.net/docs/option.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;五.KindEditor样式&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;     &lt;/strong&gt;KindEditor使用css来控制样式，所以要修改KindEditor的样式，只需要覆盖原来定义的样式即可。&lt;/div&gt;
&lt;div&gt;     在default.css后面引入自己的css就可以了。&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/editor/themes/default/default.css&quot; /&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/editor/themes/example1/example1.css&quot; /&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;六.上传文件&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;    KindEditor使用commons-fileupload来上传文件。KindEditor只需要在初始化时进行设置即可，后台程序参考commons-fileupload相应程序.&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;KindEditor.ready(function(K) {        
        K.create('#textarea_id', {                
              uploadJson : 'url',                                   //你要提交到的url，给后台程序处理                
              fileManagerJson : 'url',                       //指定浏览远程图片的服务器端程序          
              allowFileManager : true        
        });
});&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;七.多语言&lt;/div&gt;
&lt;div&gt;    设置KindEditor的语言只需要设置初始化参数中的langType,不过同时需要添加相应的js&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;vareditor;&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;KindEditor.ready(function(K){
       editor=K.create('#editor_id',{&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;          langType:'en'&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;       });&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;});&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;en.js&lt;/div&gt;
&lt;div&gt;/*******************************************************************************&lt;br /&gt;
* KindEditor - WYSIWYG HTML Editor for Internet&lt;br /&gt;
* Copyright (C) 2006-2011 kindsoft.net&lt;br /&gt;
*&lt;br /&gt;
* @author Roddy &amp;lt;luolonghao@gmail.com&amp;gt;&lt;br /&gt;
* @site http://www.kindsoft.net/&lt;br /&gt;
* @licence http://www.kindsoft.net/license.php&lt;br /&gt;
*******************************************************************************/&lt;/p&gt;
&lt;p&gt;KindEditor.lang({&lt;br /&gt;
source : 'Source',&lt;br /&gt;
preview : 'Preview',&lt;br /&gt;
undo : 'Undo(Ctrl+Z)',&lt;br /&gt;
redo : 'Redo(Ctrl+Y)',&lt;br /&gt;
cut : 'Cut(Ctrl+X)',&lt;br /&gt;
copy : 'Copy(Ctrl+C)',&lt;br /&gt;
paste : 'Paste(Ctrl+V)',&lt;br /&gt;
plainpaste : 'Paste as plain text',&lt;br /&gt;
wordpaste : 'Paste from Word',&lt;br /&gt;
selectall : 'Select all',&lt;br /&gt;
justifyleft : 'Align left',&lt;br /&gt;
justifycenter : 'Align center',&lt;br /&gt;
justifyright : 'Align right',&lt;br /&gt;
justifyfull : 'Align full',&lt;br /&gt;
insertorderedlist : 'Ordered list',&lt;br /&gt;
insertunorderedlist : 'Unordered list',&lt;br /&gt;
indent : 'Increase indent',&lt;br /&gt;
outdent : 'Decrease indent',&lt;br /&gt;
subscript : 'Subscript',&lt;br /&gt;
superscript : 'Superscript',&lt;br /&gt;
formatblock : 'Paragraph format',&lt;br /&gt;
fontname : 'Font family',&lt;br /&gt;
fontsize : 'Font size',&lt;br /&gt;
forecolor : 'Text color',&lt;br /&gt;
hilitecolor : 'Highlight color',&lt;br /&gt;
bold : 'Bold(Ctrl+B)',&lt;br /&gt;
italic : 'Italic(Ctrl+I)',&lt;br /&gt;
underline : 'Underline(Ctrl+U)',&lt;br /&gt;
strikethrough : 'Strikethrough',&lt;br /&gt;
removeformat : 'Remove format',&lt;br /&gt;
image : 'Image',&lt;br /&gt;
flash : 'Flash',&lt;br /&gt;
media : 'Embeded media',&lt;br /&gt;
table : 'Table',&lt;br /&gt;
tablecell : 'Cell',&lt;br /&gt;
hr : 'Insert horizontal line',&lt;br /&gt;
emoticons : 'Insert emoticon',&lt;br /&gt;
link : 'Link',&lt;br /&gt;
unlink : 'Unlink',&lt;br /&gt;
fullscreen : 'Toggle fullscreen mode(Esc)',&lt;br /&gt;
about : 'About',&lt;br /&gt;
print : 'Print',&lt;br /&gt;
filemanager : 'File Manager',&lt;br /&gt;
code : 'Insert code',&lt;br /&gt;
map : 'Google Maps',&lt;br /&gt;
lineheight : 'Line height',&lt;br /&gt;
clearhtml : 'Clear HTML code',&lt;br /&gt;
pagebreak : 'Insert Page Break',&lt;br /&gt;
quickformat : 'Quick Format',&lt;br /&gt;
insertfile : 'Insert file',&lt;br /&gt;
template : 'Insert Template',&lt;br /&gt;
anchor : 'Anchor',&lt;br /&gt;
yes : 'OK',&lt;br /&gt;
no : 'Cancel',&lt;br /&gt;
close : 'Close',&lt;br /&gt;
editImage : 'Image properties',&lt;br /&gt;
deleteImage : 'Delete image',&lt;br /&gt;
editFlash : 'Flash properties',&lt;br /&gt;
deleteFlash : 'Delete flash',&lt;br /&gt;
editMedia : 'Media properties',&lt;br /&gt;
deleteMedia : 'Delete media',&lt;br /&gt;
editLink : 'Link properties',&lt;br /&gt;
deleteLink : 'Unlink',&lt;br /&gt;
tableprop : 'Table properties',&lt;br /&gt;
tablecellprop : 'Cell properties',&lt;br /&gt;
tableinsert : 'Insert table',&lt;br /&gt;
tabledelete : 'Delete table',&lt;br /&gt;
tablecolinsertleft : 'Insert column left',&lt;br /&gt;
tablecolinsertright : 'Insert column right',&lt;br /&gt;
tablerowinsertabove : 'Insert row above',&lt;br /&gt;
tablerowinsertbelow : 'Insert row below',&lt;br /&gt;
tablerowmerge : 'Merge down',&lt;br /&gt;
tablecolmerge : 'Merge right',&lt;br /&gt;
tablerowsplit : 'Split row',&lt;br /&gt;
tablecolsplit : 'Split column',&lt;br /&gt;
tablecoldelete : 'Delete column',&lt;br /&gt;
tablerowdelete : 'Delete row',&lt;br /&gt;
noColor : 'Default',&lt;br /&gt;
invalidImg : &quot;Please type valid URL.\nAllowed file extension: jpg,gif,bmp,png&quot;,&lt;br /&gt;
invalidMedia : &quot;Please type valid URL.\nAllowed file extension: swf,flv,mp3,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb&quot;,&lt;br /&gt;
invalidWidth : &quot;The width must be number.&quot;,&lt;br /&gt;
invalidHeight : &quot;The height must be number.&quot;,&lt;br /&gt;
invalidBorder : &quot;The border must be number.&quot;,&lt;br /&gt;
invalidUrl : &quot;Please type valid URL.&quot;,&lt;br /&gt;
invalidRows : 'Invalid rows.',&lt;br /&gt;
invalidCols : 'Invalid columns.',&lt;br /&gt;
invalidPadding : 'The padding must be number.',&lt;br /&gt;
invalidSpacing : 'The spacing must be number.',&lt;br /&gt;
invalidJson : 'Invalid JSON string.',&lt;br /&gt;
uploadSuccess : 'Upload success.',&lt;br /&gt;
cutError : 'Currently not supported by your browser, use keyboard shortcut(Ctrl+X) instead.',&lt;br /&gt;
copyError : 'Currently not supported by your browser, use keyboard shortcut(Ctrl+C) instead.',&lt;br /&gt;
pasteError : 'Currently not supported by your browser, use keyboard shortcut(Ctrl+V) instead.',&lt;br /&gt;
ajaxLoading : 'Loading ...',&lt;br /&gt;
uploadLoading : 'Uploading ...',&lt;br /&gt;
uploadError : 'Upload Error',&lt;br /&gt;
'plainpaste.comment' : 'Use keyboard shortcut(Ctrl+V) to paste the text into the window.',&lt;br /&gt;
'wordpaste.comment' : 'Use keyboard shortcut(Ctrl+V) to paste the text into the window.',&lt;br /&gt;
'link.url' : 'URL',&lt;br /&gt;
'link.linkType' : 'Target',&lt;br /&gt;
'link.newWindow' : 'New window',&lt;br /&gt;
'link.selfWindow' : 'Same window',&lt;br /&gt;
'flash.url' : 'URL',&lt;br /&gt;
'flash.width' : 'Width',&lt;br /&gt;
'flash.height' : 'Height',&lt;br /&gt;
'flash.upload' : 'Upload',&lt;br /&gt;
'flash.viewServer' : 'Browse',&lt;br /&gt;
'media.url' : 'URL',&lt;br /&gt;
'media.width' : 'Width',&lt;br /&gt;
'media.height' : 'Height',&lt;br /&gt;
'media.autostart' : 'Auto start',&lt;br /&gt;
'media.upload' : 'Upload',&lt;br /&gt;
'media.viewServer' : 'Browse',&lt;br /&gt;
'image.remoteImage' : 'Insert URL',&lt;br /&gt;
'image.localImage' : 'Upload',&lt;br /&gt;
'image.remoteUrl' : 'URL',&lt;br /&gt;
'image.localUrl' : 'File',&lt;br /&gt;
'image.size' : 'Size',&lt;br /&gt;
'image.width' : 'Width',&lt;br /&gt;
'image.height' : 'Height',&lt;br /&gt;
'image.resetSize' : 'Reset dimensions',&lt;br /&gt;
'image.align' : 'Align',&lt;br /&gt;
'image.defaultAlign' : 'Default',&lt;br /&gt;
'image.leftAlign' : 'Left',&lt;br /&gt;
'image.rightAlign' : 'Right',&lt;br /&gt;
'image.imgTitle' : 'Title',&lt;br /&gt;
'image.viewServer' : 'Browse',&lt;br /&gt;
'filemanager.emptyFolder' : 'Blank',&lt;br /&gt;
'filemanager.moveup' : 'Parent folder',&lt;br /&gt;
'filemanager.viewType' : 'Display: ',&lt;br /&gt;
'filemanager.viewImage' : 'Thumbnails',&lt;br /&gt;
'filemanager.listImage' : 'List',&lt;br /&gt;
'filemanager.orderType' : 'Sorting: ',&lt;br /&gt;
'filemanager.fileName' : 'By name',&lt;br /&gt;
'filemanager.fileSize' : 'By size',&lt;br /&gt;
'filemanager.fileType' : 'By type',&lt;br /&gt;
'insertfile.url' : 'URL',&lt;br /&gt;
'insertfile.title' : 'Title',&lt;br /&gt;
'insertfile.upload' : 'Upload',&lt;br /&gt;
'insertfile.viewServer' : 'Browse',&lt;br /&gt;
'table.cells' : 'Cells',&lt;br /&gt;
'table.rows' : 'Rows',&lt;br /&gt;
'table.cols' : 'Columns',&lt;br /&gt;
'table.size' : 'Dimensions',&lt;br /&gt;
'table.width' : 'Width',&lt;br /&gt;
'table.height' : 'Height',&lt;br /&gt;
'table.percent' : '%',&lt;br /&gt;
'table.px' : 'px',&lt;br /&gt;
'table.space' : 'Space',&lt;br /&gt;
'table.padding' : 'Padding',&lt;br /&gt;
'table.spacing' : 'Spacing',&lt;br /&gt;
'table.align' : 'Align',&lt;br /&gt;
'table.textAlign' : 'Horizontal',&lt;br /&gt;
'table.verticalAlign' : 'Vertical',&lt;br /&gt;
'table.alignDefault' : 'Default',&lt;br /&gt;
'table.alignLeft' : 'Left',&lt;br /&gt;
'table.alignCenter' : 'Center',&lt;br /&gt;
'table.alignRight' : 'Right',&lt;br /&gt;
'table.alignTop' : 'Top',&lt;br /&gt;
'table.alignMiddle' : 'Middle',&lt;br /&gt;
'table.alignBottom' : 'Bottom',&lt;br /&gt;
'table.alignBaseline' : 'Baseline',&lt;br /&gt;
'table.border' : 'Border',&lt;br /&gt;
'table.borderWidth' : 'Width',&lt;br /&gt;
'table.borderColor' : 'Color',&lt;br /&gt;
'table.backgroundColor' : 'Background',&lt;br /&gt;
'map.address' : 'Address: ',&lt;br /&gt;
'map.search' : 'Search',&lt;br /&gt;
'anchor.name' : 'Anchor name',&lt;br /&gt;
'formatblock.formatBlock' : {&lt;br /&gt;
h1 : 'Heading 1',&lt;br /&gt;
h2 : 'Heading 2',&lt;br /&gt;
h3 : 'Heading 3',&lt;br /&gt;
h4 : 'Heading 4',&lt;br /&gt;
p : 'Normal'&lt;br /&gt;
},&lt;br /&gt;
'fontname.fontName' : {&lt;br /&gt;
'Arial' : 'Arial',&lt;br /&gt;
'Arial Black' : 'Arial Black',&lt;br /&gt;
'Comic Sans MS' : 'Comic Sans MS',&lt;br /&gt;
'Courier New' : 'Courier New',&lt;br /&gt;
'Garamond' : 'Garamond',&lt;br /&gt;
'Georgia' : 'Georgia',&lt;br /&gt;
'Tahoma' : 'Tahoma',&lt;br /&gt;
'Times New Roman' : 'Times New Roman',&lt;br /&gt;
'Trebuchet MS' : 'Trebuchet MS',&lt;br /&gt;
'Verdana' : 'Verdana'&lt;br /&gt;
},&lt;br /&gt;
'lineheight.lineHeight' : [&lt;br /&gt;
{'1' : 'Line height 1'},&lt;br /&gt;
{'1.5' : 'Line height 1.5'},&lt;br /&gt;
{'2' : 'Line height 2'},&lt;br /&gt;
{'2.5' : 'Line height 2.5'},&lt;br /&gt;
{'3' : 'Line height 3'}&lt;br /&gt;
],&lt;br /&gt;
'template.selectTemplate' : 'Template',&lt;br /&gt;
'template.replaceContent' : 'Replace current content',&lt;br /&gt;
'template.fileList' : {&lt;br /&gt;
'1.html' : 'Image and Text',&lt;br /&gt;
'2.html' : 'Table',&lt;br /&gt;
'3.html' : 'List'&lt;br /&gt;
}&lt;br /&gt;
}, 'en');&lt;/p&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div&gt;&lt;strong&gt;一.下载&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;    下载地址:&lt;a href=&quot;http://www.kindsoft.net/&quot;&gt;http://www.kindsoft.net/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;二.使用&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;    引入相应的js&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;script charset=&quot;utf-8&quot; src=&quot;/editor/kindeditor.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script charset=&quot;utf-8&quot; src=&quot;/editor/lang/zh_CN.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;   设置textarea&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;textarea id=&quot;editor_id&quot; name=&quot;content&quot; style=&quot;width:700px;height:300px;&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;  创建KindEditor&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;             &lt;/strong&gt;  var editor;&lt;/div&gt;
&lt;div&gt;        KindEditor.ready(function(K) {&lt;/div&gt;
&lt;div&gt;editor = K.create('#editor_id');&lt;/div&gt;
&lt;div&gt;});&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;打开页面后，如下图所示：&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;assets/ScreenClip.png&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;三.取值&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;    一般来说，如上的方法已经可以使用了，只需要填写内容，提交form就可以了。但是有时需要对textarea的内容进行限制，比如限制字数，而从textarea中取得的值是包括html，影响了数字计算，所以需要使用KindEditor提供的方法来手动取得值。&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;editor.html():取得KindEditor中的html，如果括号内有值，则是设置KindEditor的值（html），与jquery的val很相似&lt;/div&gt;
&lt;div&gt;editor.text():取得KindEditor中的纯文本，如果括号内有值，则是设置KindEditor的值(文本)，与jquery的val很相似&lt;/div&gt;
&lt;div&gt;editor.isEmpty()：判断KindEditor是否为空&lt;/div&gt;
&lt;div&gt;editor.selectedHtml():取得KindEditor中选中的html&lt;/div&gt;
&lt;div&gt;editor.insertHtml():插入html&lt;/div&gt;
&lt;div&gt;editor.appendHtml():追加html，好像和insertHtml没有什么区别&lt;/div&gt;
&lt;div&gt;editor.sync():将KindEditor中的内容同步到textarea中，此操作，在form提交之前会自动执行，有些特殊情况可能需要手动执行&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;四.初始化参数&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;    在上面的创建KindEditor语句中，可以设置一些参数，定义KindEditor的初始化.&lt;/div&gt;
&lt;div&gt;    例如：KindEdior上的菜单图标太多了，我想去掉一些，那么你可以设置items参数，如下&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;var editor;&lt;/div&gt;
&lt;div&gt;KindEditor.ready(function(K) {&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;editor = K.create('#editor_id','&lt;/div&gt;
&lt;div&gt;          items:[&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008000;&quot;&gt;'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color: #008000;&quot;&gt;                        'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'insertorderedlist',&lt;br /&gt;
'insertunorderedlist', '|', 'emoticons', 'image', 'link'&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;]&lt;/div&gt;
&lt;div&gt;     ');&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;});&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;    效果图如下：&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;assets/0848cb1fb049c9574a1184da3966ee59&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;items对应表:&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;45%&quot; /&gt;
&lt;col width=&quot;55%&quot; /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;
&lt;td&gt;source&lt;/td&gt;
&lt;td&gt;HTML代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preview&lt;/td&gt;
&lt;td&gt;预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undo&lt;/td&gt;
&lt;td&gt;后退&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redo&lt;/td&gt;
&lt;td&gt;前进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cut&lt;/td&gt;
&lt;td&gt;剪切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;copy&lt;/td&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paste&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;plainpaste&lt;/td&gt;
&lt;td&gt;粘贴为无格式文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wordpaste&lt;/td&gt;
&lt;td&gt;从Word粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selectall&lt;/td&gt;
&lt;td&gt;全选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifyleft&lt;/td&gt;
&lt;td&gt;左对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifycenter&lt;/td&gt;
&lt;td&gt;居中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifyright&lt;/td&gt;
&lt;td&gt;右对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;justifyfull&lt;/td&gt;
&lt;td&gt;两端对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insertorderedlist&lt;/td&gt;
&lt;td&gt;编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insertunorderedlist&lt;/td&gt;
&lt;td&gt;项目符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indent&lt;/td&gt;
&lt;td&gt;增加缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outdent&lt;/td&gt;
&lt;td&gt;减少缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subscript&lt;/td&gt;
&lt;td&gt;下标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;superscript&lt;/td&gt;
&lt;td&gt;上标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;formatblock&lt;/td&gt;
&lt;td&gt;段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fontname&lt;/td&gt;
&lt;td&gt;字体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fontsize&lt;/td&gt;
&lt;td&gt;文字大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forecolor&lt;/td&gt;
&lt;td&gt;文字颜色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hilitecolor&lt;/td&gt;
&lt;td&gt;文字背景&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;粗体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;italic&lt;/td&gt;
&lt;td&gt;斜体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;underline&lt;/td&gt;
&lt;td&gt;下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strikethrough&lt;/td&gt;
&lt;td&gt;删除线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;removeformat&lt;/td&gt;
&lt;td&gt;删除格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td&gt;图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flash&lt;/td&gt;
&lt;td&gt;Flash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;media&lt;/td&gt;
&lt;td&gt;视音频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;表格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hr&lt;/td&gt;
&lt;td&gt;插入横线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emoticons&lt;/td&gt;
&lt;td&gt;插入表情&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link&lt;/td&gt;
&lt;td&gt;超级链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unlink&lt;/td&gt;
&lt;td&gt;取消超级链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fullscreen&lt;/td&gt;
&lt;td&gt;全屏显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;about&lt;/td&gt;
&lt;td&gt;关于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print&lt;/td&gt;
&lt;td&gt;打印&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;插入程序代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;td&gt;地图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lineheight&lt;/td&gt;
&lt;td&gt;行距&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clearhtml&lt;/td&gt;
&lt;td&gt;清理HTML代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pagebreak&lt;/td&gt;
&lt;td&gt;插入分页符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quickformat&lt;/td&gt;
&lt;td&gt;一键排版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insertfile&lt;/td&gt;
&lt;td&gt;插入文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template&lt;/td&gt;
&lt;td&gt;插入模板&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;详细的初始化参数请参考官方文档：&lt;a href=&quot;http://www.kindsoft.net/docs/option.html&quot;&gt;http://www.kindsoft.net/docs/option.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;五.KindEditor样式&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;     &lt;/strong&gt;KindEditor使用css来控制样式，所以要修改KindEditor的样式，只需要覆盖原来定义的样式即可。&lt;/div&gt;
&lt;div&gt;     在default.css后面引入自己的css就可以了。&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/editor/themes/default/default.css&quot; /&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/editor/themes/example1/example1.css&quot; /&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;六.上传文件&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;    KindEditor使用commons-fileupload来上传文件。KindEditor只需要在初始化时进行设置即可，后台程序参考commons-fileupload相应程序.&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;KindEditor.ready(function(K) {        
        K.create('#textarea_id', {                
              uploadJson : 'url',                                   //你要提交到的url，给后台程序处理                
              fileManagerJson : 'url',                       //指定浏览远程图片的服务器端程序          
              allowFileManager : true        
        });
});&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;七.多语言&lt;/div&gt;
&lt;div&gt;    设置KindEditor的语言只需要设置初始化参数中的langType,不过同时需要添加相应的js&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;vareditor;&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;KindEditor.ready(function(K){
       editor=K.create('#editor_id',{&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;          langType:'en'&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;       });&lt;span style=&quot;color: #3e4349;&quot;&gt; 
&lt;/span&gt;});&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;en.js&lt;/div&gt;
&lt;div&gt;/*******************************************************************************&lt;br /&gt;
* KindEditor - WYSIWYG HTML Editor for Internet&lt;br /&gt;
* Copyright (C) 2006-2011 kindsoft.net&lt;br /&gt;
*&lt;br /&gt;
* @author Roddy &amp;lt;luolonghao@gmail.com&amp;gt;&lt;br /&gt;
* @site http://www.kindsoft.net/&lt;br /&gt;
* @licence http://www.kindsoft.net/license.php&lt;br /&gt;
*******************************************************************************/&lt;/p&gt;
&lt;p&gt;KindEditor.lang({&lt;br /&gt;
source : 'Source',&lt;br /&gt;
preview : 'Preview',&lt;br /&gt;
undo : 'Undo(Ctrl+Z)',&lt;br /&gt;
redo : 'Redo(Ctrl+Y)',&lt;br /&gt;
cut : 'Cut(Ctrl+X)',&lt;br /&gt;
copy : 'Copy(Ctrl+C)',&lt;br /&gt;
paste : 'Paste(Ctrl+V)',&lt;br /&gt;
plainpaste : 'Paste as plain text',&lt;br /&gt;
wordpaste : 'Paste from Word',&lt;br /&gt;
selectall : 'Select all',&lt;br /&gt;
justifyleft : 'Align left',&lt;br /&gt;
justifycenter : 'Align center',&lt;br /&gt;
justifyright : 'Align right',&lt;br /&gt;
justifyfull : 'Align full',&lt;br /&gt;
insertorderedlist : 'Ordered list',&lt;br /&gt;
insertunorderedlist : 'Unordered list',&lt;br /&gt;
indent : 'Increase indent',&lt;br /&gt;
outdent : 'Decrease indent',&lt;br /&gt;
subscript : 'Subscript',&lt;br /&gt;
superscript : 'Superscript',&lt;br /&gt;
formatblock : 'Paragraph format',&lt;br /&gt;
fontname : 'Font family',&lt;br /&gt;
fontsize : 'Font size',&lt;br /&gt;
forecolor : 'Text color',&lt;br /&gt;
hilitecolor : 'Highlight color',&lt;br /&gt;
bold : 'Bold(Ctrl+B)',&lt;br /&gt;
italic : 'Italic(Ctrl+I)',&lt;br /&gt;
underline : 'Underline(Ctrl+U)',&lt;br /&gt;
strikethrough : 'Strikethrough',&lt;br /&gt;
removeformat : 'Remove format',&lt;br /&gt;
image : 'Image',&lt;br /&gt;
flash : 'Flash',&lt;br /&gt;
media : 'Embeded media',&lt;br /&gt;
table : 'Table',&lt;br /&gt;
tablecell : 'Cell',&lt;br /&gt;
hr : 'Insert horizontal line',&lt;br /&gt;
emoticons : 'Insert emoticon',&lt;br /&gt;
link : 'Link',&lt;br /&gt;
unlink : 'Unlink',&lt;br /&gt;
fullscreen : 'Toggle fullscreen mode(Esc)',&lt;br /&gt;
about : 'About',&lt;br /&gt;
print : 'Print',&lt;br /&gt;
filemanager : 'File Manager',&lt;br /&gt;
code : 'Insert code',&lt;br /&gt;
map : 'Google Maps',&lt;br /&gt;
lineheight : 'Line height',&lt;br /&gt;
clearhtml : 'Clear HTML code',&lt;br /&gt;
pagebreak : 'Insert Page Break',&lt;br /&gt;
quickformat : 'Quick Format',&lt;br /&gt;
insertfile : 'Insert file',&lt;br /&gt;
template : 'Insert Template',&lt;br /&gt;
anchor : 'Anchor',&lt;br /&gt;
yes : 'OK',&lt;br /&gt;
no : 'Cancel',&lt;br /&gt;
close : 'Close',&lt;br /&gt;
editImage : 'Image properties',&lt;br /&gt;
deleteImage : 'Delete image',&lt;br /&gt;
editFlash : 'Flash properties',&lt;br /&gt;
deleteFlash : 'Delete flash',&lt;br /&gt;
editMedia : 'Media properties',&lt;br /&gt;
deleteMedia : 'Delete media',&lt;br /&gt;
editLink : 'Link properties',&lt;br /&gt;
deleteLink : 'Unlink',&lt;br /&gt;
tableprop : 'Table properties',&lt;br /&gt;
tablecellprop : 'Cell properties',&lt;br /&gt;
tableinsert : 'Insert table',&lt;br /&gt;
tabledelete : 'Delete table',&lt;br /&gt;
tablecolinsertleft : 'Insert column left',&lt;br /&gt;
tablecolinsertright : 'Insert column right',&lt;br /&gt;
tablerowinsertabove : 'Insert row above',&lt;br /&gt;
tablerowinsertbelow : 'Insert row below',&lt;br /&gt;
tablerowmerge : 'Merge down',&lt;br /&gt;
tablecolmerge : 'Merge right',&lt;br /&gt;
tablerowsplit : 'Split row',&lt;br /&gt;
tablecolsplit : 'Split column',&lt;br /&gt;
tablecoldelete : 'Delete column',&lt;br /&gt;
tablerowdelete : 'Delete row',&lt;br /&gt;
noColor : 'Default',&lt;br /&gt;
invalidImg : &quot;Please type valid URL.\nAllowed file extension: jpg,gif,bmp,png&quot;,&lt;br /&gt;
invalidMedia : &quot;Please type valid URL.\nAllowed file extension: swf,flv,mp3,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb&quot;,&lt;br /&gt;
invalidWidth : &quot;The width must be number.&quot;,&lt;br /&gt;
invalidHeight : &quot;The height must be number.&quot;,&lt;br /&gt;
invalidBorder : &quot;The border must be number.&quot;,&lt;br /&gt;
invalidUrl : &quot;Please type valid URL.&quot;,&lt;br /&gt;
invalidRows : 'Invalid rows.',&lt;br /&gt;
invalidCols : 'Invalid columns.',&lt;br /&gt;
invalidPadding : 'The padding must be number.',&lt;br /&gt;
invalidSpacing : 'The spacing must be number.',&lt;br /&gt;
invalidJson : 'Invalid JSON string.',&lt;br /&gt;
uploadSuccess : 'Upload success.',&lt;br /&gt;
cutError : 'Currently not supported by your browser, use keyboard shortcut(Ctrl+X) instead.',&lt;br /&gt;
copyError : 'Currently not supported by your browser, use keyboard shortcut(Ctrl+C) instead.',&lt;br /&gt;
pasteError : 'Currently not supported by your browser, use keyboard shortcut(Ctrl+V) instead.',&lt;br /&gt;
ajaxLoading : 'Loading ...',&lt;br /&gt;
uploadLoading : 'Uploading ...',&lt;br /&gt;
uploadError : 'Upload Error',&lt;br /&gt;
'plainpaste.comment' : 'Use keyboard shortcut(Ctrl+V) to paste the text into the window.',&lt;br /&gt;
'wordpaste.comment' : 'Use keyboard shortcut(Ctrl+V) to paste the text into the window.',&lt;br /&gt;
'link.url' : 'URL',&lt;br /&gt;
'link.linkType' : 'Target',&lt;br /&gt;
'link.newWindow' : 'New window',&lt;br /&gt;
'link.selfWindow' : 'Same window',&lt;br /&gt;
'flash.url' : 'URL',&lt;br /&gt;
'flash.width' : 'Width',&lt;br /&gt;
'flash.height' : 'Height',&lt;br /&gt;
'flash.upload' : 'Upload',&lt;br /&gt;
'flash.viewServer' : 'Browse',&lt;br /&gt;
'media.url' : 'URL',&lt;br /&gt;
'media.width' : 'Width',&lt;br /&gt;
'media.height' : 'Height',&lt;br /&gt;
'media.autostart' : 'Auto start',&lt;br /&gt;
'media.upload' : 'Upload',&lt;br /&gt;
'media.viewServer' : 'Browse',&lt;br /&gt;
'image.remoteImage' : 'Insert URL',&lt;br /&gt;
'image.localImage' : 'Upload',&lt;br /&gt;
'image.remoteUrl' : 'URL',&lt;br /&gt;
'image.localUrl' : 'File',&lt;br /&gt;
'image.size' : 'Size',&lt;br /&gt;
'image.width' : 'Width',&lt;br /&gt;
'image.height' : 'Height',&lt;br /&gt;
'image.resetSize' : 'Reset dimensions',&lt;br /&gt;
'image.align' : 'Align',&lt;br /&gt;
'image.defaultAlign' : 'Default',&lt;br /&gt;
'image.leftAlign' : 'Left',&lt;br /&gt;
'image.rightAlign' : 'Right',&lt;br /&gt;
'image.imgTitle' : 'Title',&lt;br /&gt;
'image.viewServer' : 'Browse',&lt;br /&gt;
'filemanager.emptyFolder' : 'Blank',&lt;br /&gt;
'filemanager.moveup' : 'Parent folder',&lt;br /&gt;
'filemanager.viewType' : 'Display: ',&lt;br /&gt;
'filemanager.viewImage' : 'Thumbnails',&lt;br /&gt;
'filemanager.listImage' : 'List',&lt;br /&gt;
'filemanager.orderType' : 'Sorting: ',&lt;br /&gt;
'filemanager.fileName' : 'By name',&lt;br /&gt;
'filemanager.fileSize' : 'By size',&lt;br /&gt;
'filemanager.fileType' : 'By type',&lt;br /&gt;
'insertfile.url' : 'URL',&lt;br /&gt;
'insertfile.title' : 'Title',&lt;br /&gt;
'insertfile.upload' : 'Upload',&lt;br /&gt;
'insertfile.viewServer' : 'Browse',&lt;br /&gt;
'table.cells' : 'Cells',&lt;br /&gt;
'table.rows' : 'Rows',&lt;br /&gt;
'table.cols' : 'Columns',&lt;br /&gt;
'table.size' : 'Dimensions',&lt;br /&gt;
'table.width' : 'Width',&lt;br /&gt;
'table.height' : 'Height',&lt;br /&gt;
'table.percent' : '%',&lt;br /&gt;
'table.px' : 'px',&lt;br /&gt;
'table.space' : 'Space',&lt;br /&gt;
'table.padding' : 'Padding',&lt;br /&gt;
'table.spacing' : 'Spacing',&lt;br /&gt;
'table.align' : 'Align',&lt;br /&gt;
'table.textAlign' : 'Horizontal',&lt;br /&gt;
'table.verticalAlign' : 'Vertical',&lt;br /&gt;
'table.alignDefault' : 'Default',&lt;br /&gt;
'table.alignLeft' : 'Left',&lt;br /&gt;
'table.alignCenter' : 'Center',&lt;br /&gt;
'table.alignRight' : 'Right',&lt;br /&gt;
'table.alignTop' : 'Top',&lt;br /&gt;
'table.alignMiddle' : 'Middle',&lt;br /&gt;
'table.alignBottom' : 'Bottom',&lt;br /&gt;
'table.alignBaseline' : 'Baseline',&lt;br /&gt;
'table.border' : 'Border',&lt;br /&gt;
'table.borderWidth' : 'Width',&lt;br /&gt;
'table.borderColor' : 'Color',&lt;br /&gt;
'table.backgroundColor' : 'Background',&lt;br /&gt;
'map.address' : 'Address: ',&lt;br /&gt;
'map.search' : 'Search',&lt;br /&gt;
'anchor.name' : 'Anchor name',&lt;br /&gt;
'formatblock.formatBlock' : {&lt;br /&gt;
h1 : 'Heading 1',&lt;br /&gt;
h2 : 'Heading 2',&lt;br /&gt;
h3 : 'Heading 3',&lt;br /&gt;
h4 : 'Heading 4',&lt;br /&gt;
p : 'Normal'&lt;br /&gt;
},&lt;br /&gt;
'fontname.fontName' : {&lt;br /&gt;
'Arial' : 'Arial',&lt;br /&gt;
'Arial Black' : 'Arial Black',&lt;br /&gt;
'Comic Sans MS' : 'Comic Sans MS',&lt;br /&gt;
'Courier New' : 'Courier New',&lt;br /&gt;
'Garamond' : 'Garamond',&lt;br /&gt;
'Georgia' : 'Georgia',&lt;br /&gt;
'Tahoma' : 'Tahoma',&lt;br /&gt;
'Times New Roman' : 'Times New Roman',&lt;br /&gt;
'Trebuchet MS' : 'Trebuchet MS',&lt;br /&gt;
'Verdana' : 'Verdana'&lt;br /&gt;
},&lt;br /&gt;
'lineheight.lineHeight' : [&lt;br /&gt;
{'1' : 'Line height 1'},&lt;br /&gt;
{'1.5' : 'Line height 1.5'},&lt;br /&gt;
{'2' : 'Line height 2'},&lt;br /&gt;
{'2.5' : 'Line height 2.5'},&lt;br /&gt;
{'3' : 'Line height 3'}&lt;br /&gt;
],&lt;br /&gt;
'template.selectTemplate' : 'Template',&lt;br /&gt;
'template.replaceContent' : 'Replace current content',&lt;br /&gt;
'template.fileList' : {&lt;br /&gt;
'1.html' : 'Image and Text',&lt;br /&gt;
'2.html' : 'Table',&lt;br /&gt;
'3.html' : 'List'&lt;br /&gt;
}&lt;br /&gt;
}, 'en');&lt;/p&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>谁动了我们的CPI</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e8%25b0%2581%25e5%258a%25a8%25e4%25ba%2586%25e6%2588%2591%25e4%25bb%25ac%25e7%259a%2584cpi.html"/>
        <updated>2012-02-24T11:54:40+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e8%b0%81%e5%8a%a8%e4%ba%86%e6%88%91%e4%bb%ac%e7%9a%84cpi</id>
        <content type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/p07Zg0V3xkw/&amp;resourceId=38230859_05_02_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/p07Zg0V3xkw/&amp;resourceId=38230859_05_02_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Velocity学习---语法篇</title>
        <link href="http://liyouhai.com/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/velocity%25e5%25ad%25a6%25e4%25b9%25a0-%25e8%25af%25ad%25e6%25b3%2595%25e7%25af%2587.html"/>
        <updated>2012-02-06T14:26:46+08:00</updated>
        <id>http://liyouhai.com//%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/velocity%e5%ad%a6%e4%b9%a0-%e8%af%ad%e6%b3%95%e7%af%87</id>
        <content type="html">&lt;p style=&quot;padding: 0px; margin: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;span style=&quot;border-collapse: separate; color: #000000; font-family: Verdana; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;#开头为操作&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;border-collapse: separate; color: #000000; font-family: Verdana; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;$开头为取值&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;border-collapse: separate; color: #000000; font-family: Verdana; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun;&quot;&gt;&lt;strong&gt;References begin with&lt;/strong&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;$&lt;/em&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;and are used to get something.&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;strong style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;Directives begin with&lt;/strong&gt;&amp;nbsp;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;em&gt;#&lt;/em&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;and are used to do something.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 19px;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto;&quot;&gt;&lt;strong&gt;注释：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;单行注释：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;## This is a single line comment.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;多行注释：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#*&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;Thus begins a multi-line comment.&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;Online visitors won't see this text&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;because the Velocity Templating Engine will ignore it.&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;*#&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Javadoc-style 注释：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#** This is a VTL comment block and may&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;be used to store such information as the&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;document author and versioning information:&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;@author&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;@version 5&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;*#&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 19px;&quot;&gt;&lt;strong&gt;引用：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;在VTL中有三种类型的引用，变量，属性和方法。&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;变量：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #800000;&quot;&gt;必须以字母开头&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;其余部分可包括:&lt;/div&gt;
&lt;div&gt;
&lt;ul style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;alphabetic (a .. z, A .. Z)&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;numeric (0 .. 9)&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;hyphen (&quot;-&quot;)&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;underscore (&quot;_&quot;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;属性：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;变量后面加.即可&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;比如：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$customer.Address&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$purchase.Total&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-weight: normal; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$purchase.getTotal()&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-weight: normal; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$page.setTitle( &quot;My Home Page&quot; )&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;设值：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#set( $a = &quot;Velocity&quot; )&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;循环：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#foreach( $mud in $mudsOnSpecial )&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$foreach.count 1...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$foreach.index 0...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;判断:&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#if(...)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#elseif(...)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#else&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;引入：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; font-weight: normal; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#include(&quot;&quot;) &amp;nbsp; 引入文件，不解析，只能引入TEMPLATE_ROOT下的文件，可引入多个文件，以逗号隔开&lt;/em&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; font-weight: normal; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#parse(&quot;&quot;) &amp;nbsp; &amp;nbsp; 引入文件，解析,只能引入一个文件&lt;/em&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;中断：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#break&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;和Java中break类似，可中断&lt;span style=&quot;font-family: Simsun;&quot;&gt;#foreach, #parse, #evaluate, #define, #macro, or #@somebodymacro&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;默认中断当前范围的代码，带名称中断到特定范围。&lt;/span&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;#break($macro)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;strong&gt;停止：调试时使用&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;#stop&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;strong&gt;动态执行VTL:&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#evaluate&lt;/em&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#set($source1 = &quot;abc&quot;)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#set($select = &quot;1&quot;)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#set($dynamicsource = &quot;$source$select&quot;)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;## $dynamicsource is now the string '$source1'&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#evaluate($dynamicsource)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#define&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;定义一段VTL，供调用&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#define( $block )Hello $who#end&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#set( $who = 'World!' )&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$block&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;宏：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#macro&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#define定义了变量，#macro定义了操作&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#macro( d )&amp;nbsp;&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;##d为方法名，如果需要参数，在d后面添加，空格隔开&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#d()&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;宏&lt;span style=&quot;color: #333333; font-family: Courier; white-space: pre;&quot;&gt;$!bodyContent&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;#macro( d )&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$!bodyContent&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;#@d()Hello!#end&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;转意符：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;## The following line defines $email in this template:&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#set( $email = &quot;foo&quot; )&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$email&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;\$email&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;结果：&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;foo&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$email&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p style=&quot;padding: 0px; margin: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;span style=&quot;border-collapse: separate; color: #000000; font-family: Verdana; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;#开头为操作&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;border-collapse: separate; color: #000000; font-family: Verdana; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;$开头为取值&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;border-collapse: separate; color: #000000; font-family: Verdana; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun;&quot;&gt;&lt;strong&gt;References begin with&lt;/strong&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;$&lt;/em&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;and are used to get something.&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;strong style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;Directives begin with&lt;/strong&gt;&amp;nbsp;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;em&gt;#&lt;/em&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;and are used to do something.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 19px;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto;&quot;&gt;&lt;strong&gt;注释：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;单行注释：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;## This is a single line comment.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;多行注释：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#*&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;Thus begins a multi-line comment.&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;Online visitors won't see this text&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;because the Velocity Templating Engine will ignore it.&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;*#&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Javadoc-style 注释：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#** This is a VTL comment block and may&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;be used to store such information as the&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;document author and versioning information:&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;@author&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;@version 5&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-weight: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;*#&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 19px;&quot;&gt;&lt;strong&gt;引用：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;在VTL中有三种类型的引用，变量，属性和方法。&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;变量：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #800000;&quot;&gt;必须以字母开头&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;其余部分可包括:&lt;/div&gt;
&lt;div&gt;
&lt;ul style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;alphabetic (a .. z, A .. Z)&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;numeric (0 .. 9)&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;hyphen (&quot;-&quot;)&lt;/strong&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 3px;&quot;&gt;&lt;strong&gt;underscore (&quot;_&quot;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;属性：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;变量后面加.即可&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;比如：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$customer.Address&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$purchase.Total&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-weight: normal; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$purchase.getTotal()&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-weight: normal; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$page.setTitle( &quot;My Home Page&quot; )&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;设值：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#set( $a = &quot;Velocity&quot; )&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;循环：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#foreach( $mud in $mudsOnSpecial )&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$foreach.count 1...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$foreach.index 0...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;判断:&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#if(...)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#elseif(...)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#else&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;引入：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; font-weight: normal; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#include(&quot;&quot;) &amp;nbsp; 引入文件，不解析，只能引入TEMPLATE_ROOT下的文件，可引入多个文件，以逗号隔开&lt;/em&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; font-weight: normal; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#parse(&quot;&quot;) &amp;nbsp; &amp;nbsp; 引入文件，解析,只能引入一个文件&lt;/em&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;中断：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#break&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;和Java中break类似，可中断&lt;span style=&quot;font-family: Simsun;&quot;&gt;#foreach, #parse, #evaluate, #define, #macro, or #@somebodymacro&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;默认中断当前范围的代码，带名称中断到特定范围。&lt;/span&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;#break($macro)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;strong&gt;停止：调试时使用&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;#stop&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;&lt;strong&gt;动态执行VTL:&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#evaluate&lt;/em&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#set($source1 = &quot;abc&quot;)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#set($select = &quot;1&quot;)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#set($dynamicsource = &quot;$source$select&quot;)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;## $dynamicsource is now the string '$source1'&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#evaluate($dynamicsource)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#define&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;定义一段VTL，供调用&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#define( $block )Hello $who#end&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#set( $who = 'World!' )&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$block&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;宏：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#macro&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;#define定义了变量，#macro定义了操作&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#macro( d )&amp;nbsp;&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;##d为方法名，如果需要参数，在d后面添加，空格隔开&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;em style=&quot;color: #000000; font-family: Simsun; line-height: normal; text-align: -webkit-auto; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; font-style: normal; text-align: left; white-space: pre; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#d()&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;宏&lt;span style=&quot;color: #333333; font-family: Courier; white-space: pre;&quot;&gt;$!bodyContent&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;#macro( d )&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$!bodyContent&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;#end&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: Courier; font-size: 13px; white-space: pre;&quot;&gt;&lt;span style=&quot;line-height: normal; background-color: #eeeeee;&quot;&gt;#@d()Hello!#end&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 24px;&quot;&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;转意符：&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;## The following line defines $email in this template:&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;#set( $email = &quot;foo&quot; )&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$email&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;\$email&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;结果：&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;foo&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: Courier; line-height: normal; white-space: pre; background-color: #eeeeee;&quot;&gt;$email&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>过去一年里最离奇的7件事</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e8%25bf%2587%25e5%258e%25bb%25e4%25b8%2580%25e5%25b9%25b4%25e9%2587%258c%25e6%259c%2580%25e7%25a6%25bb%25e5%25a5%2587%25e7%259a%25847%25e4%25bb%25b6%25e4%25ba%258b.html"/>
        <updated>2012-02-02T13:21:28+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e8%bf%87%e5%8e%bb%e4%b8%80%e5%b9%b4%e9%87%8c%e6%9c%80%e7%a6%bb%e5%a5%87%e7%9a%847%e4%bb%b6%e4%ba%8b</id>
        <content type="html">&lt;p style=&quot;padding: 0px; margin: 0px;&quot;&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;金牌奖得主：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;JAMESELLIOT&amp;mdash;-作为加州长滩市的抢劫犯，当他把38左轮手枪对准被害人开枪时，枪卡弹了(子弹没有击发)!此时,他做了非常有建设性的举动：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;&amp;mdash;把眼睛对准枪口仔细瞄了一眼，同时扣下了扳机；&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;&amp;mdash;这次枪没有卡弹。&lt;/p&gt;
&lt;p&gt;银牌奖得主：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;1.一个瑞士酒店的厨师被切肉机切断了一根手指，他向保险公司求偿。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;保险公司怀疑他操作错误才发生意外，派了代表来检查机器。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;这个代表操作切肉机之后，他也失去了一根手指，&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;保险公司终于核准了厨师的理赔要求。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;2.一个男人在暴风雪的温哥华街头奋力铲雪一个小时，终于给自己的车清出了一个停车位。当他把车开过去时，发现一位女士已经抢了他的车位。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;可以理解，他朝她开了一枪，把她干掉了。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;3.一位巴士司机要负责将20名精神病患送到BULAWAYO精神病院，但是，他意然在一个非法酒吧停下车来，等喝完酒后发现：巴士上的病患全逃跑了!&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;他很怕由于粗心大意所酿的祸将被惩罚，于是司机把车开到了附近的公共汽车站，允诺乘客可以免费搭乘。接着，他把这些乘客送进了BULAWAYO精神病院，并告诉医院工作人员：「这些&amp;rdquo;病人&amp;rdquo;非常容易激动,胡言乱语、充满幻觉」&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;这个诡计，直到三天后才被识破。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;铜牌奖得主：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;4.一个美国少年头部被火车撞伤，伤势严重而被送进了医院。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;pol.ice问他怎么受伤的?&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;他说，他只是想看看自己能把头伸到离行进的火车多近的地方。然后，就晕过去了。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;5.一个男人走进路易斯安那州某一便利商店，他拿出20元纸钞要求找零；当职员一打开收款机时，他即亮出手枪，并要求职员把收款机里所有现金都给他。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;职员照做了，他拿了钱迅速消失，但把自己的20元钞票留在柜台上，他一共拿走了15元。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;（这起事件引起一场不小的法律争论：如果一个人拿枪威胁你、要给你钱，这算不算犯罪？）&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;6.阿肯色州一个小伙子想喝啤酒想得要命，于是他朝一酒铺的橱窗扔了一块空心砖，他原打算砸破玻璃后，抢他几瓶酒，然后逃之夭夭。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;他不知道橱窗是强化玻璃，待空心砖反弹回来，当场把他砸得失去了知觉。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;整个过程被录像下来。（你猜:这家伙会不会把商店告上法庭?）&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;7.ANNARBOR新闻报犯罪专栏报导，密西根州一名男子凌晨5点持枪走进快餐店打劫。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;柜台人员表示，如果没有点餐，他无法打开收款机；这个男子只好点了一份炸洋葱圈，但柜台人员说，早餐时间不提供这玩意儿。该男子深感挫折，只好怅然离去。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;年度特别大奖：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;pol.ice在西雅图街道发现:有人蜷缩在一辆RV车旁，似乎身体极度不适；待上前查问，这人承认，他企图用虹吸管偷汽油,但他错误地将吸管另一头放到了旅行汽车的小型化粪桶里。&lt;/p&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p style=&quot;padding: 0px; margin: 0px;&quot;&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;金牌奖得主：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;JAMESELLIOT&amp;mdash;-作为加州长滩市的抢劫犯，当他把38左轮手枪对准被害人开枪时，枪卡弹了(子弹没有击发)!此时,他做了非常有建设性的举动：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;&amp;mdash;把眼睛对准枪口仔细瞄了一眼，同时扣下了扳机；&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;&amp;mdash;这次枪没有卡弹。&lt;/p&gt;
&lt;p&gt;银牌奖得主：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;1.一个瑞士酒店的厨师被切肉机切断了一根手指，他向保险公司求偿。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;保险公司怀疑他操作错误才发生意外，派了代表来检查机器。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;这个代表操作切肉机之后，他也失去了一根手指，&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;保险公司终于核准了厨师的理赔要求。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;2.一个男人在暴风雪的温哥华街头奋力铲雪一个小时，终于给自己的车清出了一个停车位。当他把车开过去时，发现一位女士已经抢了他的车位。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;可以理解，他朝她开了一枪，把她干掉了。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;3.一位巴士司机要负责将20名精神病患送到BULAWAYO精神病院，但是，他意然在一个非法酒吧停下车来，等喝完酒后发现：巴士上的病患全逃跑了!&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;他很怕由于粗心大意所酿的祸将被惩罚，于是司机把车开到了附近的公共汽车站，允诺乘客可以免费搭乘。接着，他把这些乘客送进了BULAWAYO精神病院，并告诉医院工作人员：「这些&amp;rdquo;病人&amp;rdquo;非常容易激动,胡言乱语、充满幻觉」&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;这个诡计，直到三天后才被识破。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;铜牌奖得主：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;4.一个美国少年头部被火车撞伤，伤势严重而被送进了医院。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;pol.ice问他怎么受伤的?&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;他说，他只是想看看自己能把头伸到离行进的火车多近的地方。然后，就晕过去了。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;5.一个男人走进路易斯安那州某一便利商店，他拿出20元纸钞要求找零；当职员一打开收款机时，他即亮出手枪，并要求职员把收款机里所有现金都给他。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;职员照做了，他拿了钱迅速消失，但把自己的20元钞票留在柜台上，他一共拿走了15元。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;（这起事件引起一场不小的法律争论：如果一个人拿枪威胁你、要给你钱，这算不算犯罪？）&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;6.阿肯色州一个小伙子想喝啤酒想得要命，于是他朝一酒铺的橱窗扔了一块空心砖，他原打算砸破玻璃后，抢他几瓶酒，然后逃之夭夭。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;他不知道橱窗是强化玻璃，待空心砖反弹回来，当场把他砸得失去了知觉。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;整个过程被录像下来。（你猜:这家伙会不会把商店告上法庭?）&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;7.ANNARBOR新闻报犯罪专栏报导，密西根州一名男子凌晨5点持枪走进快餐店打劫。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;柜台人员表示，如果没有点餐，他无法打开收款机；这个男子只好点了一份炸洋葱圈，但柜台人员说，早餐时间不提供这玩意儿。该男子深感挫折，只好怅然离去。&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;年度特别大奖：&lt;/p&gt;
&lt;p style=&quot;padding-top: 0px; padding-right: 0px; padding-bottom: 18px; padding-left: 0px; color: #414141; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 20px; text-align: left; background-color: #ffffff; margin: 0px;&quot;&gt;pol.ice在西雅图街道发现:有人蜷缩在一辆RV车旁，似乎身体极度不适；待上前查问，这人承认，他企图用虹吸管偷汽油,但他错误地将吸管另一头放到了旅行汽车的小型化粪桶里。&lt;/p&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>你知道纳税人的钱哪儿去了？</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e4%25bd%25a0%25e7%259f%25a5%25e9%2581%2593%25e7%25ba%25b3%25e7%25a8%258e%25e4%25ba%25ba%25e7%259a%2584%25e9%2592%25b1%25e5%2593%25aa%25e5%2584%25bf%25e5%258e%25bb%25e4%25ba%2586%25ef%25bc%259f.html"/>
        <updated>2012-01-13T12:09:21+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e4%bd%a0%e7%9f%a5%e9%81%93%e7%ba%b3%e7%a8%8e%e4%ba%ba%e7%9a%84%e9%92%b1%e5%93%aa%e5%84%bf%e5%8e%bb%e4%ba%86%ef%bc%9f</id>
        <content type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/-elmuYGU0ZU/&amp;resourceId=0_05_02_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/-elmuYGU0ZU/&amp;resourceId=0_05_02_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>2011年最后一餐</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/2011%25e5%25b9%25b4%25e6%259c%2580%25e5%2590%258e%25e4%25b8%2580%25e9%25a4%2590.html"/>
        <updated>2012-01-04T13:10:03+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/2011%e5%b9%b4%e6%9c%80%e5%90%8e%e4%b8%80%e9%a4%90</id>
        <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2012/01/IMAG0029.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-238&quot; title=&quot;IMAG0029&quot; src=&quot;assets/IMAG0029.jpg&quot; alt=&quot;&quot; width=&quot;492&quot; height=&quot;628&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2012/01/IMAG0029.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-238&quot; title=&quot;IMAG0029&quot; src=&quot;assets/IMAG0029.jpg&quot; alt=&quot;&quot; width=&quot;492&quot; height=&quot;628&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>解谜类游戏推荐</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e8%25a7%25a3%25e8%25b0%259c%25e7%25b1%25bb%25e6%25b8%25b8%25e6%2588%258f%25e6%258e%25a8%25e8%258d%2590.html"/>
        <updated>2011-12-18T09:44:25+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e8%a7%a3%e8%b0%9c%e7%b1%bb%e6%b8%b8%e6%88%8f%e6%8e%a8%e8%8d%90</id>
        <content type="html">&lt;p&gt;    好像第一次接触到比较好玩的解谜类游戏是flash的《逃离密室之深红房间》，记得当时网上流传比较多，还有噱头---“世界上只有4000人能逃离”,当时找到了9个东东，不过有个bug,右击鼠标，前进，就ok了。。。。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/1.jpg&quot;&gt;&lt;img src=&quot;assets/1.jpg&quot; alt=&quot;&quot; title=&quot;1&quot; width=&quot;400&quot; height=&quot;455&quot; class=&quot;alignnone size-full wp-image-229&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    后来买了psp,ndsl。psp主要以动作类游戏居多，ndsl则以创意类游戏居多。下面就是几款ndsl下的解谜游戏。psp下也由解谜类游戏，不过好像由于键位的设置，总感觉psp不适合玩解谜类游戏。&lt;/p&gt;
&lt;p&gt;一.逆转裁判系列&lt;br /&gt;
   逆转裁判系列在ndsl游戏里面应该是很出名的，和下面的逆转检察官统称“逆转系列”。逆转裁判主要是从法庭上人物的反应来发问，从而推动故事的发展。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/2.jpg&quot;&gt;&lt;img src=&quot;assets/2.jpg&quot; alt=&quot;&quot; title=&quot;2&quot; width=&quot;400&quot; height=&quot;423&quot; class=&quot;alignnone size-full wp-image-230&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
二.逆转检察官&lt;br /&gt;
    和逆转裁判类似，不过逆转检察官有搜证的过程，比逆转裁判的元素多一点。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/3.jpg&quot;&gt;&lt;img src=&quot;assets/3.jpg&quot; alt=&quot;&quot; title=&quot;3&quot; width=&quot;400&quot; height=&quot;436&quot; class=&quot;alignnone size-full wp-image-231&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
三.幽灵诡计&lt;br /&gt;
    很棒的推理游戏，如果没玩过，强烈建议玩一玩，故事性很棒，可玩性也是一级棒。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/4.jpg&quot;&gt;&lt;img src=&quot;assets/4.jpg&quot; alt=&quot;&quot; title=&quot;4&quot; width=&quot;400&quot; height=&quot;455&quot; class=&quot;alignnone size-full wp-image-232&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    最近几年在pc上也有几款很不错的解谜类游戏。&lt;br /&gt;
一.机械迷城&lt;br /&gt;
    首当其冲就是机械迷城，捷克出品的游戏，水墨画风，画面精美，迷题也比较搞脑子。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/5.jpg&quot;&gt;&lt;img src=&quot;assets/5.jpg&quot; alt=&quot;&quot; title=&quot;5&quot; width=&quot;400&quot; height=&quot;413&quot; class=&quot;alignnone size-full wp-image-233&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
二.谜画之塔&lt;br /&gt;
    和机械迷城类似的解谜类游戏，目前出到了3,都由中文版，发此帖时刚玩完一，画面也很棒，迷题也不错，不过好像没有机械迷城难度大。机械迷城到后面看攻略了。谜画之塔没看攻略通关。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/6.jpg&quot;&gt;&lt;img src=&quot;assets/6.jpg&quot; alt=&quot;&quot; title=&quot;6&quot; width=&quot;400&quot; height=&quot;479&quot; class=&quot;alignnone size-full wp-image-234&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;    好像第一次接触到比较好玩的解谜类游戏是flash的《逃离密室之深红房间》，记得当时网上流传比较多，还有噱头---“世界上只有4000人能逃离”,当时找到了9个东东，不过有个bug,右击鼠标，前进，就ok了。。。。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/1.jpg&quot;&gt;&lt;img src=&quot;assets/1.jpg&quot; alt=&quot;&quot; title=&quot;1&quot; width=&quot;400&quot; height=&quot;455&quot; class=&quot;alignnone size-full wp-image-229&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    后来买了psp,ndsl。psp主要以动作类游戏居多，ndsl则以创意类游戏居多。下面就是几款ndsl下的解谜游戏。psp下也由解谜类游戏，不过好像由于键位的设置，总感觉psp不适合玩解谜类游戏。&lt;/p&gt;
&lt;p&gt;一.逆转裁判系列&lt;br /&gt;
   逆转裁判系列在ndsl游戏里面应该是很出名的，和下面的逆转检察官统称“逆转系列”。逆转裁判主要是从法庭上人物的反应来发问，从而推动故事的发展。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/2.jpg&quot;&gt;&lt;img src=&quot;assets/2.jpg&quot; alt=&quot;&quot; title=&quot;2&quot; width=&quot;400&quot; height=&quot;423&quot; class=&quot;alignnone size-full wp-image-230&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
二.逆转检察官&lt;br /&gt;
    和逆转裁判类似，不过逆转检察官有搜证的过程，比逆转裁判的元素多一点。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/3.jpg&quot;&gt;&lt;img src=&quot;assets/3.jpg&quot; alt=&quot;&quot; title=&quot;3&quot; width=&quot;400&quot; height=&quot;436&quot; class=&quot;alignnone size-full wp-image-231&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
三.幽灵诡计&lt;br /&gt;
    很棒的推理游戏，如果没玩过，强烈建议玩一玩，故事性很棒，可玩性也是一级棒。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/4.jpg&quot;&gt;&lt;img src=&quot;assets/4.jpg&quot; alt=&quot;&quot; title=&quot;4&quot; width=&quot;400&quot; height=&quot;455&quot; class=&quot;alignnone size-full wp-image-232&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    最近几年在pc上也有几款很不错的解谜类游戏。&lt;br /&gt;
一.机械迷城&lt;br /&gt;
    首当其冲就是机械迷城，捷克出品的游戏，水墨画风，画面精美，迷题也比较搞脑子。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/5.jpg&quot;&gt;&lt;img src=&quot;assets/5.jpg&quot; alt=&quot;&quot; title=&quot;5&quot; width=&quot;400&quot; height=&quot;413&quot; class=&quot;alignnone size-full wp-image-233&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
二.谜画之塔&lt;br /&gt;
    和机械迷城类似的解谜类游戏，目前出到了3,都由中文版，发此帖时刚玩完一，画面也很棒，迷题也不错，不过好像没有机械迷城难度大。机械迷城到后面看攻略了。谜画之塔没看攻略通关。&lt;br /&gt;
&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/12/6.jpg&quot;&gt;&lt;img src=&quot;assets/6.jpg&quot; alt=&quot;&quot; title=&quot;6&quot; width=&quot;400&quot; height=&quot;479&quot; class=&quot;alignnone size-full wp-image-234&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>战胜自己</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e6%2588%2598%25e8%2583%259c%25e8%2587%25aa%25e5%25b7%25b1.html"/>
        <updated>2011-12-07T14:12:49+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e6%88%98%e8%83%9c%e8%87%aa%e5%b7%b1</id>
        <content type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/wMjtI9M0Bvc/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/wMjtI9M0Bvc/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>恐怖的税收啊</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e6%2581%2590%25e6%2580%2596%25e7%259a%2584%25e7%25a8%258e%25e6%2594%25b6%25e5%2595%258a.html"/>
        <updated>2011-11-26T07:54:36+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e6%81%90%e6%80%96%e7%9a%84%e7%a8%8e%e6%94%b6%e5%95%8a</id>
        <content type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/gstt0fE3ZPk/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/gstt0fE3ZPk/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：组合模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e7%25bb%2584%25e5%2590%2588%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-11-13T14:27:54+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e7%bb%84%e5%90%88%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;一提到组合模式，想到的就是树型结构了。&lt;br /&gt;
大家可能做过这样的功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/11/test.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-213&quot; title=&quot;test&quot; src=&quot;assets/test.jpg&quot; alt=&quot;&quot; width=&quot;100&quot; height=&quot;58&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中，如果选中了RootNode，则它的子节点也都选中。来模拟一下。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;public interface Node {
    void check();
    void add(Node node) throws Exception;
    void remove(Node node) throws Exception;
}

public class ParentNode implements Node {
    private List list = new ArrayList();

    public void check() {
        System.out.println(&quot;ParentNode is checked&quot;);
    }

    public void add(Node node) {
        list.add(node);
    }

    public void remove(Node node) {
        list.remove(node);
    }
}

public class ChildNode implements Node {
    public void check() {
        System.out.println(&quot;ChildNode is Checked&quot;);
    }

    public void add(Node node) throws Exception {
        throw new Exception(&quot;This node can not add&quot;);
    }

    public void remove(Node node) throws Exception {
        throw new Exception(&quot;This node can not remove&quot;);
    }
}

public class Main {

    public static void main(String[] args) throws Exception {
        Node node1 = new ChildNode();
        Node node2 = new ChildNode();
        Node node3 = new ParentNode();
        node3.add(node1);
        node3.add(node2);
        node1.check();
        node2.check();
        node3.check();
    }
}&lt;/pre&gt;
&lt;p&gt;很简单，不罗嗦了。看下uml图。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/11/diagram.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-215&quot; title=&quot;diagram&quot; src=&quot;assets/diagram.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;274&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;uml图有点问题。ParentNode里持有List&amp;lt;Node&amp;gt;，uml显示了一对一且一对多。无视即可。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;一提到组合模式，想到的就是树型结构了。&lt;br /&gt;
大家可能做过这样的功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/11/test.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-213&quot; title=&quot;test&quot; src=&quot;assets/test.jpg&quot; alt=&quot;&quot; width=&quot;100&quot; height=&quot;58&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中，如果选中了RootNode，则它的子节点也都选中。来模拟一下。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;public interface Node {
    void check();
    void add(Node node) throws Exception;
    void remove(Node node) throws Exception;
}

public class ParentNode implements Node {
    private List list = new ArrayList();

    public void check() {
        System.out.println(&quot;ParentNode is checked&quot;);
    }

    public void add(Node node) {
        list.add(node);
    }

    public void remove(Node node) {
        list.remove(node);
    }
}

public class ChildNode implements Node {
    public void check() {
        System.out.println(&quot;ChildNode is Checked&quot;);
    }

    public void add(Node node) throws Exception {
        throw new Exception(&quot;This node can not add&quot;);
    }

    public void remove(Node node) throws Exception {
        throw new Exception(&quot;This node can not remove&quot;);
    }
}

public class Main {

    public static void main(String[] args) throws Exception {
        Node node1 = new ChildNode();
        Node node2 = new ChildNode();
        Node node3 = new ParentNode();
        node3.add(node1);
        node3.add(node2);
        node1.check();
        node2.check();
        node3.check();
    }
}&lt;/pre&gt;
&lt;p&gt;很简单，不罗嗦了。看下uml图。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/11/diagram.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-215&quot; title=&quot;diagram&quot; src=&quot;assets/diagram.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;274&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;uml图有点问题。ParentNode里持有List&amp;lt;Node&amp;gt;，uml显示了一对一且一对多。无视即可。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>中英穿越体</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e4%25b8%25ad%25e8%258b%25b1%25e7%25a9%25bf%25e8%25b6%258a%25e4%25bd%2593.html"/>
        <updated>2011-11-13T10:05:40+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e4%b8%ad%e8%8b%b1%e7%a9%bf%e8%b6%8a%e4%bd%93</id>
        <content type="html">&lt;p&gt;众里寻他千百度，蓦然回首，Hey，how do you do。&lt;br /&gt;
云中谁寄锦书来？super high ,suck guy！&lt;br /&gt;
人生得意须尽欢，be a man,use your hand&lt;br /&gt;
身无彩凤双飞翼，Get away from me！&lt;br /&gt;
天生我材必有用，I can playfootball..&lt;br /&gt;
春城無處不飛花，let’s go tothe cinema&lt;br /&gt;
问君能有几多愁，as a boy without a girl (这句好美啊…)&lt;br /&gt;
问君能有几多愁，easy come easy go&lt;br /&gt;
春眠不觉晓，yo yo check itout&lt;br /&gt;
问世间情为何物，what the fuck can I do&lt;br /&gt;
曾经沧海难为水，what the fuck did you say&lt;br /&gt;
无可奈何花落去，I miss youmissing me&lt;br /&gt;
此情可待成追忆，let it be&lt;br /&gt;
争渡，争渡，惊起一滩鸥鹭，who and who?&lt;br /&gt;
林花谢了春红，太匆匆,where is my iphone?&lt;br /&gt;
感时花溅泪,Changes is never too late~&lt;br /&gt;
满园春色关不住, Friday is coming soon~&lt;br /&gt;
床前明月光，there’s something wrong~&lt;br /&gt;
两只黄鹂鸣翠柳，what place shall we go&lt;br /&gt;
空山新雨后 fire in the hole&lt;br /&gt;
两情若是长久时，you jump,I jump&lt;br /&gt;
江山如此多娇，you are so small，惜秦皇汉武，too simple；唐宗宋祖，sometime naieve。 一代天骄，成吉思汗，can’t play football。俱往矣，数风流, die all&lt;br /&gt;
于是就有了同学的：但使龙城飞将在 come on baby don’t be shy&lt;br /&gt;
于是就有了我的：衣带渐宽终不悔 Would you wanna be a GAY！&lt;br /&gt;
安娜的：昨夜西风凋碧树，独上高楼，watching Chairman Hu&lt;br /&gt;
两岸猿声啼不住 monkey go to sexing zoo&lt;br /&gt;
小裔舞：停车坐爱枫林晚 drive you home for one night&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;众里寻他千百度，蓦然回首，Hey，how do you do。&lt;br /&gt;
云中谁寄锦书来？super high ,suck guy！&lt;br /&gt;
人生得意须尽欢，be a man,use your hand&lt;br /&gt;
身无彩凤双飞翼，Get away from me！&lt;br /&gt;
天生我材必有用，I can playfootball..&lt;br /&gt;
春城無處不飛花，let’s go tothe cinema&lt;br /&gt;
问君能有几多愁，as a boy without a girl (这句好美啊…)&lt;br /&gt;
问君能有几多愁，easy come easy go&lt;br /&gt;
春眠不觉晓，yo yo check itout&lt;br /&gt;
问世间情为何物，what the fuck can I do&lt;br /&gt;
曾经沧海难为水，what the fuck did you say&lt;br /&gt;
无可奈何花落去，I miss youmissing me&lt;br /&gt;
此情可待成追忆，let it be&lt;br /&gt;
争渡，争渡，惊起一滩鸥鹭，who and who?&lt;br /&gt;
林花谢了春红，太匆匆,where is my iphone?&lt;br /&gt;
感时花溅泪,Changes is never too late~&lt;br /&gt;
满园春色关不住, Friday is coming soon~&lt;br /&gt;
床前明月光，there’s something wrong~&lt;br /&gt;
两只黄鹂鸣翠柳，what place shall we go&lt;br /&gt;
空山新雨后 fire in the hole&lt;br /&gt;
两情若是长久时，you jump,I jump&lt;br /&gt;
江山如此多娇，you are so small，惜秦皇汉武，too simple；唐宗宋祖，sometime naieve。 一代天骄，成吉思汗，can’t play football。俱往矣，数风流, die all&lt;br /&gt;
于是就有了同学的：但使龙城飞将在 come on baby don’t be shy&lt;br /&gt;
于是就有了我的：衣带渐宽终不悔 Would you wanna be a GAY！&lt;br /&gt;
安娜的：昨夜西风凋碧树，独上高楼，watching Chairman Hu&lt;br /&gt;
两岸猿声啼不住 monkey go to sexing zoo&lt;br /&gt;
小裔舞：停车坐爱枫林晚 drive you home for one night&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：门面模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e9%2597%25a8%25e9%259d%25a2%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-11-05T06:20:14+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e9%97%a8%e9%9d%a2%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     这个模式我一直没想明白，因为太简单了。没敢把它叫模式，编码的时候经常用这模式！就是将方法组合起来。&lt;br /&gt;
     这个模式可以说是“懒人模式”。也可以说是智能化模式。&lt;br /&gt;
     我们以发短信为例吧。你要发短信，&lt;br /&gt;
     第一步，需要选择联系人。&lt;br /&gt;
     第二步，编写短信内容。&lt;br /&gt;
     最后，发送。&lt;br /&gt;
     iphone4S的发布将改变这一点，因为Siri。我熬夜看了iphone4S发布会，当时挺失望的。不过后来一想，如果Siri够聪明，iphone4S绝对会火。因为人懒啊。有了Siri，你只需要说:&quot;Siri,send a message to Ivan.Say good morning&quot;。然后Siri就从联系人地址簿里找到Ivan，然后发送了一条短信&quot;Good morning!&quot;有没有未来科幻片的感觉？&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//原来发送短信
selectContract();
writeMsg(msg);
sendMsg();

//Siri发送短信
sendMsg(Voice);//搞定，当然了，里面需要语音辨析，牵扯到人工智能问题了，可比上面发送短信复杂多了，但是却方便了用户
&lt;/pre&gt;
&lt;p&gt;     Siri发送短信就是门面模式。Siri实际也是先选择联系人，填写短信，然后发送。但是都是Siri做了，Siri只是将基本的功能组合起来，提供了方便的操作。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     这个模式我一直没想明白，因为太简单了。没敢把它叫模式，编码的时候经常用这模式！就是将方法组合起来。&lt;br /&gt;
     这个模式可以说是“懒人模式”。也可以说是智能化模式。&lt;br /&gt;
     我们以发短信为例吧。你要发短信，&lt;br /&gt;
     第一步，需要选择联系人。&lt;br /&gt;
     第二步，编写短信内容。&lt;br /&gt;
     最后，发送。&lt;br /&gt;
     iphone4S的发布将改变这一点，因为Siri。我熬夜看了iphone4S发布会，当时挺失望的。不过后来一想，如果Siri够聪明，iphone4S绝对会火。因为人懒啊。有了Siri，你只需要说:&quot;Siri,send a message to Ivan.Say good morning&quot;。然后Siri就从联系人地址簿里找到Ivan，然后发送了一条短信&quot;Good morning!&quot;有没有未来科幻片的感觉？&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//原来发送短信
selectContract();
writeMsg(msg);
sendMsg();

//Siri发送短信
sendMsg(Voice);//搞定，当然了，里面需要语音辨析，牵扯到人工智能问题了，可比上面发送短信复杂多了，但是却方便了用户
&lt;/pre&gt;
&lt;p&gt;     Siri发送短信就是门面模式。Siri实际也是先选择联系人，填写短信，然后发送。但是都是Siri做了，Siri只是将基本的功能组合起来，提供了方便的操作。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>诡异的JavaScript日期问题</title>
        <link href="http://liyouhai.com/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%25e8%25af%25a1%25e5%25bc%2582%25e7%259a%2584javascript%25e6%2597%25a5%25e6%259c%259f%25e9%2597%25ae%25e9%25a2%2598.html"/>
        <updated>2011-11-01T13:30:40+08:00</updated>
        <id>http://liyouhai.com//%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%e8%af%a1%e5%bc%82%e7%9a%84javascript%e6%97%a5%e6%9c%9f%e9%97%ae%e9%a2%98</id>
        <content type="html">&lt;p&gt;    最近编码遇到个比较郁闷的问题。&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;
var date = new Date();
date.setFullYear(2011);
date.setDate(31);
date.setMonth(11);
&lt;/pre&gt;
&lt;p&gt;     本来以为结果是2011-12-31。不过很遗憾，昨天是，今天就不是了。。。。&lt;br /&gt;
     原因：很简单，昨天是2011-10-31日，而今天是2011-11-01日。&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;
var date = new Date();       //date为2011-11-01
date.setFullYear(2011);      //date还是2011-11-01
date.setDate(31);            //date为2011-11-31，11月没有31日，js自动进1，变成了2011-12-01
date.setMonth(11);           //date变成了2011-12-01,month值为0-11
&lt;/pre&gt;
&lt;p&gt;另外，js格式化的时候yyyy-MM-dd，MM一定要大写。。。。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;    最近编码遇到个比较郁闷的问题。&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;
var date = new Date();
date.setFullYear(2011);
date.setDate(31);
date.setMonth(11);
&lt;/pre&gt;
&lt;p&gt;     本来以为结果是2011-12-31。不过很遗憾，昨天是，今天就不是了。。。。&lt;br /&gt;
     原因：很简单，昨天是2011-10-31日，而今天是2011-11-01日。&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;
var date = new Date();       //date为2011-11-01
date.setFullYear(2011);      //date还是2011-11-01
date.setDate(31);            //date为2011-11-31，11月没有31日，js自动进1，变成了2011-12-01
date.setMonth(11);           //date变成了2011-12-01,month值为0-11
&lt;/pre&gt;
&lt;p&gt;另外，js格式化的时候yyyy-MM-dd，MM一定要大写。。。。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>心态问题</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e5%25bf%2583%25e6%2580%2581%25e9%2597%25ae%25e9%25a2%2598.html"/>
        <updated>2011-10-13T12:58:45+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e5%bf%83%e6%80%81%e9%97%ae%e9%a2%98</id>
        <content type="html">&lt;p&gt;1. 西游记的5人团队分别代表了马斯诺5个层次的需求。八戒的需求是生理，沙僧的需求是安全，白龙的需求是归属，唐僧的需求是荣誉，悟空的需求是实现自我价值。所以他们取经的目的需求不一样，价值观不一样，所以一路上的行为就很好理解了。八戒偷懒、沙僧撮合、白龙无闻、唐僧哭啼、悟空拼命。&lt;br /&gt;
2.【心态的力量】三个工人砌墙，有人问他们在干嘛？第一个人没好气说:”砌墙，你没看到吗？”第二个人笑笑:”我们在盖一幢高楼。”第三个人笑容满面:”我们正在建一座新城市。”10年后，第一个人仍在砌墙，第二个人成了工程师，而第三个人，是前两个人的老板。同样的起点，不一样的终点，这就是心态的力量。&lt;br /&gt;
3.谢对张说：我是最棒的，我保证让你幸福——这是推销。谢对张说：我老爹是港台大明星，我还开有公司，跟我好，以后都是你的——这是促销。谢把张离了，还到处是张的负面新闻——这是营销。我们根本不了解谢和张，但大多数都对谢夸赞——这是品牌&lt;br /&gt;
4.【伤不起的人才】一个值8000元的人，就别讨价还价只愿付他7500元。 即使省下了500块，实际上却凉了他的心，一有更好的机会，人家拔脚就走。相反，痛痛快快付他10000元，他会拿出两倍的能耐为你卖命干。记住，宁可花两个人的钱去招一个好人，也不要用一个人的钱去招两个差人。&lt;br /&gt;
5.【穷人与富人】穷人和富人探讨人生。富人说：“钱不是问题。”穷人说：“问题是没钱。”富人说：“身边女人很多，不知道哪个是真心的。”穷人说：“俺是真心的，身边没有一个女人。”富人说：“房子有很多，不知道该住哪一个。”穷人说：“房子住过很多，没有一处是自己的。”&lt;br /&gt;
6.【中美物价】在美国，一杯咖啡2美元，看场电影10美元，分别占美国人均月收入万分之六和千分之三。而在国内，这一数据分别是百分之一点三和百分之三点五，相当于美国居民负担费用的45倍和12倍。中国商品所含税比任何一个发达国家都高：美国的4.17倍，日本的3.76倍，欧盟15国的2.33倍。&lt;br /&gt;
7.【无论你的月收入多少，记得分成5份】 第1份，用来做生活费；第2份，用来交朋友，坚持一年，你的朋友圈就会为你产生价值；第3份，用来感恩，每月给父母、爱人送一份礼物；第4份，用来学习，每个月买一本好书读；第5份，用来投资，培养自己的财富意识。&lt;br /&gt;
8.【中国最杯具的11个专业】中国公布最杯具的11个专业，你也在其中吗？1 生物工程；2 法学；3 环境类专业；4 摄影；5 国际政治和外交学； 6 新闻系；7 汉语言文学；8 人力资源管理等；9 经济学；10 电子政务原名档案管理；11 数学与应用数学。&lt;br /&gt;
9.当同胞邻居突然有钱买了一辆好车，美国人说：“我要赚钱买更好的车”；日本人说：“我要研究他赚钱的方法”；法国人说：“我想借他车去兜风泡妞”；中国人说：“我杀他的心都有，我今晚先砸了他的车”。——史玉柱&lt;br /&gt;
10.【2比8黄金法则】 20%的人用脖子以上来挣钱，80%的人用脖子以下赚钱。 20%的人买时间，80%的人卖时间。 20%的人做事业，80%的人做事情。20%的人计划未来，80%的人早上才想今天干什么。 20%的人改变自己，80%的人改变别人。20%的人是富人，80%的人是穷人。你要做20%，还是80%呢？&lt;br /&gt;
11.【复利的奇迹】1．今天一次性给你10亿元；2．今天给你1元，接下来连续 30天每天都给你前一天2倍的钱。你选哪个？很多人选了1，可是我告诉你，选2的结果是21.47亿。这题目告诉我们，不要期望一夜暴富，起点哪怕低到仅有“1元钱”，但只要你每天努力多一点，每天进步一点，就能创造一个意想不到的奇迹。&lt;br /&gt;
12.布什说：“我们准备干掉4百万伊拉克人和1个修单车的。”CNN记者：“1个修单车的？！为什么要杀死一个修单车的？” 布什转身拍拍鲍威尔的肩膀：“看吧，我都说没有人会关心那4百万伊拉克人。” ——【这就是公众，他们只关心奇怪的个案。值得反思。】&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;1. 西游记的5人团队分别代表了马斯诺5个层次的需求。八戒的需求是生理，沙僧的需求是安全，白龙的需求是归属，唐僧的需求是荣誉，悟空的需求是实现自我价值。所以他们取经的目的需求不一样，价值观不一样，所以一路上的行为就很好理解了。八戒偷懒、沙僧撮合、白龙无闻、唐僧哭啼、悟空拼命。&lt;br /&gt;
2.【心态的力量】三个工人砌墙，有人问他们在干嘛？第一个人没好气说:”砌墙，你没看到吗？”第二个人笑笑:”我们在盖一幢高楼。”第三个人笑容满面:”我们正在建一座新城市。”10年后，第一个人仍在砌墙，第二个人成了工程师，而第三个人，是前两个人的老板。同样的起点，不一样的终点，这就是心态的力量。&lt;br /&gt;
3.谢对张说：我是最棒的，我保证让你幸福——这是推销。谢对张说：我老爹是港台大明星，我还开有公司，跟我好，以后都是你的——这是促销。谢把张离了，还到处是张的负面新闻——这是营销。我们根本不了解谢和张，但大多数都对谢夸赞——这是品牌&lt;br /&gt;
4.【伤不起的人才】一个值8000元的人，就别讨价还价只愿付他7500元。 即使省下了500块，实际上却凉了他的心，一有更好的机会，人家拔脚就走。相反，痛痛快快付他10000元，他会拿出两倍的能耐为你卖命干。记住，宁可花两个人的钱去招一个好人，也不要用一个人的钱去招两个差人。&lt;br /&gt;
5.【穷人与富人】穷人和富人探讨人生。富人说：“钱不是问题。”穷人说：“问题是没钱。”富人说：“身边女人很多，不知道哪个是真心的。”穷人说：“俺是真心的，身边没有一个女人。”富人说：“房子有很多，不知道该住哪一个。”穷人说：“房子住过很多，没有一处是自己的。”&lt;br /&gt;
6.【中美物价】在美国，一杯咖啡2美元，看场电影10美元，分别占美国人均月收入万分之六和千分之三。而在国内，这一数据分别是百分之一点三和百分之三点五，相当于美国居民负担费用的45倍和12倍。中国商品所含税比任何一个发达国家都高：美国的4.17倍，日本的3.76倍，欧盟15国的2.33倍。&lt;br /&gt;
7.【无论你的月收入多少，记得分成5份】 第1份，用来做生活费；第2份，用来交朋友，坚持一年，你的朋友圈就会为你产生价值；第3份，用来感恩，每月给父母、爱人送一份礼物；第4份，用来学习，每个月买一本好书读；第5份，用来投资，培养自己的财富意识。&lt;br /&gt;
8.【中国最杯具的11个专业】中国公布最杯具的11个专业，你也在其中吗？1 生物工程；2 法学；3 环境类专业；4 摄影；5 国际政治和外交学； 6 新闻系；7 汉语言文学；8 人力资源管理等；9 经济学；10 电子政务原名档案管理；11 数学与应用数学。&lt;br /&gt;
9.当同胞邻居突然有钱买了一辆好车，美国人说：“我要赚钱买更好的车”；日本人说：“我要研究他赚钱的方法”；法国人说：“我想借他车去兜风泡妞”；中国人说：“我杀他的心都有，我今晚先砸了他的车”。——史玉柱&lt;br /&gt;
10.【2比8黄金法则】 20%的人用脖子以上来挣钱，80%的人用脖子以下赚钱。 20%的人买时间，80%的人卖时间。 20%的人做事业，80%的人做事情。20%的人计划未来，80%的人早上才想今天干什么。 20%的人改变自己，80%的人改变别人。20%的人是富人，80%的人是穷人。你要做20%，还是80%呢？&lt;br /&gt;
11.【复利的奇迹】1．今天一次性给你10亿元；2．今天给你1元，接下来连续 30天每天都给你前一天2倍的钱。你选哪个？很多人选了1，可是我告诉你，选2的结果是21.47亿。这题目告诉我们，不要期望一夜暴富，起点哪怕低到仅有“1元钱”，但只要你每天努力多一点，每天进步一点，就能创造一个意想不到的奇迹。&lt;br /&gt;
12.布什说：“我们准备干掉4百万伊拉克人和1个修单车的。”CNN记者：“1个修单车的？！为什么要杀死一个修单车的？” 布什转身拍拍鲍威尔的肩膀：“看吧，我都说没有人会关心那4百万伊拉克人。” ——【这就是公众，他们只关心奇怪的个案。值得反思。】&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>10年100个让我们生活更美好的东西</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/10%25e5%25b9%25b4100%25e4%25b8%25aa%25e8%25ae%25a9%25e6%2588%2591%25e4%25bb%25ac%25e7%2594%259f%25e6%25b4%25bb%25e6%259b%25b4%25e7%25be%258e%25e5%25a5%25bd%25e7%259a%2584%25e4%25b8%259c%25e8%25a5%25bf.html"/>
        <updated>2011-10-11T12:31:42+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/10%e5%b9%b4100%e4%b8%aa%e8%ae%a9%e6%88%91%e4%bb%ac%e7%94%9f%e6%b4%bb%e6%9b%b4%e7%be%8e%e5%a5%bd%e7%9a%84%e4%b8%9c%e8%a5%bf</id>
        <content type="html">&lt;p&gt;它们是科技的胜利，更是人性的胜利&lt;br /&gt;
网站类&lt;br /&gt;
1.Twitter.com&lt;br /&gt;
只有两种人会不喜欢Twitter，话痨和日报记者。前者会发现140字无法透彻表达观点，后者则被Twitter抢走了工作。奥巴马利用 Twitter助选，帕丁森在Twitter上宣传《暮色》，知道分子们在Twitter上交换最新资讯……自打2006年Twitter出现，人们就发 现，世界完全可以被解构成一大堆140字以内的碎片。微传播时代，只有真知灼见才具有被广泛传播的价值，垃圾信息的充盈会自我选择出真正有价值的信息。&lt;/p&gt;
&lt;p&gt;2.Facebook.com&lt;br /&gt;
小学时代坐你身旁扎小辫子的同桌如今长什么样?和你同在一个城市的都有哪些漂亮姑娘? Facebook都能告诉你。你自以为很了解女朋友么?说不定Facebook比你更了解。从2004年2月4日上线那天起，Facebook就把个人和 周边联系得更加紧密。作为全球用户量第一的交友网站，Facebook让老友重聚、新欢相识，除了留言和交换照片，还有超过5000个应用程序供你和朋友 们打发时间。&lt;br /&gt;
3.Wikipedia.com&lt;br /&gt;
万能的维基百科，它什么都知道。而且不只有英语、汉语，甚至还有闽南语、粤语和客家语。2001年1月15日上线到现在，全世界数十万人用超过 250种语言编辑了1000万篇条目的信息。这意味着不论你是谁，只要你有一根网线、一部电脑，你就能无偿为别人提供信息，同时获得更多的信息。维基百科 是互联网领域最早的“众包”概念实践者，同时，它也是市场调研公司和要写论文的毕业生们最大的福音。&lt;br /&gt;
4.Google.com&lt;br /&gt;
10年之后，一个典型的“G粉”的生活状态是这样的，早上被Google Android手机闹铃叫醒，用Google Reader迅速查看当天新闻头条，Gmail和Gtalk保证你与工作团队的沟通，电脑操作系统当然得是Google Chrome OS，Google翻译保证你即使不会英语也不至于在做报告的时候露怯。Google Calendar和Google Map则保证你不会错过下班的约会。简而言之，Google已经无处不在。难得的是，掌握了这么多资源的Google还能坚守“不作恶”。&lt;br /&gt;
5.Taobao.com&lt;br /&gt;
衣服、食品、手机充值卡、机票、电器……只有你想不到的，没有在Taobao买不到的。Taobao网完美地证明了一个经济学原理：需求和供给 相互决定。它用支付宝解决了困扰中国网民的信用危机，同时为中国广大无业青年、学生和小商品店主提供了赚钱的平台，让商品得到了最大限度的流通，让关税、 限制进口和地域分割都成了笑话。作为中国C2C商务领域当之无愧的王者，Taobao是中国3亿网民最爱的购物商场。不过，在Taobao你必须有一双火 眼金睛，才能真正淘到“宝”。&lt;br /&gt;
6.Youtube.com&lt;br /&gt;
只要你有部能拍短片的机器，就能利用Youtube提供的免费空间上传和分享自己的视频。Youtube满足了每个人都能做导演的蠢蠢欲动，也 为粉丝们提供了重温偶像精彩演出的便利途径。2005年2月，Youtube上线。世界各地的网民们蜂拥而至。利用Flash技术，Youtube便利地 储存和提供了大量视频服务。网民将Youtube比作自己的“记忆储存库”。土豆和优酷网作为本土Youtube，也为我们带来了无数欢乐。幸好，他们都 获得了信息网络传播视听节目许可证。&lt;br /&gt;
7.Blog&lt;br /&gt;
这是互联网上每个人都有权利拥有的“一亩三分地”。尽管早在2002年，博客在中国就已开始显山露水。但直到2005年，新浪以门户网站之姿， 强势介入博客市场，利用“名人博客”大力推广，才最终令博客风靡一时，成为网民的身份标识之一。在过去10年中，博客的草根性质及自由精神激发了网民的创 造力，促进了网络社会的开放，令集体智慧得到了最大限度的释放，同时不忘张扬个人的社会价值。博客，成为了记录过去10年中国及世界变化的最好载体之一。&lt;br /&gt;
8.专业购物网站&lt;br /&gt;
B2C(企业对消费者)的网站，在过去十年中有如韭菜，割了一茬，还会长出新的一茬。但风起云涌的竞争，最终受惠的还是我们消费者。卓越和当当的书，京东和新蛋的电器，折扣够低、货品够全，还能享受送货上门的便捷服务。我们有什么理由不选择这些网站呢?&lt;br /&gt;
科技类&lt;br /&gt;
9.iPod&lt;br /&gt;
没人明白为什么这个外观纯白、音质一般的播放器能够成为我们这10年的文化象征、时尚酷品和掌上宠物。从512M到160G，从纯白到多彩，苹 果公司用这个小玩意儿成功地打造了一个文化现象。虽然没几个人能真正把80G的iPod装满歌儿并且一首不落地听过去，但这不妨碍每个人都想拥有一台 iPod。这是《时代周刊》评选出的2001年百大最佳发明第一名，是香奈儿当家拉格菲尔德最爱的播放器，是你和众多名人同一的选择。&lt;br /&gt;
10.iPhone&lt;br /&gt;
在iPhone出现前，智能手机的代名词一直是Nokia、Motorola或者多普达，现在变成了iPhone。iPhone不仅仅是一部手 机，更是一部掌上游戏机、ipod、办公系统和互联网接入设备。它满足了你对一部手机的所有想象。而且用手指就可以触控，操作简单到了小学生和老人都能应 付自如的地步。iPhone革了智能手机的命，但我们也不能忘记其他手机厂家的努力，Nokia的Symbian系统，Motorola采用的 Linux，多普达固守的Windows Mobile都让我们过去10年的移动生活变得更加便利、轻松和快乐。&lt;br /&gt;
11.WIFI&lt;br /&gt;
全称Wireless Fidelity，是一种通过无线电波联网的技术。在WIFI出现前，想上网总得拖着一根长长的网线。最常见的WIFI就是通过无线路由器架构的家庭与办 公无线网，试想一下没有WIFI，你怎么能在厨房、客厅、阳台或者厕所随心所欲地收Email和看最新的美剧呢?当然，还得感谢星巴克和麦当劳这样的街头 WIFI热点，让我们打发了候机和逛街的无聊间歇。&lt;br /&gt;
12.WII&lt;br /&gt;
说WII拯救了老牌游戏机公司任天堂，当不为过。不过，与其说WII是一个游戏机，不如说它开创了人机互动的新纪元。在WII出现之前，不论是 PS3、XBOX360，还是传统的PC游戏，都难逃手柄和鼠标的束缚。WII的操作也需要通过无线感应控制器Wiimote来实现，但WII没有线路的 束缚，也没有复杂的按键控制，操作方式是最原始也最直接的——“体感互动”，即用你的身体动作来控制游戏，WII革了游戏机的命。而且，WII还能完成运 动和减肥的多重使命。&lt;br /&gt;
13.PSP&lt;br /&gt;
在动辄就要耗掉2小时的上班地铁路途中，如果失去了PSP和NDS这样的手持游戏设备，我们的生活会枯燥多少倍?而且，Sony公司推出的 PSP除了是一款游戏机以外，它还能听MP3、看视频(效果好于许多专业MP4)和看电子书。最新款的甚至内置了麦克风，配合Skype软件的效 果，PSP的对手，或许有一天会是iPhone。当然，单看游戏效果，PSP也不会让你失望。什么?还没玩过Locoroco和啪嗒砰?那你肯定不是潮 人。&lt;br /&gt;
14.数字机顶盒&lt;br /&gt;
数字机顶盒让我们可以在现有的模拟电视上观看数字电视节目，从而让看电视不再是一个单一的接受行为，增添了交互感。通过机顶盒，我们喜欢的电视 剧会在几点播放、最新的股票走势如何都尽在掌握。而点播电视电影、收听广播、利用电视上网等功能，则让观众不用再忍受某些又臭又长或是呆板笨拙的电视节 目，促进了中国电视业优胜劣汰。&lt;br /&gt;
15.QQ&lt;br /&gt;
QQ号比电话手机号码更快地实现了全民普及。10岁的学生不一定有手机，但幼儿园大班的孩子们就会互相交换QQ号码了。网络小胖和兔斯基通过 QQ表情走红，QQ菜园和QQ音速是城镇小青年们最爱的休闲游戏，Q币几乎成为了互联网界最火爆的通行货币。和QQ一起的还有MSN，两者的用户群加起 来，正好可以囊括我国3亿网民中的绝大多数，学生与白领、体力劳动者与公司职员。即时通讯软件节省了多少通话与办公成本啊，也缔造了多少……一夜情的机会 啊。&lt;br /&gt;
16.GPS&lt;br /&gt;
GPS 是全球定位系统的简称，利用卫星迅速测定你在地球的哪个角落。原本它是为军事用途而开发，或是为失踪的船舶、飞机与车辆导航。但现在，它是路盲司机的福 音、抓捕罪犯的利器以及偷情丈夫的克星。不论你在山高水远的哪个角落，指南针会随着地球磁极变化而失灵，GPS却能借助多颗已知位置的卫星与你的用户接收 机之间的距离，始终为你指引正确的方向。&lt;br /&gt;
17.DV&lt;br /&gt;
如果没有DV(数码摄像机)，Youtube的用户数量最起码会比现在少2/3。因为有了DV，电影这种每秒24格的艺术显得不再这么高不可 攀。成本降低和操作傻瓜化，令用影像记录我们的生活轨迹变得简单又普通。如果中国电影的水平可以随着DV普及的水平一样水涨船高，那就更好了。&lt;br /&gt;
18.DC&lt;br /&gt;
相比起还略嫌笨重、价格也相对偏高的DV，DC(数码照相机)更普及，也更实用。对于喜欢“上车睡觉，下车拍照”旅游方式的国人来说，DC的普及，绝对是雪中送碳级别的。&lt;br /&gt;
19.P2P&lt;br /&gt;
P2P有多受欢迎?德国互联网调研机构ipoque称，P2P已经彻底统治了当今的互联网，50%-90%的总流量都来自P2P程序。BT、电 驴、PPS……这些耳熟能详为我们带来大量精神食粮的程序，其根源都是P2P(点对点)技术。下载的同时上传、一个人的电脑拥有=所有人的电脑都 有，P2P技术的风靡体现了互联网的精神，平等、共享与互助。而P2P也代表了互联网的潮流，靠封，是怎么也封不住的。&lt;br /&gt;
20.Photoshop技术&lt;br /&gt;
Photoshop是一款图像处理软件。从第一版PS出现到现在，已有20余年之久。但在新世纪到来的这10年，PS却让众多中国人焕发了青 春，找到了自信。眼睛不够大，或者皮肤不够好，没关系，只要有Photoshop软件，10分钟内，芙蓉姐姐都能被修成林志玲。从来没有一款软件能像PS 一般，在如此之大的限度内满足人们的自我满足心理。&lt;br /&gt;
21.Skype&lt;br /&gt;
Skype是一家全球性互联网电话公司，也是海外游子与他们在国内的亲朋最熟悉的网络即时语音沟通工具。通过Skype，他们可以用远低于中国电信标准的资费进行沟通。而各家公司的语音与视频会议，借助Skype，也可省下一大笔运营成本。&lt;br /&gt;
22.LED&lt;br /&gt;
不管是奥运会开幕式、大型舞台剧还是祖国60周年庆，LED的灯光照明与显示效果都让我们为之赞叹。还记得奥运会开幕式上那幅徐徐展开的画卷 么?还记得闪闪发亮的“击缶而歌”么?这些都离不开LED。而对于普通人来说，LED的电脑和电视屏幕，更大、更薄、更亮，这不正是我们选购家电时的不懈 追求么?&lt;br /&gt;
23.APPS应用&lt;br /&gt;
APPS是Applications的缩写，意为应用程序。最早，它出自苹果公司的iPhone广告。但是紧接着人们发现，APPS早已无处不 在。Facebook上的所有插件、手机里的小游戏和办公程序、Google平台上多种多样的应用，从笔记本电脑到GPS系统，APPS汇集众人智慧，这 些不起眼的小插件才是智能系统中真正的主角。2009年最让中国人心神不宁的“开心农场”，就是一个典型的APPS应用程序。&lt;br /&gt;
24.混合动力汽车&lt;br /&gt;
混合动力汽车就是指在纯电动汽车上加装两个或两个以上的动力源。目的是减少汽车的污染，提高纯电动汽车的行驶里程。最流行的混合动力汽车一般是 指内燃机车发电机，再加上蓄电池的汽车。在如今全球能耗不断陷入危机、大气污染加剧的情况下，混合动力汽车无疑为我们指出了一个新方向。&lt;br /&gt;
25.金山词霸&lt;br /&gt;
过去10年是中国加速与国际融合的10年，而金山词霸为此做出了多少贡献，已很难计算。它曾是中国人装机的必备软件，一个个陌生的英文单词通过 金山词霸，变成了我们熟悉的方块字。而在和Google合作、推出免费版本后，金山词霸也开始向网络化转型，与其他众多提供翻译与查询服务的英文在线词典 一道，为国人和英文世界搭建起沟通的桥梁。&lt;br /&gt;
26.Windows XP&lt;br /&gt;
上面提到的所有这些网站与科技产品，几乎无一能逃过在Windows XP上应用的命运。Windows98之后，微软最成功的一款产品就是被国人戏称为“叉P”的Windows XP。而在Window Vista也不幸遭遇滑铁卢之后，XP成了当之无愧的10年操作系统王者。尽管有Linux、MAC OS和Chrome OS等追兵四起，有“盗版黑屏风波”，但作为最为流行又普通的操作系统，XP仍然为我们带来了无穷的欢乐。&lt;br /&gt;
27.RSS订阅&lt;br /&gt;
这是个信息爆炸的时代，同一条新闻可能会有上百个版本，而泛滥的个人博客与广泛的信息来源则可能会让你昏头转向。下次再被信息困扰的时候，别忘 了借助RSS技术来订阅你最感兴趣的那些网站。信息会按照你所希望的格式、地点、时间和方式，直接传送到你的网络设备上。50个博客、20个不断更新的新 闻页面、40个好玩的网站?没问题，所有的更新都可以被装在一个页面里。&lt;br /&gt;
28.Speedo&lt;br /&gt;
菲尔普斯在08奥运会上勇夺8块金牌，最该感谢的恐怕就是身上的Speedo鲨鱼泳衣。这款从面料到设计都只有一个目的——减低水中阻力、符合 人体工学从而促使泳速更快的泳衣缔造了21世纪前10年游泳运动发展的辉煌。自运动员穿上新型Speedo LZR RACER泳衣以来，25项世界纪录中的23项已经作古，运动员们共获得了47枚金牌及所有游泳奖牌数的89%。世界顶级的5支游泳队里，Speedo赞 助了其中的4支。&lt;br /&gt;
29.上网本&lt;br /&gt;
很多人以为它只是价格低廉、配置低端、身材小巧，然而这也正是上网本最大的优点。没人想出差在外一个月，每天还得拎着一个3公斤重的笔记本电脑 四处奔波。一个上网本，给多少长年出差在外的人带来了福音。而且，Intel对上网本的定义还有一条，“可以实现流畅播放流媒体和音乐功能。”这让孤单的 旅途增添了多少欢乐呀。&lt;br /&gt;
30.移动存储设备&lt;br /&gt;
U盘和移动硬盘的出现让我们忘记了公文包、动辄几十页的文件和纸质笔记本。什么都能数字化和文档化的今天，这些高容量的移动存储设备存储的不仅 仅是数字和文件，也是人类的智慧结晶。信息的传播和交流从来没有像现在这么便捷和快速过。而且，愈设计愈漂亮的U盘和移动硬盘，已经快成为艺术品的一个分 支了。还有，在多少电影里，坏人都是因为电脑的文件被U盘拷走而暴露的啊?&lt;br /&gt;
31.蓝牙&lt;br /&gt;
蓝牙是种无线电技术，手机、PDA、无线耳机、笔记本电脑，所有这些设备都能通过蓝牙互联起来，实现无线信息交换。蓝牙能够有效地简化移动通信 终端设备之间的通信，也能够成功地简化设备与互联网之间的通信，从而使数据传输变得更加迅速高效。蓝牙设备令驾驶更安全，司机们不需要再腾出一只手来打电 话。而长期爱煲电话粥的女人们，手肘和脖子也不会再如此酸痛。还有远程遥控音乐播放、免费通话、在地铁里寻觅打开蓝牙设备的陌生人，蓝牙为我们的生活提供 了更多可能性。&lt;br /&gt;
32.远程会议系统&lt;br /&gt;
用这一行领头羊思科公司的CEO钱伯斯的话来说，远程会议系统不仅仅只是方便了不同地区的公司员工一起开会，更是体现了整个科技产业的未来发展 方向：协作。世界又平又热又挤，绝大多数的500强公司都在世界各地有超过100家分公司，就连火锅店都在全国范围内有好几十家分店。怎么统筹管理、怎么 即时沟通、怎么有效优化资源，还是单靠飞来飞去?这样太贵、不环保而且没有效率。远程会议系统是一个管道工，帮你打通协作的管道。&lt;br /&gt;
33.Kindle&lt;br /&gt;
电子书不是什么高明科技产品，但Amazon Kindle绝对开创了电子书的新纪元。纸质的阅读感、超大的屏幕和不错的续航能力只是让Kindle流行的一部分因素，支持Amazon网上书店实时购 买的功能，意味着只需要花费两分钟下载，你手里的这本电子书就永远都能提供最新的内容。虽然在中国，这个功能几近浪费。但我国的电纸书厂家永远都能青出于 蓝而胜于蓝。产品更便宜，功能更多，除了能看书还能听MP3。而且……还有更多免费的书可看。&lt;br /&gt;
医学类&lt;br /&gt;
34.伟哥&lt;br /&gt;
那片蓝色小药丸给自己打的广告是：全世界每年有1.4亿男人在使用。它就是伟哥。美国《时代周刊》在它诞生时说：“世界等待它已经4000年!”&lt;br /&gt;
不过这片使男人们恣意狂欢的药丸，并未给“伟哥之父”—— 弗里德·穆拉德教授带来满足。他本希望研究一种扩张冠状动脉、改善冠心病的新药，但临床10年无显著疗效，并且副作用明显。而这种副作用正是使股沟附近的 血管直径显著增大，海绵体保持充血。他曾表示“如果时间倒退，我宁愿自己没有发明这种药”。1998年，“伟哥”正式上市。2000年，“伟哥”正式引进 中国内地。&lt;br /&gt;
伟哥虽然坚挺了男人的下半身，但最好的春药还是爱情。&lt;br /&gt;
35.人工心脏&lt;br /&gt;
那是2001年里非常普通的一天，一位不愿意透露身份的病人在路易斯市的犹太医院“舒适地休息”。在他的胸腔里，跳动着世界上第一颗完整移植的 不需要管线与外接电源的人工心脏。研发者麻省Abiomed公司表示，这种人工心脏使用电池电源，由钛金属和塑胶制造，可以将病人的生命延长60天至5 年。&lt;br /&gt;
2009年，中国宣布将在2010年推出中国制造的人工心脏。研发者中山哈特人工心脏试验室负责人象天工表示，如果此“中国心”可以早一年面世，或许可以拯救央视著名主持人罗京的生命。&lt;br /&gt;
36. 盲人复明技术&lt;br /&gt;
2009年10月，美国费城儿童医院等机构宣布其设计出名叫“腺相关病毒”的无毒性小病毒，让其携带没有缺陷的DNA直接进入病人的眼部，可以恢复病人眼部的光敏性。&lt;br /&gt;
与此同时，美国麻省理工大学宣布已经研制出一种能让盲人重获部分视力的微芯片。他们表示将在2010年的夏天开始在动物身上试验，幸运的话，临床试验将在几年内展开。在此之前，他们已经做了20年的研究。&lt;br /&gt;
37.仿生肢&lt;br /&gt;
残疾人奥斯卡·皮斯托瑞斯出生11个月时，就被截去膝盖以下的腿部。2008年，他的百米成绩是10秒91，只比博尔特的百米成绩慢了一秒。带给他这个成绩的是他那对只有8磅重的碳纤维仿生肢。&lt;br /&gt;
最早研究出仿生肢的是日本人。在2005年，他们发明了一种可以通过电脑控制的机械骨骼装置，可以模仿佩戴者的步态和身姿。次年，冰岛奥索公司将此技术进一步发展，并成功推向市场。&lt;br /&gt;
仿生肢虽好用，但价格不菲。奥斯卡·皮斯托瑞斯的一对假肢价格接近20万人民币，全世界使用者仅为300余人。还好，斯坦福大学的一群工程学系 学生2009年设计了一种造价只有区区160元人民币的假膝，由5块塑料以及4个螺母和螺栓构成，并且能够模仿天然关节的移动。&lt;br /&gt;
38.脸部移植&lt;br /&gt;
康妮公布她变脸前后的照片时，中国山东的一位网友留言说，“技术真强。”&lt;br /&gt;
康妮在2008年底接受美国第一例、全球第四例脸部移植手术。在经过22个小时的手术后，康妮脸部80%的骨骼、肌肉、神经和皮肤全部移植。在 她之前，曾有两位法国患者和一位中国患者成功完成了换脸手术。接受该手术的中国患者为一名云南傈僳族男性。其在2007年年底出院后，曾停止服用抗免疫系 统排斥药物，2008年7月死亡。&lt;br /&gt;
39.智能海绵器件&lt;br /&gt;
“今天手术用了几块海绵?”&lt;br /&gt;
主治大夫和护士们今后不用再为此事纠结。&lt;br /&gt;
2007年6月，美国匹兹堡公司宣布其研制的智能海绵器件获得认证，即将推向市场。该产品使用了超市中防窃磁条类似的技术，可以计算出手术中海绵和纱布的使用数量。不过，使用这一技术的前提条件是，纱布或海绵上需要有永久性的一枚一角硬币大小的标签。&lt;br /&gt;
据统计，目前每1万次手术治疗，就有一次出现医疗异物遗留在病人体内的事件发生。其中海绵遗留事故大约占到2/3。&lt;br /&gt;
40.红外线体温测量仪&lt;br /&gt;
2009，在甲流攻势下，各大机场、海关、车站的红外线体温测量仪上布满彩色编码，这是每个路人的温度计：红色代表热，绿色表示没有。&lt;br /&gt;
该系统2003年由新加坡研制出来，马上在亚洲的公共场所广泛使用。在“非典”恐惧蔓延时期，这一系统可以时刻揭示某人的温度，监视他或她是否有可能会生病。&lt;br /&gt;
41.智能手套&lt;br /&gt;
一个聋哑女人在美国快餐店汉堡王点餐。她试图说些什么，她在很痛苦地表达。高中生瑞安·帕特森在旁边看着。他决定做一个将手语转化为文本的工具。利用高尔夫真皮手套、感应器和手持显示器，他成功了，并且获得了2002年美国西门子西屋科技竞赛最高奖。&lt;br /&gt;
他的后继者Hyung Jin Lim，则研究出了盲文手套。装有触觉传感器的点读头套在手套的食指上，经过手背后面的软件解译，再由蓝牙通信传到耳机中，把盲文读出。&lt;br /&gt;
42.口腔艾滋病毒测试法&lt;br /&gt;
将一根药签从齿龈处提取唾液，然后置于检测仪器中的流体内。一旦检测到病毒抗体，仪器上显示两条紫红线。&lt;br /&gt;
这不是在检查早孕，这是在检查艾滋病。&lt;br /&gt;
2004年，美国医学界宣布研制出艾滋病检查的口腔测试法，准确性可以达到99%。此种检测方法最大的弊端在于，目前其仅允许检测HIV-1抗体，不包括HIV-2。前者流行于美国，后者流行于非洲部分地区。&lt;br /&gt;
43.毓婷&lt;br /&gt;
1998年，北京紫竹药业研制并推广的紧急避孕药毓婷，结束了中国医药在紧急避孕领域的空白。&lt;br /&gt;
毓婷的主要成分为左炔诺孕酮，每片1.5毫克的剂量相当于12片常规避孕药的剂量。其明确说明可能出现恶心、呕吐、不规则出血以及月经紊乱。&lt;br /&gt;
目前中国市场销售最广的紧急避孕药除了毓婷之外，还有安婷和后定诺。两者避孕原理均为阻止业已形成的受精卵着床。&lt;br /&gt;
44.避孕补丁(贴片)&lt;br /&gt;
在身体上找一个隐蔽的地方贴上一张火柴盒大小的贴片，就可以避孕。&lt;br /&gt;
2002年美国《时代》周刊评选的当年最佳发明之一即为“避孕补丁”，就是如此神奇。它就像一块薄磁条，通过皮肤向血液中渗透本应该由避孕药提供的孕激素，并通过改变女性雌性激素量来控制排卵。&lt;br /&gt;
这款设计的致命缺陷是在超重的女性身体上失败率极高。同时，口服避孕药也可能导致女性体重增加。那医学界是否需要为超重女性量身定做一种避孕方式了?&lt;br /&gt;
45.木制骨骼&lt;br /&gt;
你相信你的骨头能够在木材中间生长吗?&lt;br /&gt;
这是一组意大利科学家正在研究的工作。2009年，他们宣布使用红橡木、藤茎和桃心木等木材制造出一种叫做碳酸羟磷灰石的人造骨。这种木材是海绵质结构，所以，骨骼组织在这种结构中的生长速度比在传统的肽或者陶瓷人造骨中更快，从而缩短了断裂骨骼的修复时间。&lt;br /&gt;
虽然目前手术尚处于动物实验阶段。但《时代》周刊毫不吝啬地把年度最佳发明之一给了他们。&lt;br /&gt;
46.肉毒杆菌&lt;br /&gt;
除了70岁以上和10岁以下的女人，几乎没有人不知道肉毒杆菌。&lt;br /&gt;
它本来是一种致命病菌，在繁殖过程中分泌毒素，达到使肌肉麻痹的效果。在战争期间，军队常常用肉毒杆菌制作生化武器。但恰恰是这种麻痹肌肉的作用使肉毒杆菌美容界大获盛名。从1992年开始，医生尝试将肉毒杆菌用于除皱，并获得了极佳的效果。&lt;br /&gt;
不过，目前已经有许多导演拒绝让施打肉毒杆菌的演员上阵，因为虽然美得巧夺天工，但是肌肉已经僵硬，完全无法做出正常的喜怒哀乐表情。&lt;br /&gt;
47. 零售基因测试仪&lt;br /&gt;
孟达尔花了10年时间种豌豆，才发现了遗传法则。你只需要399美元，在网上订购一台DNA唾液测试仪，你就能够知道你的遗传秘密。&lt;br /&gt;
2008年，美国一家名为23andMe的公司向市场推出了这款基因测试仪，他们可以通过回收客户唾液样本的方式，向客户提供90多项遗传标 志。例如，你的秃顶概论可能为90%。“其实(遗传标记)是你的数码表现形式。这是你从镜子中绝对看不到的有关自己性情的信息。”该公司创始人安妮·沃西 基这样评价。&lt;br /&gt;
如果基因测试对所有人开放，那以后男女征婚之前，会需要先提交一份自己的基因图表吗?&lt;br /&gt;
48.艾滋病“联合疫苗”&lt;br /&gt;
令全世界科学家最沮丧的病毒之一就是艾滋病病毒(HIV)。自1981年该病毒首次被发现以来，科学界在制作疫苗的过程中屡战屡败。&lt;br /&gt;
2009年，由美国和泰国研究人员共同研制出抵抗艾滋病病毒的“联合疫苗”。他们有效地将人体感染艾滋病毒的风险降低31%。这是人类首次获得具有免疫效果的艾滋病疫苗。&lt;br /&gt;
目前，全球每天新感染艾滋病病毒(HIV)的人高达7500人，每年有超过200万人死于艾滋病。&lt;br /&gt;
最好的艾滋病疫苗，是健康的性教育。&lt;br /&gt;
49.宫颈癌疫苗&lt;br /&gt;
全世界每年有20多万女性死于宫颈癌，梅艳芳只是2003年的20万分之一。&lt;br /&gt;
在这位香港歌坛天后去世后3年，美国医学界研究出了世界首例预防型癌症疫苗——宫颈癌疫苗加德西(Gardasil)。&lt;br /&gt;
少数高危型人乳头瘤病毒是引发70%宫颈癌案例的主要因素，因此，加德西疫苗正是针对人乳头瘤病毒的4种高危型亚型。不过，疫苗在女性9岁以后即可注射，共需3次，并且最好全部在女性第一次性行为前注射。&lt;br /&gt;
或许，在陪女儿去医院时，父母可以尝试提前进行一点性教育了。&lt;br /&gt;
50.神经转化技术&lt;br /&gt;
今年69岁的斯蒂芬·霍金在21岁时就失去了发音系统。现在，他可以通过神经信号与人交流。&lt;br /&gt;
神经转化技术是由一位澳大利亚程序员彼得·沙恩·福特开发完成。他的这套技术原理是，一个人可以利用皮肤表面电极接收神经信号，然后在经过人工智能分析后，便能够达到交流的目的。&lt;br /&gt;
2002年，福特与霍金合作改善这套系统。两年后，他们的技术令美国华盛顿特区一个四肢瘫痪、不能说话的男子利用神经信号旋转电视。&lt;br /&gt;
不用声音，不用动作，只用意念去控制电视。这就是神经转化技术的神奇。&lt;br /&gt;
51.隆胸手术&lt;br /&gt;
台湾名模林志玲在将近30岁时胸部“二次发育”成为34C，“辣妹”维多利亚的胸部也在10年之内3次增大成为34D。隆胸手术虽然诞生于上世纪中叶，但在本世纪中，它几乎成为女人之间秘而不宣的流行趋势。&lt;br /&gt;
隆胸手术主要分为注射式隆胸、脂肪移植和假体隆胸3种，其中，硅凝胶假体隆胸应用最为广泛，国内的手术价格为8000到20000元人民币不等。&lt;br /&gt;
于是，我们联想到了《满城尽带黄金甲》。&lt;br /&gt;
52.液体避孕套&lt;br /&gt;
其实，它只是一种杀菌剂。&lt;br /&gt;
2004年，中国芳心康乐宝公司向市场推出康乐宝杀菌膏，即液体避孕套。该公司宣称其药膏可以直接置于女性体内，对精子以及艾滋病病毒的灭杀率达到100%。此项技术获得2004年中国国家专利。&lt;br /&gt;
53.减肥药&lt;br /&gt;
女人们并不懂为何男人们要以瘦为美，但是他们的价值观决定了这是一个减肥药当道的时代。目前，世界各国用于减肥药品研究与开发的经费高达数十亿美元，利润则难以估算。在中国，仅市面销售的品牌减肥药即有90余种，均价达到每盒数百元。&lt;br /&gt;
减肥药的作用机理主要是通过食欲抑制剂、双胍类降血糖药使人体产生厌食的反映，或者是通过激素类药物加速新陈代谢。三者均有不同程度的副作用，特别是后者，可能会对心血管系统产生不利影响。&lt;br /&gt;
54.克隆技术&lt;br /&gt;
如果人类的繁衍可以通过无性生殖来实现，那生命还会如此重要吗?这个问题在1996年7月克隆羊“多利”来到这个世界后，开始变得现实起来。在它之后，是克隆鼠、猪、牛的诞生。&lt;br /&gt;
2007年，美国科学家米塔利波夫宣布成功克隆出猴子胚胎。2008年美国加州科学家宣布成功用人体皮肤细胞克隆出人体胚胎。在此之前，韩国科学家黄禹锡曾在2004年宣布成功克隆人类胚胎干细胞，2005年底他被证明造假。&lt;br /&gt;
在“多利”已经去世6年的今天，克隆技术的成功率仍然低得惊人，流产、畸变的状况没有得到实质性改善。或许，基因并不愿意向人类揭开自己神秘的面纱。&lt;br /&gt;
55.微创手术&lt;br /&gt;
法国医生Mouret在1987年偶然完成全球首例微创手术时，没有想到这标志着新的医学里程碑的诞生。&lt;br /&gt;
微创手术之前，医生在鼻咽癌切除手术时，需要把病人的颈切出很大的开口，以便把患处暴露出来。微创手术被发明之后，病人颈部只需要靠一个细孔， 把导管及照明设备伸进患处，医生便可以透过内窥镜完成手术。1998年微创手术首次在香港沙田威尔士亲王医院施行，随后引进中国大陆。相对传统的开刀手术 而言，微创手术对医师技术的要求更高。&lt;br /&gt;
环保类&lt;br /&gt;
56.太阳能&lt;br /&gt;
过去10年，你身边总会有一两件与太阳能有关的东西：它可能是太阳能热水器、太阳能电池、家门口的太阳能路灯，又或者你更in一些，手里正握着 一部太阳能手机。感谢后羿当年留下一个太阳，让我们可以用它来省电、省水、省煤气，虽然现在还不确定最后是不是还能省钱，但太阳能是最清洁的能源之一，我 们大力开发使用太阳能，也算是对地球母亲尽一点孝心吧。&lt;br /&gt;
57.风能&lt;br /&gt;
在刚刚过去的2009年，风力发电起步最早的江苏省如东县风力并网发电4.77亿千瓦时，相当于50万户居民用上了“绿色电”。如今，像如东一 样依靠风力发电的地区越来越多。如果你是个驴友，或许你常常在草原或是山岭看到一座座屹立着的风力发电站。每当大风来临，收集机就会自动调转方向，迎接暴 风的洗礼。不管风力有多大，来势有多猛，它一概取之，转成电能储存起来，为人们提供电力。&lt;br /&gt;
58.利乐包装&lt;br /&gt;
你有没有发觉，现在许多超市里已经没有袋装牛奶了。利乐包装，作为伊利、蒙牛、光明、娃哈哈、汇源等品牌的包装设备服务供应商越来越受到关注。 利乐秉持4R环保原则，即可再生(Renewing)、减量化(Reducing)、可循环(Recycling)、负责任(Responsibly)。 2008年利乐包装在中国的回收量达到28000吨，相当于大约28亿个250ml标准的利乐包装得到了循环再利用，是2004年的200倍左右。但是， 如果你想把奶茶捧在手心，要记住利乐包装是不能直接放在微波炉里加热的。&lt;br /&gt;
59.环保袋&lt;br /&gt;
2007年，一款名为“I am not a plastic bag”(我不是塑料袋)的环保袋红遍全球。最初，这个袋子只是奥斯卡组委会用来派发礼品的包装袋，结果嘉宾们收到之后，不约而同上映了一场“买椟还珠” 的好戏。紧接着，好莱坞当红女星凯拉·奈特利、超级名模莉莉·科尔提着它上街，顿时“袋凭人贵”，在全球掀起了一场环保袋热潮。如今，环保袋已经成了我们 上街必带的装备，同时它也是许多时尚设计师灵感的来源。游走于实用与时尚之间，环保袋是当仁不让的潮品。&lt;br /&gt;
60.住宅产业化&lt;br /&gt;
简单地说，“住宅产业化”就是把房子的各个构件，如柱、梁、楼梯、外墙等在车间里制作成型，然后运输到施工现场进行安装。因此，施工现场就不需 要切割打磨，大大减少了垃圾、污水、粉尘和噪音造成的污染。新方法所用木材量节省87%，用水量降低了70%，工人可以节省一半，施工速度也快三分之一左 右。由于采用标准化的作业且经过严格检验，其误差精确到毫米，比传统作业质量更高。如此一来，“楼脆脆”重现江湖的概率就少了许多。&lt;br /&gt;
61.电子账单&lt;br /&gt;
环境专家曾算过一笔账：按每张账单相当于一张A4纸计算，每节约5000张A4纸就等于节约1立方米木材，以上海800万电信用户为例，如果都 用电子账单，那么每年能节约近2万立方米木材，约相当于3500亩森林。如今，许多人都是电子账单的簇拥者，在网上查账、缴费、攒积分，方便又实惠。另 外，比起以前厚厚的一本飞机票，现在的电子客票只要拿身份证就能登机，无形中避免了许多到了机场却发现没带机票的杯具。&lt;br /&gt;
62.海水淡化&lt;br /&gt;
海水淡化即利用海水脱盐生产淡水，是实现水资源利用的开源增量技术，其不受时空和气候影响。在中国，走在海水淡化产业前列的是天津，大桶和小瓶 包装的淡化海水已摆在天津街头叫卖，价格和矿泉水差不多。中国的其他沿海城市近年来也在海水淡化领域取得良好发展。宁波、青岛、温州、厦门等许多城市都在 建设自己的海水淡化项目以供市民饮用。或许不久我们就会听到这样的广告语：“淡化海水，有点甜。”&lt;br /&gt;
63.秸秆还田&lt;br /&gt;
秸秆还田技术是以机械的方式将田间的农作物秸秆直接粉碎并抛洒于地表，随即耕翻入土，使之腐烂分解，从而培肥地力，实现农业增产增收。秸秆还田 使秸秆中的有机质得到充分的利用，避免了长期以来农民大量焚烧秸秆而造成的环境污染。截止到2009年，全国共投入各类秸秆还田机具39.83万台，实现 秸秆机械化还田面积3.41亿亩。“秸秆还田，好处连连”，希望中国8亿农民都能对这句话感同身受。&lt;br /&gt;
64.环保制冷&lt;br /&gt;
按照《蒙特利尔议定书》的规定，中国在2010年1月1日起全面禁用氟利昂类物质。取而代之的是环境友好、节约成本且性能可靠的自然制冷剂。 10年来，西门子、伊莱克斯、海尔、LG、三星等许多生产商都在使用这项技术，其所占市场份额一直在稳步增长。除了具有环保意义，自然制冷剂的价格与氟利 昂等传统制冷剂相比甚至更为便宜。&lt;br /&gt;
65.有机食品&lt;br /&gt;
有机食品根据国际有机农业生产要求和标准生产加工，完全不用化学合成的肥料、农药、生长调节剂等物质。选择本地出产的有机食品，不仅可以减少长途运输所需要的能源与二氧化碳的排放量，或许还能让你品味到泥土的芬芳和奶牛的心情。&lt;br /&gt;
66.绿色建材&lt;br /&gt;
10年间，家庭室内装修风格演绎了从奢华到自然的回归。无毒、无害、无污染，已成为当今人们居家环境的重点。现在，随着人们对健康和环保的关注 度越来越高，在装修时大多会选择环保涂料、绿色装饰材料和可持续型的木材。既然“蜗居”不可避免，那就让我们在有限的空间里塑造无限的温馨。&lt;br /&gt;
67.海藻炼油&lt;br /&gt;
2008年奥运会前期，作为奥运会帆船比赛所在地的青岛开展了一场如火如荼的“浒苔歼灭战”。浒苔属于绿藻类，其分泌的化学物质很可能会对其他 海洋生物造成不利影响，而且严重影响水上运动的进行。然而，它是祸害，也是宝贝。青岛每日将3000吨浒苔深加工成为高品质饲料、肥料出口欧美等国。其 实，海藻还能炼油。许多国家都在进行海藻炼油的研发工作，希望不久之后，在google输入“海藻”，搜索出来的条目真的是关于“炼油”而不是“小三”。&lt;br /&gt;
68.减肥&lt;br /&gt;
减肥?没错，减肥!减肥已经不仅是一种生活态度，更是一种环保态度。有英国研究者发现，体重超重的人无论是吃还是行方面都比瘦人排放出更多的温 室气体，平均每年比瘦人多排放1吨二氧化碳，从而对环境造成更大的破坏。此外，粮食生产是导致全球变暖的一个重要因素，因此人口较肥胖的国度对粮食的消耗 更大，产生的温室气体会更多。同时，这也给了那些爱美的姑娘一个冠冕的理由：“我减肥，因为我是环保主义者。”&lt;br /&gt;
生活类&lt;br /&gt;
69.7-11&lt;br /&gt;
1927年，美国得克萨斯州的南方公司首创便利店原型，主要零售冰品、牛奶、鸡蛋。1946年，该公司创造了世界上第一家真正意义上的便利店，将店铺命名为“7-11”，除经营日常必需的商品外，还协助附近社区居民收取电费、煤气费、水费等。&lt;br /&gt;
1992年，香港牛奶公司在深圳开设中国的第一家7-11店，今天的城市白领习惯在那里购买午餐，连莫文蔚也唱：固执的7-11，尾声啦夏天。&lt;br /&gt;
70.家电大卖场&lt;br /&gt;
近10年来，随着百货商场与超市基本退出了家电销售领域，“家电大卖场”成为了城市消费者购买家电的首选地点。在家电连锁大卖场，你不得不惊叹其与百货商场相比货品之齐全，你无需东奔西跑就可在各品牌产品中货比三家，被接连不断的节日促销所淹没。&lt;br /&gt;
71.地铁&lt;br /&gt;
电影《金鸡》里香港演员吴君如动情回忆了香港地铁刚开通的那些日子，那是1979年。地铁的开通，不但改变了许多人的生活，更成就了丰富多彩的 地铁文化。马伟豪的《地下铁》源自几米都市生活漫画，讲述的是地下铁里4位男女主人公互相牵连着的两段情缘。地铁情缘并非童话，以地下空间为载体、以地铁 车站为中心的全新的城市模式改变了人们的生活。不过，那是香港地铁，北京地铁……算了吧。&lt;br /&gt;
72.宜家&lt;br /&gt;
1934年，17岁的英格瓦·坎普拉德在瑞典南部的斯马兰创建了宜家公司。目前中国有7家，在 “卖家具，更卖生活方式”的购物体验中，长途跋涉的宜家购物团不辞辛苦地穿梭于京张铁路、成渝铁路、广深铁路。&lt;br /&gt;
73.快递&lt;br /&gt;
1980年7月，邮政机构也开始办理国际快递业务(EMS)。1984年，EMS开通了国内邮政速递业务，但当时国内快递这一概念还依附于邮政 系统，不同于现代物流意义上的快递运输。进入21世纪，随着越来越多的民营企业开展国内快递业务，快递真正进入了老百姓的生活。门到门递送、跟踪查询、高 效安全等特点使快递成为同城、异地寄送物件的首选。&lt;br /&gt;
74.港澳通行证&lt;br /&gt;
在香港、澳门已相继回归之后的21世纪，这个蓝色小本成就了无数购物团、观光团。&lt;br /&gt;
如今，港澳通行证签注只需电话、上网就可办理，个人游签注“足不出户”就可“搞掂”。&lt;br /&gt;
75.ATM机&lt;br /&gt;
自1986年第一台ATM机在中国银行珠海分行投放至今，人们对ATM机经历了由陌生到熟悉的过程。长期以来，去银行办理业务至少要花半天的时间，而ATM机自动柜员机、CDM自动存款机、存折补登机、触摸式多媒体电脑等设备的出现，缓解了此种局面。&lt;br /&gt;
76.外卖&lt;br /&gt;
10年间，我们让必胜客的披萨和麦当劳的汉堡在马路上奔跑，宫爆鸡丁坐上高级写字楼的电梯，鱼香肉丝穿过繁忙的街道。&lt;br /&gt;
77.网络游戏&lt;br /&gt;
虽然过度沉迷于网游的青少年可能被送到网戒中心，《魔兽世界》等网络游戏还是让不同性别职业的人放下现实的面具，在同一个环境里结盟、交往，让人们在网游的无限性中“无拘无束”、“无法无天”，体会超现实的理想与自我价值的实现。&lt;br /&gt;
78.星巴克&lt;br /&gt;
1999年1月，美大星巴克在北京国贸中心一层开设了中国大陆第一家星巴克。21世纪，咖啡文化随着星巴克在中国传播开来。在爵士乐中喝一杯咖啡、阅读杂志、无线上网，星巴克成了时尚和小资的代名词。&lt;br /&gt;
79.桶装水&lt;br /&gt;
城市的发展，密集型住宅及办公地点的出现，使桶装水有了市场，在任何时间，它能满足人们冷暖饮用的需要，然而，有关其水质和二次污染等环保问题的争论也接踵而至。&lt;br /&gt;
80.一卡通&lt;br /&gt;
“一卡通天下”虽然仅在广告中实现，但现代城市人的确不能没了一卡通。在很多城市，“城市一卡通”不仅方便于交通，还可用于便利店消费。而“银 行一卡通”实现电子支付，“校园一卡通”更具有身份识别和电子钱包功能，替代传统的工作证、学生证、借书证、餐券、医疗证等证件和现金。&lt;br /&gt;
81.经济型连锁酒店&lt;br /&gt;
经济型酒店把服务功能集中在住宿上，力求围绕着这一核心服务精益求精，而把餐饮、购物、娱乐功能大大压缩、简化，甚至撤掉。它们在某种意义上改 变了中国人的旅行方式——以前曾经主导这个市场的是星级酒店和众多不知名的招待所，前者的高价位和后者的服务差距给经济型连锁酒店留出了巨大的市场空间。&lt;br /&gt;
88.家政服务&lt;br /&gt;
中国大陆正步入家庭的小型化、人口的老龄化和生活的现代化，女性的积极参与社会经济生活，使得家务劳动需要通过其他途径来完成，这些都直接促进 了人们对家政服务的需求。2000年，劳动和社会保障部正式认定“家庭服务员”(即“保姆”)这一职业，家政服务踏上自身的“职业化”发展道路。护理产妇 和新生儿的月嫂已走进千家万户，搬家公司的一条龙服务更成了搬家的首选方式。&lt;br /&gt;
83.瑜伽&lt;br /&gt;
随着越来越多健身中心和瑜伽馆的出现，瑜伽成了中产阶级白领的一种生活态度，消除紧张、平静内心、修心养性等功效满足了城市人缓解压力的需求，减肥，治疗失眠、焦虑和关节炎等症状的疗效更使它广受追捧。&lt;br /&gt;
84.字幕组&lt;br /&gt;
没有字幕组，我们去哪里看美剧、韩剧、日剧啊?&lt;br /&gt;
85.体检机构&lt;br /&gt;
随着全民医疗知识的普及、健康意识的提升, 有病早治、无病先防成为人们的共识，近10年我国各类体检中心数量激增。据不完全统计，到2007年底我国有各类体检中心5000余家。&lt;br /&gt;
86.征婚网站&lt;br /&gt;
在Google上输入“征婚”一词，可获得1亿9千万条结果。世纪佳缘、嫁我网、珍爱网的广告广泛投放于邮箱、网站，读过这些征婚广告，你会认为这个世界上充满多金的俊男美女，他们都在寂寞和孤独中嗷嗷待哺，等待你的出现。&lt;br /&gt;
87.情趣用品&lt;br /&gt;
10年前如果有人进入情趣用品店，大家第一反应肯定是“这个人是不是身体有毛病?”而现在，情趣用品行业已经从过去“性替身”的雪中送炭时代，进入到“性趣提升”的锦上添花时代。&lt;br /&gt;
文化类&lt;br /&gt;
88.选秀&lt;br /&gt;
是的，恭喜，现在我们可以在电视上选举那个你最喜欢的家伙了。&lt;br /&gt;
89.艺术人生&lt;br /&gt;
没有朱军老师，我们的人生该变得多么不艺术啊!&lt;br /&gt;
90.百家讲坛&lt;br /&gt;
没有这些专家，我们得失去多少传统文化啊，嗯，对吧。&lt;br /&gt;
91.电视购物&lt;br /&gt;
10年间，从访谈式广告，到科普节目类广告、时事评论式广告，我们还有了大呼小叫的电视购物。怀念马景涛老师早期的作品吗?看电视购物广告吧。对了，还可以看到很多明星呢。&lt;br /&gt;
92.喜羊羊与灰太狼&lt;br /&gt;
我们小时候的偶像是那只猴子，现在的孩子喜欢的是这几只羊和一只永远抓不到羊的狼。&lt;br /&gt;
93.清宫戏&lt;br /&gt;
你得承认，皇帝戏永远是中国观众的最爱。前10年如此，这10年如此，未来10年估计还会如此，不信你看《2012》，里面都没缺个美国总统。&lt;br /&gt;
94.贺岁片&lt;br /&gt;
当冯小刚带着坏笑拍出一部部让你心神不宁的片子时，我们知道：坏了，这个时段基本归他了。&lt;br /&gt;
95.无厘头&lt;br /&gt;
因为周星驰，大家曾经无厘头，后来这一势力被恶搞削弱，或许是后面这个词更有力吧&lt;br /&gt;
96.段子&lt;br /&gt;
最早流行的叫北京出租车司机笑话，这10年开始是荤段子，现在最受欢迎的是针对新出社会新闻的妙语，比如：曹操出墓说明了2点：1、中国的房价已经涨得连曹操都没地方落脚睡觉了。2、就算你一代枭雄，也干不过中国的拆迁办!&lt;br /&gt;
97.天涯社区&lt;br /&gt;
经鉴定，凡是关于“小三”、婆媳关系、相亲、炫富、盗墓等话题，不发在天涯就不是个“华丽丽”的帖子。&lt;br /&gt;
98.观光团&lt;br /&gt;
在正义的网络观光团面前，一切丑陋都是尘埃。&lt;br /&gt;
99.网易盖楼团&lt;br /&gt;
网民智商有多高，得看网易盖楼团。&lt;br /&gt;
100.哥、姐&lt;br /&gt;
网络时代，辈分全乱了，不管你多大，都是哥和姐。有网络民谣曰：不要迷恋哥，哥只是传说;不要迷恋姐，姐让你吐血——这似乎可以概括网络10年来去中心化的成果。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;它们是科技的胜利，更是人性的胜利&lt;br /&gt;
网站类&lt;br /&gt;
1.Twitter.com&lt;br /&gt;
只有两种人会不喜欢Twitter，话痨和日报记者。前者会发现140字无法透彻表达观点，后者则被Twitter抢走了工作。奥巴马利用 Twitter助选，帕丁森在Twitter上宣传《暮色》，知道分子们在Twitter上交换最新资讯……自打2006年Twitter出现，人们就发 现，世界完全可以被解构成一大堆140字以内的碎片。微传播时代，只有真知灼见才具有被广泛传播的价值，垃圾信息的充盈会自我选择出真正有价值的信息。&lt;/p&gt;
&lt;p&gt;2.Facebook.com&lt;br /&gt;
小学时代坐你身旁扎小辫子的同桌如今长什么样?和你同在一个城市的都有哪些漂亮姑娘? Facebook都能告诉你。你自以为很了解女朋友么?说不定Facebook比你更了解。从2004年2月4日上线那天起，Facebook就把个人和 周边联系得更加紧密。作为全球用户量第一的交友网站，Facebook让老友重聚、新欢相识，除了留言和交换照片，还有超过5000个应用程序供你和朋友 们打发时间。&lt;br /&gt;
3.Wikipedia.com&lt;br /&gt;
万能的维基百科，它什么都知道。而且不只有英语、汉语，甚至还有闽南语、粤语和客家语。2001年1月15日上线到现在，全世界数十万人用超过 250种语言编辑了1000万篇条目的信息。这意味着不论你是谁，只要你有一根网线、一部电脑，你就能无偿为别人提供信息，同时获得更多的信息。维基百科 是互联网领域最早的“众包”概念实践者，同时，它也是市场调研公司和要写论文的毕业生们最大的福音。&lt;br /&gt;
4.Google.com&lt;br /&gt;
10年之后，一个典型的“G粉”的生活状态是这样的，早上被Google Android手机闹铃叫醒，用Google Reader迅速查看当天新闻头条，Gmail和Gtalk保证你与工作团队的沟通，电脑操作系统当然得是Google Chrome OS，Google翻译保证你即使不会英语也不至于在做报告的时候露怯。Google Calendar和Google Map则保证你不会错过下班的约会。简而言之，Google已经无处不在。难得的是，掌握了这么多资源的Google还能坚守“不作恶”。&lt;br /&gt;
5.Taobao.com&lt;br /&gt;
衣服、食品、手机充值卡、机票、电器……只有你想不到的，没有在Taobao买不到的。Taobao网完美地证明了一个经济学原理：需求和供给 相互决定。它用支付宝解决了困扰中国网民的信用危机，同时为中国广大无业青年、学生和小商品店主提供了赚钱的平台，让商品得到了最大限度的流通，让关税、 限制进口和地域分割都成了笑话。作为中国C2C商务领域当之无愧的王者，Taobao是中国3亿网民最爱的购物商场。不过，在Taobao你必须有一双火 眼金睛，才能真正淘到“宝”。&lt;br /&gt;
6.Youtube.com&lt;br /&gt;
只要你有部能拍短片的机器，就能利用Youtube提供的免费空间上传和分享自己的视频。Youtube满足了每个人都能做导演的蠢蠢欲动，也 为粉丝们提供了重温偶像精彩演出的便利途径。2005年2月，Youtube上线。世界各地的网民们蜂拥而至。利用Flash技术，Youtube便利地 储存和提供了大量视频服务。网民将Youtube比作自己的“记忆储存库”。土豆和优酷网作为本土Youtube，也为我们带来了无数欢乐。幸好，他们都 获得了信息网络传播视听节目许可证。&lt;br /&gt;
7.Blog&lt;br /&gt;
这是互联网上每个人都有权利拥有的“一亩三分地”。尽管早在2002年，博客在中国就已开始显山露水。但直到2005年，新浪以门户网站之姿， 强势介入博客市场，利用“名人博客”大力推广，才最终令博客风靡一时，成为网民的身份标识之一。在过去10年中，博客的草根性质及自由精神激发了网民的创 造力，促进了网络社会的开放，令集体智慧得到了最大限度的释放，同时不忘张扬个人的社会价值。博客，成为了记录过去10年中国及世界变化的最好载体之一。&lt;br /&gt;
8.专业购物网站&lt;br /&gt;
B2C(企业对消费者)的网站，在过去十年中有如韭菜，割了一茬，还会长出新的一茬。但风起云涌的竞争，最终受惠的还是我们消费者。卓越和当当的书，京东和新蛋的电器，折扣够低、货品够全，还能享受送货上门的便捷服务。我们有什么理由不选择这些网站呢?&lt;br /&gt;
科技类&lt;br /&gt;
9.iPod&lt;br /&gt;
没人明白为什么这个外观纯白、音质一般的播放器能够成为我们这10年的文化象征、时尚酷品和掌上宠物。从512M到160G，从纯白到多彩，苹 果公司用这个小玩意儿成功地打造了一个文化现象。虽然没几个人能真正把80G的iPod装满歌儿并且一首不落地听过去，但这不妨碍每个人都想拥有一台 iPod。这是《时代周刊》评选出的2001年百大最佳发明第一名，是香奈儿当家拉格菲尔德最爱的播放器，是你和众多名人同一的选择。&lt;br /&gt;
10.iPhone&lt;br /&gt;
在iPhone出现前，智能手机的代名词一直是Nokia、Motorola或者多普达，现在变成了iPhone。iPhone不仅仅是一部手 机，更是一部掌上游戏机、ipod、办公系统和互联网接入设备。它满足了你对一部手机的所有想象。而且用手指就可以触控，操作简单到了小学生和老人都能应 付自如的地步。iPhone革了智能手机的命，但我们也不能忘记其他手机厂家的努力，Nokia的Symbian系统，Motorola采用的 Linux，多普达固守的Windows Mobile都让我们过去10年的移动生活变得更加便利、轻松和快乐。&lt;br /&gt;
11.WIFI&lt;br /&gt;
全称Wireless Fidelity，是一种通过无线电波联网的技术。在WIFI出现前，想上网总得拖着一根长长的网线。最常见的WIFI就是通过无线路由器架构的家庭与办 公无线网，试想一下没有WIFI，你怎么能在厨房、客厅、阳台或者厕所随心所欲地收Email和看最新的美剧呢?当然，还得感谢星巴克和麦当劳这样的街头 WIFI热点，让我们打发了候机和逛街的无聊间歇。&lt;br /&gt;
12.WII&lt;br /&gt;
说WII拯救了老牌游戏机公司任天堂，当不为过。不过，与其说WII是一个游戏机，不如说它开创了人机互动的新纪元。在WII出现之前，不论是 PS3、XBOX360，还是传统的PC游戏，都难逃手柄和鼠标的束缚。WII的操作也需要通过无线感应控制器Wiimote来实现，但WII没有线路的 束缚，也没有复杂的按键控制，操作方式是最原始也最直接的——“体感互动”，即用你的身体动作来控制游戏，WII革了游戏机的命。而且，WII还能完成运 动和减肥的多重使命。&lt;br /&gt;
13.PSP&lt;br /&gt;
在动辄就要耗掉2小时的上班地铁路途中，如果失去了PSP和NDS这样的手持游戏设备，我们的生活会枯燥多少倍?而且，Sony公司推出的 PSP除了是一款游戏机以外，它还能听MP3、看视频(效果好于许多专业MP4)和看电子书。最新款的甚至内置了麦克风，配合Skype软件的效 果，PSP的对手，或许有一天会是iPhone。当然，单看游戏效果，PSP也不会让你失望。什么?还没玩过Locoroco和啪嗒砰?那你肯定不是潮 人。&lt;br /&gt;
14.数字机顶盒&lt;br /&gt;
数字机顶盒让我们可以在现有的模拟电视上观看数字电视节目，从而让看电视不再是一个单一的接受行为，增添了交互感。通过机顶盒，我们喜欢的电视 剧会在几点播放、最新的股票走势如何都尽在掌握。而点播电视电影、收听广播、利用电视上网等功能，则让观众不用再忍受某些又臭又长或是呆板笨拙的电视节 目，促进了中国电视业优胜劣汰。&lt;br /&gt;
15.QQ&lt;br /&gt;
QQ号比电话手机号码更快地实现了全民普及。10岁的学生不一定有手机，但幼儿园大班的孩子们就会互相交换QQ号码了。网络小胖和兔斯基通过 QQ表情走红，QQ菜园和QQ音速是城镇小青年们最爱的休闲游戏，Q币几乎成为了互联网界最火爆的通行货币。和QQ一起的还有MSN，两者的用户群加起 来，正好可以囊括我国3亿网民中的绝大多数，学生与白领、体力劳动者与公司职员。即时通讯软件节省了多少通话与办公成本啊，也缔造了多少……一夜情的机会 啊。&lt;br /&gt;
16.GPS&lt;br /&gt;
GPS 是全球定位系统的简称，利用卫星迅速测定你在地球的哪个角落。原本它是为军事用途而开发，或是为失踪的船舶、飞机与车辆导航。但现在，它是路盲司机的福 音、抓捕罪犯的利器以及偷情丈夫的克星。不论你在山高水远的哪个角落，指南针会随着地球磁极变化而失灵，GPS却能借助多颗已知位置的卫星与你的用户接收 机之间的距离，始终为你指引正确的方向。&lt;br /&gt;
17.DV&lt;br /&gt;
如果没有DV(数码摄像机)，Youtube的用户数量最起码会比现在少2/3。因为有了DV，电影这种每秒24格的艺术显得不再这么高不可 攀。成本降低和操作傻瓜化，令用影像记录我们的生活轨迹变得简单又普通。如果中国电影的水平可以随着DV普及的水平一样水涨船高，那就更好了。&lt;br /&gt;
18.DC&lt;br /&gt;
相比起还略嫌笨重、价格也相对偏高的DV，DC(数码照相机)更普及，也更实用。对于喜欢“上车睡觉，下车拍照”旅游方式的国人来说，DC的普及，绝对是雪中送碳级别的。&lt;br /&gt;
19.P2P&lt;br /&gt;
P2P有多受欢迎?德国互联网调研机构ipoque称，P2P已经彻底统治了当今的互联网，50%-90%的总流量都来自P2P程序。BT、电 驴、PPS……这些耳熟能详为我们带来大量精神食粮的程序，其根源都是P2P(点对点)技术。下载的同时上传、一个人的电脑拥有=所有人的电脑都 有，P2P技术的风靡体现了互联网的精神，平等、共享与互助。而P2P也代表了互联网的潮流，靠封，是怎么也封不住的。&lt;br /&gt;
20.Photoshop技术&lt;br /&gt;
Photoshop是一款图像处理软件。从第一版PS出现到现在，已有20余年之久。但在新世纪到来的这10年，PS却让众多中国人焕发了青 春，找到了自信。眼睛不够大，或者皮肤不够好，没关系，只要有Photoshop软件，10分钟内，芙蓉姐姐都能被修成林志玲。从来没有一款软件能像PS 一般，在如此之大的限度内满足人们的自我满足心理。&lt;br /&gt;
21.Skype&lt;br /&gt;
Skype是一家全球性互联网电话公司，也是海外游子与他们在国内的亲朋最熟悉的网络即时语音沟通工具。通过Skype，他们可以用远低于中国电信标准的资费进行沟通。而各家公司的语音与视频会议，借助Skype，也可省下一大笔运营成本。&lt;br /&gt;
22.LED&lt;br /&gt;
不管是奥运会开幕式、大型舞台剧还是祖国60周年庆，LED的灯光照明与显示效果都让我们为之赞叹。还记得奥运会开幕式上那幅徐徐展开的画卷 么?还记得闪闪发亮的“击缶而歌”么?这些都离不开LED。而对于普通人来说，LED的电脑和电视屏幕，更大、更薄、更亮，这不正是我们选购家电时的不懈 追求么?&lt;br /&gt;
23.APPS应用&lt;br /&gt;
APPS是Applications的缩写，意为应用程序。最早，它出自苹果公司的iPhone广告。但是紧接着人们发现，APPS早已无处不 在。Facebook上的所有插件、手机里的小游戏和办公程序、Google平台上多种多样的应用，从笔记本电脑到GPS系统，APPS汇集众人智慧，这 些不起眼的小插件才是智能系统中真正的主角。2009年最让中国人心神不宁的“开心农场”，就是一个典型的APPS应用程序。&lt;br /&gt;
24.混合动力汽车&lt;br /&gt;
混合动力汽车就是指在纯电动汽车上加装两个或两个以上的动力源。目的是减少汽车的污染，提高纯电动汽车的行驶里程。最流行的混合动力汽车一般是 指内燃机车发电机，再加上蓄电池的汽车。在如今全球能耗不断陷入危机、大气污染加剧的情况下，混合动力汽车无疑为我们指出了一个新方向。&lt;br /&gt;
25.金山词霸&lt;br /&gt;
过去10年是中国加速与国际融合的10年，而金山词霸为此做出了多少贡献，已很难计算。它曾是中国人装机的必备软件，一个个陌生的英文单词通过 金山词霸，变成了我们熟悉的方块字。而在和Google合作、推出免费版本后，金山词霸也开始向网络化转型，与其他众多提供翻译与查询服务的英文在线词典 一道，为国人和英文世界搭建起沟通的桥梁。&lt;br /&gt;
26.Windows XP&lt;br /&gt;
上面提到的所有这些网站与科技产品，几乎无一能逃过在Windows XP上应用的命运。Windows98之后，微软最成功的一款产品就是被国人戏称为“叉P”的Windows XP。而在Window Vista也不幸遭遇滑铁卢之后，XP成了当之无愧的10年操作系统王者。尽管有Linux、MAC OS和Chrome OS等追兵四起，有“盗版黑屏风波”，但作为最为流行又普通的操作系统，XP仍然为我们带来了无穷的欢乐。&lt;br /&gt;
27.RSS订阅&lt;br /&gt;
这是个信息爆炸的时代，同一条新闻可能会有上百个版本，而泛滥的个人博客与广泛的信息来源则可能会让你昏头转向。下次再被信息困扰的时候，别忘 了借助RSS技术来订阅你最感兴趣的那些网站。信息会按照你所希望的格式、地点、时间和方式，直接传送到你的网络设备上。50个博客、20个不断更新的新 闻页面、40个好玩的网站?没问题，所有的更新都可以被装在一个页面里。&lt;br /&gt;
28.Speedo&lt;br /&gt;
菲尔普斯在08奥运会上勇夺8块金牌，最该感谢的恐怕就是身上的Speedo鲨鱼泳衣。这款从面料到设计都只有一个目的——减低水中阻力、符合 人体工学从而促使泳速更快的泳衣缔造了21世纪前10年游泳运动发展的辉煌。自运动员穿上新型Speedo LZR RACER泳衣以来，25项世界纪录中的23项已经作古，运动员们共获得了47枚金牌及所有游泳奖牌数的89%。世界顶级的5支游泳队里，Speedo赞 助了其中的4支。&lt;br /&gt;
29.上网本&lt;br /&gt;
很多人以为它只是价格低廉、配置低端、身材小巧，然而这也正是上网本最大的优点。没人想出差在外一个月，每天还得拎着一个3公斤重的笔记本电脑 四处奔波。一个上网本，给多少长年出差在外的人带来了福音。而且，Intel对上网本的定义还有一条，“可以实现流畅播放流媒体和音乐功能。”这让孤单的 旅途增添了多少欢乐呀。&lt;br /&gt;
30.移动存储设备&lt;br /&gt;
U盘和移动硬盘的出现让我们忘记了公文包、动辄几十页的文件和纸质笔记本。什么都能数字化和文档化的今天，这些高容量的移动存储设备存储的不仅 仅是数字和文件，也是人类的智慧结晶。信息的传播和交流从来没有像现在这么便捷和快速过。而且，愈设计愈漂亮的U盘和移动硬盘，已经快成为艺术品的一个分 支了。还有，在多少电影里，坏人都是因为电脑的文件被U盘拷走而暴露的啊?&lt;br /&gt;
31.蓝牙&lt;br /&gt;
蓝牙是种无线电技术，手机、PDA、无线耳机、笔记本电脑，所有这些设备都能通过蓝牙互联起来，实现无线信息交换。蓝牙能够有效地简化移动通信 终端设备之间的通信，也能够成功地简化设备与互联网之间的通信，从而使数据传输变得更加迅速高效。蓝牙设备令驾驶更安全，司机们不需要再腾出一只手来打电 话。而长期爱煲电话粥的女人们，手肘和脖子也不会再如此酸痛。还有远程遥控音乐播放、免费通话、在地铁里寻觅打开蓝牙设备的陌生人，蓝牙为我们的生活提供 了更多可能性。&lt;br /&gt;
32.远程会议系统&lt;br /&gt;
用这一行领头羊思科公司的CEO钱伯斯的话来说，远程会议系统不仅仅只是方便了不同地区的公司员工一起开会，更是体现了整个科技产业的未来发展 方向：协作。世界又平又热又挤，绝大多数的500强公司都在世界各地有超过100家分公司，就连火锅店都在全国范围内有好几十家分店。怎么统筹管理、怎么 即时沟通、怎么有效优化资源，还是单靠飞来飞去?这样太贵、不环保而且没有效率。远程会议系统是一个管道工，帮你打通协作的管道。&lt;br /&gt;
33.Kindle&lt;br /&gt;
电子书不是什么高明科技产品，但Amazon Kindle绝对开创了电子书的新纪元。纸质的阅读感、超大的屏幕和不错的续航能力只是让Kindle流行的一部分因素，支持Amazon网上书店实时购 买的功能，意味着只需要花费两分钟下载，你手里的这本电子书就永远都能提供最新的内容。虽然在中国，这个功能几近浪费。但我国的电纸书厂家永远都能青出于 蓝而胜于蓝。产品更便宜，功能更多，除了能看书还能听MP3。而且……还有更多免费的书可看。&lt;br /&gt;
医学类&lt;br /&gt;
34.伟哥&lt;br /&gt;
那片蓝色小药丸给自己打的广告是：全世界每年有1.4亿男人在使用。它就是伟哥。美国《时代周刊》在它诞生时说：“世界等待它已经4000年!”&lt;br /&gt;
不过这片使男人们恣意狂欢的药丸，并未给“伟哥之父”—— 弗里德·穆拉德教授带来满足。他本希望研究一种扩张冠状动脉、改善冠心病的新药，但临床10年无显著疗效，并且副作用明显。而这种副作用正是使股沟附近的 血管直径显著增大，海绵体保持充血。他曾表示“如果时间倒退，我宁愿自己没有发明这种药”。1998年，“伟哥”正式上市。2000年，“伟哥”正式引进 中国内地。&lt;br /&gt;
伟哥虽然坚挺了男人的下半身，但最好的春药还是爱情。&lt;br /&gt;
35.人工心脏&lt;br /&gt;
那是2001年里非常普通的一天，一位不愿意透露身份的病人在路易斯市的犹太医院“舒适地休息”。在他的胸腔里，跳动着世界上第一颗完整移植的 不需要管线与外接电源的人工心脏。研发者麻省Abiomed公司表示，这种人工心脏使用电池电源，由钛金属和塑胶制造，可以将病人的生命延长60天至5 年。&lt;br /&gt;
2009年，中国宣布将在2010年推出中国制造的人工心脏。研发者中山哈特人工心脏试验室负责人象天工表示，如果此“中国心”可以早一年面世，或许可以拯救央视著名主持人罗京的生命。&lt;br /&gt;
36. 盲人复明技术&lt;br /&gt;
2009年10月，美国费城儿童医院等机构宣布其设计出名叫“腺相关病毒”的无毒性小病毒，让其携带没有缺陷的DNA直接进入病人的眼部，可以恢复病人眼部的光敏性。&lt;br /&gt;
与此同时，美国麻省理工大学宣布已经研制出一种能让盲人重获部分视力的微芯片。他们表示将在2010年的夏天开始在动物身上试验，幸运的话，临床试验将在几年内展开。在此之前，他们已经做了20年的研究。&lt;br /&gt;
37.仿生肢&lt;br /&gt;
残疾人奥斯卡·皮斯托瑞斯出生11个月时，就被截去膝盖以下的腿部。2008年，他的百米成绩是10秒91，只比博尔特的百米成绩慢了一秒。带给他这个成绩的是他那对只有8磅重的碳纤维仿生肢。&lt;br /&gt;
最早研究出仿生肢的是日本人。在2005年，他们发明了一种可以通过电脑控制的机械骨骼装置，可以模仿佩戴者的步态和身姿。次年，冰岛奥索公司将此技术进一步发展，并成功推向市场。&lt;br /&gt;
仿生肢虽好用，但价格不菲。奥斯卡·皮斯托瑞斯的一对假肢价格接近20万人民币，全世界使用者仅为300余人。还好，斯坦福大学的一群工程学系 学生2009年设计了一种造价只有区区160元人民币的假膝，由5块塑料以及4个螺母和螺栓构成，并且能够模仿天然关节的移动。&lt;br /&gt;
38.脸部移植&lt;br /&gt;
康妮公布她变脸前后的照片时，中国山东的一位网友留言说，“技术真强。”&lt;br /&gt;
康妮在2008年底接受美国第一例、全球第四例脸部移植手术。在经过22个小时的手术后，康妮脸部80%的骨骼、肌肉、神经和皮肤全部移植。在 她之前，曾有两位法国患者和一位中国患者成功完成了换脸手术。接受该手术的中国患者为一名云南傈僳族男性。其在2007年年底出院后，曾停止服用抗免疫系 统排斥药物，2008年7月死亡。&lt;br /&gt;
39.智能海绵器件&lt;br /&gt;
“今天手术用了几块海绵?”&lt;br /&gt;
主治大夫和护士们今后不用再为此事纠结。&lt;br /&gt;
2007年6月，美国匹兹堡公司宣布其研制的智能海绵器件获得认证，即将推向市场。该产品使用了超市中防窃磁条类似的技术，可以计算出手术中海绵和纱布的使用数量。不过，使用这一技术的前提条件是，纱布或海绵上需要有永久性的一枚一角硬币大小的标签。&lt;br /&gt;
据统计，目前每1万次手术治疗，就有一次出现医疗异物遗留在病人体内的事件发生。其中海绵遗留事故大约占到2/3。&lt;br /&gt;
40.红外线体温测量仪&lt;br /&gt;
2009，在甲流攻势下，各大机场、海关、车站的红外线体温测量仪上布满彩色编码，这是每个路人的温度计：红色代表热，绿色表示没有。&lt;br /&gt;
该系统2003年由新加坡研制出来，马上在亚洲的公共场所广泛使用。在“非典”恐惧蔓延时期，这一系统可以时刻揭示某人的温度，监视他或她是否有可能会生病。&lt;br /&gt;
41.智能手套&lt;br /&gt;
一个聋哑女人在美国快餐店汉堡王点餐。她试图说些什么，她在很痛苦地表达。高中生瑞安·帕特森在旁边看着。他决定做一个将手语转化为文本的工具。利用高尔夫真皮手套、感应器和手持显示器，他成功了，并且获得了2002年美国西门子西屋科技竞赛最高奖。&lt;br /&gt;
他的后继者Hyung Jin Lim，则研究出了盲文手套。装有触觉传感器的点读头套在手套的食指上，经过手背后面的软件解译，再由蓝牙通信传到耳机中，把盲文读出。&lt;br /&gt;
42.口腔艾滋病毒测试法&lt;br /&gt;
将一根药签从齿龈处提取唾液，然后置于检测仪器中的流体内。一旦检测到病毒抗体，仪器上显示两条紫红线。&lt;br /&gt;
这不是在检查早孕，这是在检查艾滋病。&lt;br /&gt;
2004年，美国医学界宣布研制出艾滋病检查的口腔测试法，准确性可以达到99%。此种检测方法最大的弊端在于，目前其仅允许检测HIV-1抗体，不包括HIV-2。前者流行于美国，后者流行于非洲部分地区。&lt;br /&gt;
43.毓婷&lt;br /&gt;
1998年，北京紫竹药业研制并推广的紧急避孕药毓婷，结束了中国医药在紧急避孕领域的空白。&lt;br /&gt;
毓婷的主要成分为左炔诺孕酮，每片1.5毫克的剂量相当于12片常规避孕药的剂量。其明确说明可能出现恶心、呕吐、不规则出血以及月经紊乱。&lt;br /&gt;
目前中国市场销售最广的紧急避孕药除了毓婷之外，还有安婷和后定诺。两者避孕原理均为阻止业已形成的受精卵着床。&lt;br /&gt;
44.避孕补丁(贴片)&lt;br /&gt;
在身体上找一个隐蔽的地方贴上一张火柴盒大小的贴片，就可以避孕。&lt;br /&gt;
2002年美国《时代》周刊评选的当年最佳发明之一即为“避孕补丁”，就是如此神奇。它就像一块薄磁条，通过皮肤向血液中渗透本应该由避孕药提供的孕激素，并通过改变女性雌性激素量来控制排卵。&lt;br /&gt;
这款设计的致命缺陷是在超重的女性身体上失败率极高。同时，口服避孕药也可能导致女性体重增加。那医学界是否需要为超重女性量身定做一种避孕方式了?&lt;br /&gt;
45.木制骨骼&lt;br /&gt;
你相信你的骨头能够在木材中间生长吗?&lt;br /&gt;
这是一组意大利科学家正在研究的工作。2009年，他们宣布使用红橡木、藤茎和桃心木等木材制造出一种叫做碳酸羟磷灰石的人造骨。这种木材是海绵质结构，所以，骨骼组织在这种结构中的生长速度比在传统的肽或者陶瓷人造骨中更快，从而缩短了断裂骨骼的修复时间。&lt;br /&gt;
虽然目前手术尚处于动物实验阶段。但《时代》周刊毫不吝啬地把年度最佳发明之一给了他们。&lt;br /&gt;
46.肉毒杆菌&lt;br /&gt;
除了70岁以上和10岁以下的女人，几乎没有人不知道肉毒杆菌。&lt;br /&gt;
它本来是一种致命病菌，在繁殖过程中分泌毒素，达到使肌肉麻痹的效果。在战争期间，军队常常用肉毒杆菌制作生化武器。但恰恰是这种麻痹肌肉的作用使肉毒杆菌美容界大获盛名。从1992年开始，医生尝试将肉毒杆菌用于除皱，并获得了极佳的效果。&lt;br /&gt;
不过，目前已经有许多导演拒绝让施打肉毒杆菌的演员上阵，因为虽然美得巧夺天工，但是肌肉已经僵硬，完全无法做出正常的喜怒哀乐表情。&lt;br /&gt;
47. 零售基因测试仪&lt;br /&gt;
孟达尔花了10年时间种豌豆，才发现了遗传法则。你只需要399美元，在网上订购一台DNA唾液测试仪，你就能够知道你的遗传秘密。&lt;br /&gt;
2008年，美国一家名为23andMe的公司向市场推出了这款基因测试仪，他们可以通过回收客户唾液样本的方式，向客户提供90多项遗传标 志。例如，你的秃顶概论可能为90%。“其实(遗传标记)是你的数码表现形式。这是你从镜子中绝对看不到的有关自己性情的信息。”该公司创始人安妮·沃西 基这样评价。&lt;br /&gt;
如果基因测试对所有人开放，那以后男女征婚之前，会需要先提交一份自己的基因图表吗?&lt;br /&gt;
48.艾滋病“联合疫苗”&lt;br /&gt;
令全世界科学家最沮丧的病毒之一就是艾滋病病毒(HIV)。自1981年该病毒首次被发现以来，科学界在制作疫苗的过程中屡战屡败。&lt;br /&gt;
2009年，由美国和泰国研究人员共同研制出抵抗艾滋病病毒的“联合疫苗”。他们有效地将人体感染艾滋病毒的风险降低31%。这是人类首次获得具有免疫效果的艾滋病疫苗。&lt;br /&gt;
目前，全球每天新感染艾滋病病毒(HIV)的人高达7500人，每年有超过200万人死于艾滋病。&lt;br /&gt;
最好的艾滋病疫苗，是健康的性教育。&lt;br /&gt;
49.宫颈癌疫苗&lt;br /&gt;
全世界每年有20多万女性死于宫颈癌，梅艳芳只是2003年的20万分之一。&lt;br /&gt;
在这位香港歌坛天后去世后3年，美国医学界研究出了世界首例预防型癌症疫苗——宫颈癌疫苗加德西(Gardasil)。&lt;br /&gt;
少数高危型人乳头瘤病毒是引发70%宫颈癌案例的主要因素，因此，加德西疫苗正是针对人乳头瘤病毒的4种高危型亚型。不过，疫苗在女性9岁以后即可注射，共需3次，并且最好全部在女性第一次性行为前注射。&lt;br /&gt;
或许，在陪女儿去医院时，父母可以尝试提前进行一点性教育了。&lt;br /&gt;
50.神经转化技术&lt;br /&gt;
今年69岁的斯蒂芬·霍金在21岁时就失去了发音系统。现在，他可以通过神经信号与人交流。&lt;br /&gt;
神经转化技术是由一位澳大利亚程序员彼得·沙恩·福特开发完成。他的这套技术原理是，一个人可以利用皮肤表面电极接收神经信号，然后在经过人工智能分析后，便能够达到交流的目的。&lt;br /&gt;
2002年，福特与霍金合作改善这套系统。两年后，他们的技术令美国华盛顿特区一个四肢瘫痪、不能说话的男子利用神经信号旋转电视。&lt;br /&gt;
不用声音，不用动作，只用意念去控制电视。这就是神经转化技术的神奇。&lt;br /&gt;
51.隆胸手术&lt;br /&gt;
台湾名模林志玲在将近30岁时胸部“二次发育”成为34C，“辣妹”维多利亚的胸部也在10年之内3次增大成为34D。隆胸手术虽然诞生于上世纪中叶，但在本世纪中，它几乎成为女人之间秘而不宣的流行趋势。&lt;br /&gt;
隆胸手术主要分为注射式隆胸、脂肪移植和假体隆胸3种，其中，硅凝胶假体隆胸应用最为广泛，国内的手术价格为8000到20000元人民币不等。&lt;br /&gt;
于是，我们联想到了《满城尽带黄金甲》。&lt;br /&gt;
52.液体避孕套&lt;br /&gt;
其实，它只是一种杀菌剂。&lt;br /&gt;
2004年，中国芳心康乐宝公司向市场推出康乐宝杀菌膏，即液体避孕套。该公司宣称其药膏可以直接置于女性体内，对精子以及艾滋病病毒的灭杀率达到100%。此项技术获得2004年中国国家专利。&lt;br /&gt;
53.减肥药&lt;br /&gt;
女人们并不懂为何男人们要以瘦为美，但是他们的价值观决定了这是一个减肥药当道的时代。目前，世界各国用于减肥药品研究与开发的经费高达数十亿美元，利润则难以估算。在中国，仅市面销售的品牌减肥药即有90余种，均价达到每盒数百元。&lt;br /&gt;
减肥药的作用机理主要是通过食欲抑制剂、双胍类降血糖药使人体产生厌食的反映，或者是通过激素类药物加速新陈代谢。三者均有不同程度的副作用，特别是后者，可能会对心血管系统产生不利影响。&lt;br /&gt;
54.克隆技术&lt;br /&gt;
如果人类的繁衍可以通过无性生殖来实现，那生命还会如此重要吗?这个问题在1996年7月克隆羊“多利”来到这个世界后，开始变得现实起来。在它之后，是克隆鼠、猪、牛的诞生。&lt;br /&gt;
2007年，美国科学家米塔利波夫宣布成功克隆出猴子胚胎。2008年美国加州科学家宣布成功用人体皮肤细胞克隆出人体胚胎。在此之前，韩国科学家黄禹锡曾在2004年宣布成功克隆人类胚胎干细胞，2005年底他被证明造假。&lt;br /&gt;
在“多利”已经去世6年的今天，克隆技术的成功率仍然低得惊人，流产、畸变的状况没有得到实质性改善。或许，基因并不愿意向人类揭开自己神秘的面纱。&lt;br /&gt;
55.微创手术&lt;br /&gt;
法国医生Mouret在1987年偶然完成全球首例微创手术时，没有想到这标志着新的医学里程碑的诞生。&lt;br /&gt;
微创手术之前，医生在鼻咽癌切除手术时，需要把病人的颈切出很大的开口，以便把患处暴露出来。微创手术被发明之后，病人颈部只需要靠一个细孔， 把导管及照明设备伸进患处，医生便可以透过内窥镜完成手术。1998年微创手术首次在香港沙田威尔士亲王医院施行，随后引进中国大陆。相对传统的开刀手术 而言，微创手术对医师技术的要求更高。&lt;br /&gt;
环保类&lt;br /&gt;
56.太阳能&lt;br /&gt;
过去10年，你身边总会有一两件与太阳能有关的东西：它可能是太阳能热水器、太阳能电池、家门口的太阳能路灯，又或者你更in一些，手里正握着 一部太阳能手机。感谢后羿当年留下一个太阳，让我们可以用它来省电、省水、省煤气，虽然现在还不确定最后是不是还能省钱，但太阳能是最清洁的能源之一，我 们大力开发使用太阳能，也算是对地球母亲尽一点孝心吧。&lt;br /&gt;
57.风能&lt;br /&gt;
在刚刚过去的2009年，风力发电起步最早的江苏省如东县风力并网发电4.77亿千瓦时，相当于50万户居民用上了“绿色电”。如今，像如东一 样依靠风力发电的地区越来越多。如果你是个驴友，或许你常常在草原或是山岭看到一座座屹立着的风力发电站。每当大风来临，收集机就会自动调转方向，迎接暴 风的洗礼。不管风力有多大，来势有多猛，它一概取之，转成电能储存起来，为人们提供电力。&lt;br /&gt;
58.利乐包装&lt;br /&gt;
你有没有发觉，现在许多超市里已经没有袋装牛奶了。利乐包装，作为伊利、蒙牛、光明、娃哈哈、汇源等品牌的包装设备服务供应商越来越受到关注。 利乐秉持4R环保原则，即可再生(Renewing)、减量化(Reducing)、可循环(Recycling)、负责任(Responsibly)。 2008年利乐包装在中国的回收量达到28000吨，相当于大约28亿个250ml标准的利乐包装得到了循环再利用，是2004年的200倍左右。但是， 如果你想把奶茶捧在手心，要记住利乐包装是不能直接放在微波炉里加热的。&lt;br /&gt;
59.环保袋&lt;br /&gt;
2007年，一款名为“I am not a plastic bag”(我不是塑料袋)的环保袋红遍全球。最初，这个袋子只是奥斯卡组委会用来派发礼品的包装袋，结果嘉宾们收到之后，不约而同上映了一场“买椟还珠” 的好戏。紧接着，好莱坞当红女星凯拉·奈特利、超级名模莉莉·科尔提着它上街，顿时“袋凭人贵”，在全球掀起了一场环保袋热潮。如今，环保袋已经成了我们 上街必带的装备，同时它也是许多时尚设计师灵感的来源。游走于实用与时尚之间，环保袋是当仁不让的潮品。&lt;br /&gt;
60.住宅产业化&lt;br /&gt;
简单地说，“住宅产业化”就是把房子的各个构件，如柱、梁、楼梯、外墙等在车间里制作成型，然后运输到施工现场进行安装。因此，施工现场就不需 要切割打磨，大大减少了垃圾、污水、粉尘和噪音造成的污染。新方法所用木材量节省87%，用水量降低了70%，工人可以节省一半，施工速度也快三分之一左 右。由于采用标准化的作业且经过严格检验，其误差精确到毫米，比传统作业质量更高。如此一来，“楼脆脆”重现江湖的概率就少了许多。&lt;br /&gt;
61.电子账单&lt;br /&gt;
环境专家曾算过一笔账：按每张账单相当于一张A4纸计算，每节约5000张A4纸就等于节约1立方米木材，以上海800万电信用户为例，如果都 用电子账单，那么每年能节约近2万立方米木材，约相当于3500亩森林。如今，许多人都是电子账单的簇拥者，在网上查账、缴费、攒积分，方便又实惠。另 外，比起以前厚厚的一本飞机票，现在的电子客票只要拿身份证就能登机，无形中避免了许多到了机场却发现没带机票的杯具。&lt;br /&gt;
62.海水淡化&lt;br /&gt;
海水淡化即利用海水脱盐生产淡水，是实现水资源利用的开源增量技术，其不受时空和气候影响。在中国，走在海水淡化产业前列的是天津，大桶和小瓶 包装的淡化海水已摆在天津街头叫卖，价格和矿泉水差不多。中国的其他沿海城市近年来也在海水淡化领域取得良好发展。宁波、青岛、温州、厦门等许多城市都在 建设自己的海水淡化项目以供市民饮用。或许不久我们就会听到这样的广告语：“淡化海水，有点甜。”&lt;br /&gt;
63.秸秆还田&lt;br /&gt;
秸秆还田技术是以机械的方式将田间的农作物秸秆直接粉碎并抛洒于地表，随即耕翻入土，使之腐烂分解，从而培肥地力，实现农业增产增收。秸秆还田 使秸秆中的有机质得到充分的利用，避免了长期以来农民大量焚烧秸秆而造成的环境污染。截止到2009年，全国共投入各类秸秆还田机具39.83万台，实现 秸秆机械化还田面积3.41亿亩。“秸秆还田，好处连连”，希望中国8亿农民都能对这句话感同身受。&lt;br /&gt;
64.环保制冷&lt;br /&gt;
按照《蒙特利尔议定书》的规定，中国在2010年1月1日起全面禁用氟利昂类物质。取而代之的是环境友好、节约成本且性能可靠的自然制冷剂。 10年来，西门子、伊莱克斯、海尔、LG、三星等许多生产商都在使用这项技术，其所占市场份额一直在稳步增长。除了具有环保意义，自然制冷剂的价格与氟利 昂等传统制冷剂相比甚至更为便宜。&lt;br /&gt;
65.有机食品&lt;br /&gt;
有机食品根据国际有机农业生产要求和标准生产加工，完全不用化学合成的肥料、农药、生长调节剂等物质。选择本地出产的有机食品，不仅可以减少长途运输所需要的能源与二氧化碳的排放量，或许还能让你品味到泥土的芬芳和奶牛的心情。&lt;br /&gt;
66.绿色建材&lt;br /&gt;
10年间，家庭室内装修风格演绎了从奢华到自然的回归。无毒、无害、无污染，已成为当今人们居家环境的重点。现在，随着人们对健康和环保的关注 度越来越高，在装修时大多会选择环保涂料、绿色装饰材料和可持续型的木材。既然“蜗居”不可避免，那就让我们在有限的空间里塑造无限的温馨。&lt;br /&gt;
67.海藻炼油&lt;br /&gt;
2008年奥运会前期，作为奥运会帆船比赛所在地的青岛开展了一场如火如荼的“浒苔歼灭战”。浒苔属于绿藻类，其分泌的化学物质很可能会对其他 海洋生物造成不利影响，而且严重影响水上运动的进行。然而，它是祸害，也是宝贝。青岛每日将3000吨浒苔深加工成为高品质饲料、肥料出口欧美等国。其 实，海藻还能炼油。许多国家都在进行海藻炼油的研发工作，希望不久之后，在google输入“海藻”，搜索出来的条目真的是关于“炼油”而不是“小三”。&lt;br /&gt;
68.减肥&lt;br /&gt;
减肥?没错，减肥!减肥已经不仅是一种生活态度，更是一种环保态度。有英国研究者发现，体重超重的人无论是吃还是行方面都比瘦人排放出更多的温 室气体，平均每年比瘦人多排放1吨二氧化碳，从而对环境造成更大的破坏。此外，粮食生产是导致全球变暖的一个重要因素，因此人口较肥胖的国度对粮食的消耗 更大，产生的温室气体会更多。同时，这也给了那些爱美的姑娘一个冠冕的理由：“我减肥，因为我是环保主义者。”&lt;br /&gt;
生活类&lt;br /&gt;
69.7-11&lt;br /&gt;
1927年，美国得克萨斯州的南方公司首创便利店原型，主要零售冰品、牛奶、鸡蛋。1946年，该公司创造了世界上第一家真正意义上的便利店，将店铺命名为“7-11”，除经营日常必需的商品外，还协助附近社区居民收取电费、煤气费、水费等。&lt;br /&gt;
1992年，香港牛奶公司在深圳开设中国的第一家7-11店，今天的城市白领习惯在那里购买午餐，连莫文蔚也唱：固执的7-11，尾声啦夏天。&lt;br /&gt;
70.家电大卖场&lt;br /&gt;
近10年来，随着百货商场与超市基本退出了家电销售领域，“家电大卖场”成为了城市消费者购买家电的首选地点。在家电连锁大卖场，你不得不惊叹其与百货商场相比货品之齐全，你无需东奔西跑就可在各品牌产品中货比三家，被接连不断的节日促销所淹没。&lt;br /&gt;
71.地铁&lt;br /&gt;
电影《金鸡》里香港演员吴君如动情回忆了香港地铁刚开通的那些日子，那是1979年。地铁的开通，不但改变了许多人的生活，更成就了丰富多彩的 地铁文化。马伟豪的《地下铁》源自几米都市生活漫画，讲述的是地下铁里4位男女主人公互相牵连着的两段情缘。地铁情缘并非童话，以地下空间为载体、以地铁 车站为中心的全新的城市模式改变了人们的生活。不过，那是香港地铁，北京地铁……算了吧。&lt;br /&gt;
72.宜家&lt;br /&gt;
1934年，17岁的英格瓦·坎普拉德在瑞典南部的斯马兰创建了宜家公司。目前中国有7家，在 “卖家具，更卖生活方式”的购物体验中，长途跋涉的宜家购物团不辞辛苦地穿梭于京张铁路、成渝铁路、广深铁路。&lt;br /&gt;
73.快递&lt;br /&gt;
1980年7月，邮政机构也开始办理国际快递业务(EMS)。1984年，EMS开通了国内邮政速递业务，但当时国内快递这一概念还依附于邮政 系统，不同于现代物流意义上的快递运输。进入21世纪，随着越来越多的民营企业开展国内快递业务，快递真正进入了老百姓的生活。门到门递送、跟踪查询、高 效安全等特点使快递成为同城、异地寄送物件的首选。&lt;br /&gt;
74.港澳通行证&lt;br /&gt;
在香港、澳门已相继回归之后的21世纪，这个蓝色小本成就了无数购物团、观光团。&lt;br /&gt;
如今，港澳通行证签注只需电话、上网就可办理，个人游签注“足不出户”就可“搞掂”。&lt;br /&gt;
75.ATM机&lt;br /&gt;
自1986年第一台ATM机在中国银行珠海分行投放至今，人们对ATM机经历了由陌生到熟悉的过程。长期以来，去银行办理业务至少要花半天的时间，而ATM机自动柜员机、CDM自动存款机、存折补登机、触摸式多媒体电脑等设备的出现，缓解了此种局面。&lt;br /&gt;
76.外卖&lt;br /&gt;
10年间，我们让必胜客的披萨和麦当劳的汉堡在马路上奔跑，宫爆鸡丁坐上高级写字楼的电梯，鱼香肉丝穿过繁忙的街道。&lt;br /&gt;
77.网络游戏&lt;br /&gt;
虽然过度沉迷于网游的青少年可能被送到网戒中心，《魔兽世界》等网络游戏还是让不同性别职业的人放下现实的面具，在同一个环境里结盟、交往，让人们在网游的无限性中“无拘无束”、“无法无天”，体会超现实的理想与自我价值的实现。&lt;br /&gt;
78.星巴克&lt;br /&gt;
1999年1月，美大星巴克在北京国贸中心一层开设了中国大陆第一家星巴克。21世纪，咖啡文化随着星巴克在中国传播开来。在爵士乐中喝一杯咖啡、阅读杂志、无线上网，星巴克成了时尚和小资的代名词。&lt;br /&gt;
79.桶装水&lt;br /&gt;
城市的发展，密集型住宅及办公地点的出现，使桶装水有了市场，在任何时间，它能满足人们冷暖饮用的需要，然而，有关其水质和二次污染等环保问题的争论也接踵而至。&lt;br /&gt;
80.一卡通&lt;br /&gt;
“一卡通天下”虽然仅在广告中实现，但现代城市人的确不能没了一卡通。在很多城市，“城市一卡通”不仅方便于交通，还可用于便利店消费。而“银 行一卡通”实现电子支付，“校园一卡通”更具有身份识别和电子钱包功能，替代传统的工作证、学生证、借书证、餐券、医疗证等证件和现金。&lt;br /&gt;
81.经济型连锁酒店&lt;br /&gt;
经济型酒店把服务功能集中在住宿上，力求围绕着这一核心服务精益求精，而把餐饮、购物、娱乐功能大大压缩、简化，甚至撤掉。它们在某种意义上改 变了中国人的旅行方式——以前曾经主导这个市场的是星级酒店和众多不知名的招待所，前者的高价位和后者的服务差距给经济型连锁酒店留出了巨大的市场空间。&lt;br /&gt;
88.家政服务&lt;br /&gt;
中国大陆正步入家庭的小型化、人口的老龄化和生活的现代化，女性的积极参与社会经济生活，使得家务劳动需要通过其他途径来完成，这些都直接促进 了人们对家政服务的需求。2000年，劳动和社会保障部正式认定“家庭服务员”(即“保姆”)这一职业，家政服务踏上自身的“职业化”发展道路。护理产妇 和新生儿的月嫂已走进千家万户，搬家公司的一条龙服务更成了搬家的首选方式。&lt;br /&gt;
83.瑜伽&lt;br /&gt;
随着越来越多健身中心和瑜伽馆的出现，瑜伽成了中产阶级白领的一种生活态度，消除紧张、平静内心、修心养性等功效满足了城市人缓解压力的需求，减肥，治疗失眠、焦虑和关节炎等症状的疗效更使它广受追捧。&lt;br /&gt;
84.字幕组&lt;br /&gt;
没有字幕组，我们去哪里看美剧、韩剧、日剧啊?&lt;br /&gt;
85.体检机构&lt;br /&gt;
随着全民医疗知识的普及、健康意识的提升, 有病早治、无病先防成为人们的共识，近10年我国各类体检中心数量激增。据不完全统计，到2007年底我国有各类体检中心5000余家。&lt;br /&gt;
86.征婚网站&lt;br /&gt;
在Google上输入“征婚”一词，可获得1亿9千万条结果。世纪佳缘、嫁我网、珍爱网的广告广泛投放于邮箱、网站，读过这些征婚广告，你会认为这个世界上充满多金的俊男美女，他们都在寂寞和孤独中嗷嗷待哺，等待你的出现。&lt;br /&gt;
87.情趣用品&lt;br /&gt;
10年前如果有人进入情趣用品店，大家第一反应肯定是“这个人是不是身体有毛病?”而现在，情趣用品行业已经从过去“性替身”的雪中送炭时代，进入到“性趣提升”的锦上添花时代。&lt;br /&gt;
文化类&lt;br /&gt;
88.选秀&lt;br /&gt;
是的，恭喜，现在我们可以在电视上选举那个你最喜欢的家伙了。&lt;br /&gt;
89.艺术人生&lt;br /&gt;
没有朱军老师，我们的人生该变得多么不艺术啊!&lt;br /&gt;
90.百家讲坛&lt;br /&gt;
没有这些专家，我们得失去多少传统文化啊，嗯，对吧。&lt;br /&gt;
91.电视购物&lt;br /&gt;
10年间，从访谈式广告，到科普节目类广告、时事评论式广告，我们还有了大呼小叫的电视购物。怀念马景涛老师早期的作品吗?看电视购物广告吧。对了，还可以看到很多明星呢。&lt;br /&gt;
92.喜羊羊与灰太狼&lt;br /&gt;
我们小时候的偶像是那只猴子，现在的孩子喜欢的是这几只羊和一只永远抓不到羊的狼。&lt;br /&gt;
93.清宫戏&lt;br /&gt;
你得承认，皇帝戏永远是中国观众的最爱。前10年如此，这10年如此，未来10年估计还会如此，不信你看《2012》，里面都没缺个美国总统。&lt;br /&gt;
94.贺岁片&lt;br /&gt;
当冯小刚带着坏笑拍出一部部让你心神不宁的片子时，我们知道：坏了，这个时段基本归他了。&lt;br /&gt;
95.无厘头&lt;br /&gt;
因为周星驰，大家曾经无厘头，后来这一势力被恶搞削弱，或许是后面这个词更有力吧&lt;br /&gt;
96.段子&lt;br /&gt;
最早流行的叫北京出租车司机笑话，这10年开始是荤段子，现在最受欢迎的是针对新出社会新闻的妙语，比如：曹操出墓说明了2点：1、中国的房价已经涨得连曹操都没地方落脚睡觉了。2、就算你一代枭雄，也干不过中国的拆迁办!&lt;br /&gt;
97.天涯社区&lt;br /&gt;
经鉴定，凡是关于“小三”、婆媳关系、相亲、炫富、盗墓等话题，不发在天涯就不是个“华丽丽”的帖子。&lt;br /&gt;
98.观光团&lt;br /&gt;
在正义的网络观光团面前，一切丑陋都是尘埃。&lt;br /&gt;
99.网易盖楼团&lt;br /&gt;
网民智商有多高，得看网易盖楼团。&lt;br /&gt;
100.哥、姐&lt;br /&gt;
网络时代，辈分全乱了，不管你多大，都是哥和姐。有网络民谣曰：不要迷恋哥，哥只是传说;不要迷恋姐，姐让你吐血——这似乎可以概括网络10年来去中心化的成果。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：责任链模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e8%25b4%25a3%25e4%25bb%25bb%25e9%2593%25be%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-07T06:06:42+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e8%b4%a3%e4%bb%bb%e9%93%be%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     责任链模式的典型应用就是过滤器！我们来模拟一下：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//模拟Request和Response类
public class Request{
	private HashMap&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();

	public void setAttribute(String key,String value){
		 map.put(key,value);
	}

	public String getAttribute(String key){
		return  map.get(key);
	}

	public String toString(){
		String return_str = &quot;&quot;;
		Set key = map.keySet();
		 Iterator i = key.iterator();
		 while (i.hasNext()){
			 return_str = return_str + &quot;=====&quot; + map.get(i.next());
		 }
		 return return_str;
	}
}

public class Response{
	private HashMap&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();

	public void setAttribute(String key,String value){
		 map.put(key,value);
	}

	public String getAttribute(String key){
		return  map.get(key);
	}

	public String toString(){
		String return_str = &quot;&quot;;
		Set key = map.keySet();
		 Iterator i = key.iterator();
		 while (i.hasNext()){
			 return_str = return_str + &quot;=====&quot; + map.get(i.next());
		 }
		 return return_str;
	}
}

//Filter接口及其实现类
public interface Filter{
	public void doFilter(Request request,Response response,FilterChain chain);
}

public class CheckFilter implements Filter{
	@Override
	public void doFilter(Request request,Response response,FilterChain chain){
          request.setAttribute(&quot;name&quot;,request.getAttribute(&quot;name&quot;)+&quot;Check&quot;);
		  chain.doFilter(request,response,chain);
		  response.setAttribute(&quot;name&quot;,response.getAttribute(&quot;name&quot;)+&quot;Check&quot;);
	}
}

public class LoginFilter implements Filter{

    @Override
	public void doFilter(Request request,Response response,FilterChain chain){
          request.setAttribute(&quot;name&quot;,request.getAttribute(&quot;name&quot;)+&quot;Login&quot;);
		  chain.doFilter(request,response,chain);
		  response.setAttribute(&quot;name&quot;,response.getAttribute(&quot;name&quot;)+&quot;Login&quot;);
	}
}

//FilterChain维护了一个Filter的链
public class FilterChain {

	private LinkedList&lt;filter&gt; list = new LinkedList&lt;filter&gt;();
	private int index = 0;


	public FilterChain addFilter(Filter filter){
		list.add(filter);
		return this;
	}

	public void doFilter(Request request,Response response,FilterChain chain){
		if(index == list.size()) {
			return;
		}

		Filter f = list.get(index);
		index ++;
		f.doFilter(request, response, chain);
	}
}

//测试
public class  ChainTest{



	@Before
	public void init(){

	}

    @Test
    public void testChain(){
        Request r = new Request();
		Response p = new Response();
		r.setAttribute(&quot;name&quot;,&quot;Ivan&quot;);
		p.setAttribute(&quot;name&quot;,&quot;Ivan&quot;);

        FilterChain chain = new FilterChain();
		chain.addFilter(new LoginFilter()).addFilter(new CheckFilter());

		chain.doFilter(r,p,chain);

        System.out.println(r.toString());
		System.out.println(p.toString());
    }
}
&lt;/filter&gt;&lt;/filter&gt;&lt;/pre&gt;
&lt;p&gt;     如上代码是责任链模式的一个变种。你可以去除FilterChain类，在每个Filter里面维护一个Filter实例，指向下一个Filter（链表的结构），在doFilter中进行判断。这样就是一个基本的责任链模式了。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     责任链模式的典型应用就是过滤器！我们来模拟一下：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//模拟Request和Response类
public class Request{
	private HashMap&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();

	public void setAttribute(String key,String value){
		 map.put(key,value);
	}

	public String getAttribute(String key){
		return  map.get(key);
	}

	public String toString(){
		String return_str = &quot;&quot;;
		Set key = map.keySet();
		 Iterator i = key.iterator();
		 while (i.hasNext()){
			 return_str = return_str + &quot;=====&quot; + map.get(i.next());
		 }
		 return return_str;
	}
}

public class Response{
	private HashMap&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();

	public void setAttribute(String key,String value){
		 map.put(key,value);
	}

	public String getAttribute(String key){
		return  map.get(key);
	}

	public String toString(){
		String return_str = &quot;&quot;;
		Set key = map.keySet();
		 Iterator i = key.iterator();
		 while (i.hasNext()){
			 return_str = return_str + &quot;=====&quot; + map.get(i.next());
		 }
		 return return_str;
	}
}

//Filter接口及其实现类
public interface Filter{
	public void doFilter(Request request,Response response,FilterChain chain);
}

public class CheckFilter implements Filter{
	@Override
	public void doFilter(Request request,Response response,FilterChain chain){
          request.setAttribute(&quot;name&quot;,request.getAttribute(&quot;name&quot;)+&quot;Check&quot;);
		  chain.doFilter(request,response,chain);
		  response.setAttribute(&quot;name&quot;,response.getAttribute(&quot;name&quot;)+&quot;Check&quot;);
	}
}

public class LoginFilter implements Filter{

    @Override
	public void doFilter(Request request,Response response,FilterChain chain){
          request.setAttribute(&quot;name&quot;,request.getAttribute(&quot;name&quot;)+&quot;Login&quot;);
		  chain.doFilter(request,response,chain);
		  response.setAttribute(&quot;name&quot;,response.getAttribute(&quot;name&quot;)+&quot;Login&quot;);
	}
}

//FilterChain维护了一个Filter的链
public class FilterChain {

	private LinkedList&lt;filter&gt; list = new LinkedList&lt;filter&gt;();
	private int index = 0;


	public FilterChain addFilter(Filter filter){
		list.add(filter);
		return this;
	}

	public void doFilter(Request request,Response response,FilterChain chain){
		if(index == list.size()) {
			return;
		}

		Filter f = list.get(index);
		index ++;
		f.doFilter(request, response, chain);
	}
}

//测试
public class  ChainTest{



	@Before
	public void init(){

	}

    @Test
    public void testChain(){
        Request r = new Request();
		Response p = new Response();
		r.setAttribute(&quot;name&quot;,&quot;Ivan&quot;);
		p.setAttribute(&quot;name&quot;,&quot;Ivan&quot;);

        FilterChain chain = new FilterChain();
		chain.addFilter(new LoginFilter()).addFilter(new CheckFilter());

		chain.doFilter(r,p,chain);

        System.out.println(r.toString());
		System.out.println(p.toString());
    }
}
&lt;/filter&gt;&lt;/filter&gt;&lt;/pre&gt;
&lt;p&gt;     如上代码是责任链模式的一个变种。你可以去除FilterChain类，在每个Filter里面维护一个Filter实例，指向下一个Filter（链表的结构），在doFilter中进行判断。这样就是一个基本的责任链模式了。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：状态模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e7%258a%25b6%25e6%2580%2581%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-07T04:36:46+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e7%8a%b6%e6%80%81%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     状态模式和策略模式很像，不过状态模式多了一个状态的改变。可以说，策略模式给了你积木，让你随意的搭积木，而状态模式多了一些限制，就是一个积木后面要跟另一个积木，而不能随意搭。&lt;br /&gt;
     相信大家都在网上买过东西，买东西的流程：选择商品-》付款-》卖家发货-》买家确认-》完成。这其中对应了订单状态的变化：未付款-》已付款-》已发货-》完成交易。代码如下：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Order{
     private static int UN_PAY = 0;
     private static int PAYED = 1;
     private static int SEND = 2;
     private static int DONE = 3;    //四种状态，可以使用枚举

     private int state = UN_PAY;     //当前状态

     public void pay(){
          if(state = UN_PAY){
               pay money;
               state = PAYED;
          }else{
               exception;
          }
     }

     public void send(){
             .....        //同样的if,else
     }

     ....
}
//可以看出如上代码充斥了很多的if,else，当状态更多时，此类膨胀很厉害，且难以维护
//状态模式将各个状态封装成一个个的类，并做该状态下可以做的事情，Order只是简单的委托。
public class Order{
     private State unPayState;
     private State payedState;
     private State sendState;
     private State doneState;    //四种状态，四种类,对应的get,set方法省略

     private State state = unPayState;     //当前状态

     public Order(){
        unPayState = new UnPayState(this);
        payedState = new PayedState(this);            //传入Order对象，为了修改Order的状态
        ...
     }

     public void pay(){
          state.pay();
     }

     public void send(){
          state.send();
     }

     ....
}

//State接口
public interface State{
     public void pay();
     public void send();
     ...
}

//UnPayState
public class UnPayState implements State{

     private Order order;
     public UnPayState(Order order){
           this.order = order;
     }

     public void pay(){
         //pay money
         order.setState(order.getPayedState());
     }

     public void send(){
         //exception: can't send
     }
     .....
}
&lt;/pre&gt;
</content>
        <summary type="html">&lt;p&gt;     状态模式和策略模式很像，不过状态模式多了一个状态的改变。可以说，策略模式给了你积木，让你随意的搭积木，而状态模式多了一些限制，就是一个积木后面要跟另一个积木，而不能随意搭。&lt;br /&gt;
     相信大家都在网上买过东西，买东西的流程：选择商品-》付款-》卖家发货-》买家确认-》完成。这其中对应了订单状态的变化：未付款-》已付款-》已发货-》完成交易。代码如下：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Order{
     private static int UN_PAY = 0;
     private static int PAYED = 1;
     private static int SEND = 2;
     private static int DONE = 3;    //四种状态，可以使用枚举

     private int state = UN_PAY;     //当前状态

     public void pay(){
          if(state = UN_PAY){
               pay money;
               state = PAYED;
          }else{
               exception;
          }
     }

     public void send(){
             .....        //同样的if,else
     }

     ....
}
//可以看出如上代码充斥了很多的if,else，当状态更多时，此类膨胀很厉害，且难以维护
//状态模式将各个状态封装成一个个的类，并做该状态下可以做的事情，Order只是简单的委托。
public class Order{
     private State unPayState;
     private State payedState;
     private State sendState;
     private State doneState;    //四种状态，四种类,对应的get,set方法省略

     private State state = unPayState;     //当前状态

     public Order(){
        unPayState = new UnPayState(this);
        payedState = new PayedState(this);            //传入Order对象，为了修改Order的状态
        ...
     }

     public void pay(){
          state.pay();
     }

     public void send(){
          state.send();
     }

     ....
}

//State接口
public interface State{
     public void pay();
     public void send();
     ...
}

//UnPayState
public class UnPayState implements State{

     private Order order;
     public UnPayState(Order order){
           this.order = order;
     }

     public void pay(){
         //pay money
         order.setState(order.getPayedState());
     }

     public void send(){
         //exception: can't send
     }
     .....
}
&lt;/pre&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式:策略模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25e7%25ad%2596%25e7%2595%25a5%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-07T04:10:18+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;策略模式的结构很简单，其实就是面向接口编程。具体是对其的理解。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/10/Strategy.gif&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-186&quot; title=&quot;Strategy&quot; src=&quot;assets/Strategy-300x103.gif&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;203&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我对策略模式的理解是：策略模式将一个个的具体策略（逻辑、算法或行为）封装到了一个个的子类中，而由用户（客户端）自己决定调用哪个策略！换一种说法，策略模式将逻辑从服务端提到了客户端，本来由服务器端来判断的事情交由客户端自己决定，服务器端只提供应有的功能。就像给你积木，让你自己搭积木一样。&lt;br /&gt;
举个简单的例子，写个简单计算器，可能会这么写：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//判断符号，来决定做怎样的计算。这就导致了，当添加新计算逻辑的时候，此类要不断维护
if(type.equals(&quot;+&quot;)) return a+b;
else if(type.equals(&quot;-&quot;)) return a-b;
....

//而策略模式将加减乘除封装到一个个的类中
public class AddStrategy implements Strategy{
     public double caculate(double a,double b){
           return a + b;
     }
}

//当调用时，比如当按下了界面上的+按钮，则将AddStrategy设置给客户类
client.setStrategy(new AddStrategy());
return client.result();    //result方法委托caculate方法即可
&lt;/pre&gt;
&lt;p&gt;当需要再添加新算法时，添加相应的子类即可（当然了，客户端还是要修改的）！&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;策略模式的结构很简单，其实就是面向接口编程。具体是对其的理解。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/10/Strategy.gif&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-186&quot; title=&quot;Strategy&quot; src=&quot;assets/Strategy-300x103.gif&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;203&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我对策略模式的理解是：策略模式将一个个的具体策略（逻辑、算法或行为）封装到了一个个的子类中，而由用户（客户端）自己决定调用哪个策略！换一种说法，策略模式将逻辑从服务端提到了客户端，本来由服务器端来判断的事情交由客户端自己决定，服务器端只提供应有的功能。就像给你积木，让你自己搭积木一样。&lt;br /&gt;
举个简单的例子，写个简单计算器，可能会这么写：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//判断符号，来决定做怎样的计算。这就导致了，当添加新计算逻辑的时候，此类要不断维护
if(type.equals(&quot;+&quot;)) return a+b;
else if(type.equals(&quot;-&quot;)) return a-b;
....

//而策略模式将加减乘除封装到一个个的类中
public class AddStrategy implements Strategy{
     public double caculate(double a,double b){
           return a + b;
     }
}

//当调用时，比如当按下了界面上的+按钮，则将AddStrategy设置给客户类
client.setStrategy(new AddStrategy());
return client.result();    //result方法委托caculate方法即可
&lt;/pre&gt;
&lt;p&gt;当需要再添加新算法时，添加相应的子类即可（当然了，客户端还是要修改的）！&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：迭代器模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e8%25bf%25ad%25e4%25bb%25a3%25e5%2599%25a8%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-06T11:45:53+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e8%bf%ad%e4%bb%a3%e5%99%a8%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     和原型模式一样，迭代器模式也基本不需要自己实现了，Java中提供了Iterator接口，可直接实现迭代器。迭代器模式也非常简单，就是为不同的集合统一遍历接口。&lt;br /&gt;
     这里看下Java中迭代器的实现代码，以ArrayList为例。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//ArrayList实现了List接口
public class ArrayList&lt;e&gt; extends AbstractList&lt;e&gt;
        implements List&lt;e&gt;, RandomAccess, Cloneable, java.io.Serializable

//List继承了Collection
public interface List&lt;e&gt; extends Collection&lt;e&gt;

//Collection继承了Iterable接口
public interface Collection&lt;e&gt; extends Iterable&lt;e&gt;

//Iterable只有一个方法，就是返回Iterator对象，Iterator对象的作用就是对List的遍历
 public interface Iterable&lt;t&gt; {
    Iterator&lt;t&gt; iterator();
}

//ArrayList里面实现了此iterator()方法，如下
 public Iterator&lt;e&gt; iterator() {
        return new Itr();
    }

//而Itr是ArrayList的内部类，且这个内部类实现了Iterator接口，实现对ArrayList遍历的具体方法
 private class Itr implements Iterator&lt;e&gt; {
        int cursor;       // index of next element to return
        int lastRet = -1; // index of last element returned; -1 if no such
        int expectedModCount = modCount;

        public boolean hasNext() {
            return cursor != size;
        }

        @SuppressWarnings(&quot;unchecked&quot;)
        public E next() {
            checkForComodification();
            int i = cursor;
            if (i &gt;= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i &gt;= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        public void remove() {
            if (lastRet &lt; 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.remove(lastRet);
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }
&lt;/e&gt;&lt;/e&gt;&lt;/t&gt;&lt;/t&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/pre&gt;
&lt;p&gt;    所以整体结构是这样的。集合类实现了Iterable接口，返回一个Iterator对象，这个对象针对此集合类实现遍历方法。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     和原型模式一样，迭代器模式也基本不需要自己实现了，Java中提供了Iterator接口，可直接实现迭代器。迭代器模式也非常简单，就是为不同的集合统一遍历接口。&lt;br /&gt;
     这里看下Java中迭代器的实现代码，以ArrayList为例。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//ArrayList实现了List接口
public class ArrayList&lt;e&gt; extends AbstractList&lt;e&gt;
        implements List&lt;e&gt;, RandomAccess, Cloneable, java.io.Serializable

//List继承了Collection
public interface List&lt;e&gt; extends Collection&lt;e&gt;

//Collection继承了Iterable接口
public interface Collection&lt;e&gt; extends Iterable&lt;e&gt;

//Iterable只有一个方法，就是返回Iterator对象，Iterator对象的作用就是对List的遍历
 public interface Iterable&lt;t&gt; {
    Iterator&lt;t&gt; iterator();
}

//ArrayList里面实现了此iterator()方法，如下
 public Iterator&lt;e&gt; iterator() {
        return new Itr();
    }

//而Itr是ArrayList的内部类，且这个内部类实现了Iterator接口，实现对ArrayList遍历的具体方法
 private class Itr implements Iterator&lt;e&gt; {
        int cursor;       // index of next element to return
        int lastRet = -1; // index of last element returned; -1 if no such
        int expectedModCount = modCount;

        public boolean hasNext() {
            return cursor != size;
        }

        @SuppressWarnings(&quot;unchecked&quot;)
        public E next() {
            checkForComodification();
            int i = cursor;
            if (i &gt;= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i &gt;= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        public void remove() {
            if (lastRet &lt; 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.remove(lastRet);
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }
&lt;/e&gt;&lt;/e&gt;&lt;/t&gt;&lt;/t&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/pre&gt;
&lt;p&gt;    所以整体结构是这样的。集合类实现了Iterable接口，返回一个Iterator对象，这个对象针对此集合类实现遍历方法。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：原型模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e5%258e%259f%25e5%259e%258b%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-06T08:44:53+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e5%8e%9f%e5%9e%8b%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;原型模式的作用就是拷贝，也可以叫克隆。克隆出一个和原实例一模一样的实例。在Java中就是实现Cloneable接口。Apache的commons项目，里面有个BeanUtils，也可以实现拷贝（不过需要注意的是，BeanUtils是浅拷贝）。所以原型模式直接用就可以了。&lt;br /&gt;
原型模式的拷贝，可以分为浅拷贝和深拷贝，看下代码就清楚了。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;//浅拷贝
public class A implements Cloneable{

	private String str;
	private B b;

	public void setStr(String str){
		this.str = str;
	}

	public String getStr(){
		return str;
	}

    public B getB() {
		return b;
	}

	public void setB(B b) {
		this.b = b;
	}

	@Override
	protected Object clone(){
		A a = null;
		try {
			a = (A) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return a;
	}

	public static void main(String[] args) {
		A a = new A();
		a.setStr(&quot;Hello&quot;);
		B b = new B();
		b.setStr(&quot;Hello B&quot;);
		a.setB(b);
		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		A ac = null;
		ac = (A) a.clone();
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());

		a.setStr(&quot;Hello A&quot;);
		b.setStr(&quot;Hello BB&quot;);
		a.setB(b);

		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());
	}
}

public class B{
     private String str;

	public String getStr() {
		return str;
	}

	public void setStr(String str) {
		this.str = str;
	}
}

//输出结果
/*
a-str:Hello
a-b:Hello B
ac-str:Hello
ac-b:Hello B
a-str:Hello A
a-b:Hello BB
ac-str:Hello
ac-b:Hello BB       --浅拷贝导致了，ac和a中的B是相同的引用，a中的b被修改后，ac中的b也被修改，这应该是不想要的结果
                    --所以需要深拷贝。深拷贝就是将所有涉及到的对象都进行Clone
*/&lt;/pre&gt;
&lt;pre class=&quot;brush:java&quot;&gt;//深拷贝
public class A implements Cloneable{

	private String str;
	private B b;

	public void setStr(String str){
		this.str = str;
	}

	public String getStr(){
		return str;
	}

    public B getB() {
		return b;
	}

	public void setB(B b) {
		this.b = b;
	}

	@Override
	protected Object clone(){
		A a = null;
		try {
			a = (A) super.clone();
			a.b = (B) b.clone();       //此处对b进行clone
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return a;
	}

	public static void main(String[] args) {
		A a = new A();
		a.setStr(&quot;Hello&quot;);
		B b = new B();
		b.setStr(&quot;Hello B&quot;);
		a.setB(b);
		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		A ac = null;
		ac = (A) a.clone();
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());

		a.setStr(&quot;Hello A&quot;);
		b.setStr(&quot;Hello BB&quot;);
		a.setB(b);

		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());
	}
}

//B也要实现Cloneable并重写clone方法
public class B implements Cloneable{
     private String str;

	public String getStr() {
		return str;
	}

	public void setStr(String str) {
		this.str = str;
	}

	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
}

//输出结果
/*
a-str:Hello
a-b:Hello B
ac-str:Hello
ac-b:Hello B
a-str:Hello A
a-b:Hello BB
ac-str:Hello
ac-b:Hello B        --此处a中的b被修改后，ac中的b不会被影响
*/&lt;/pre&gt;
&lt;p&gt;可以直接实现Cloneable接口，而不用重写clone方法，默认就是浅拷贝。要自己实现原型模式的话也非常简单，手动在clone方法里面return一个新对象，再将自身的属性复制过去就行了，因为前面说了，原型模式基本不需要自己写了，也就不罗嗦了。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;原型模式的作用就是拷贝，也可以叫克隆。克隆出一个和原实例一模一样的实例。在Java中就是实现Cloneable接口。Apache的commons项目，里面有个BeanUtils，也可以实现拷贝（不过需要注意的是，BeanUtils是浅拷贝）。所以原型模式直接用就可以了。&lt;br /&gt;
原型模式的拷贝，可以分为浅拷贝和深拷贝，看下代码就清楚了。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;//浅拷贝
public class A implements Cloneable{

	private String str;
	private B b;

	public void setStr(String str){
		this.str = str;
	}

	public String getStr(){
		return str;
	}

    public B getB() {
		return b;
	}

	public void setB(B b) {
		this.b = b;
	}

	@Override
	protected Object clone(){
		A a = null;
		try {
			a = (A) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return a;
	}

	public static void main(String[] args) {
		A a = new A();
		a.setStr(&quot;Hello&quot;);
		B b = new B();
		b.setStr(&quot;Hello B&quot;);
		a.setB(b);
		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		A ac = null;
		ac = (A) a.clone();
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());

		a.setStr(&quot;Hello A&quot;);
		b.setStr(&quot;Hello BB&quot;);
		a.setB(b);

		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());
	}
}

public class B{
     private String str;

	public String getStr() {
		return str;
	}

	public void setStr(String str) {
		this.str = str;
	}
}

//输出结果
/*
a-str:Hello
a-b:Hello B
ac-str:Hello
ac-b:Hello B
a-str:Hello A
a-b:Hello BB
ac-str:Hello
ac-b:Hello BB       --浅拷贝导致了，ac和a中的B是相同的引用，a中的b被修改后，ac中的b也被修改，这应该是不想要的结果
                    --所以需要深拷贝。深拷贝就是将所有涉及到的对象都进行Clone
*/&lt;/pre&gt;
&lt;pre class=&quot;brush:java&quot;&gt;//深拷贝
public class A implements Cloneable{

	private String str;
	private B b;

	public void setStr(String str){
		this.str = str;
	}

	public String getStr(){
		return str;
	}

    public B getB() {
		return b;
	}

	public void setB(B b) {
		this.b = b;
	}

	@Override
	protected Object clone(){
		A a = null;
		try {
			a = (A) super.clone();
			a.b = (B) b.clone();       //此处对b进行clone
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return a;
	}

	public static void main(String[] args) {
		A a = new A();
		a.setStr(&quot;Hello&quot;);
		B b = new B();
		b.setStr(&quot;Hello B&quot;);
		a.setB(b);
		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		A ac = null;
		ac = (A) a.clone();
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());

		a.setStr(&quot;Hello A&quot;);
		b.setStr(&quot;Hello BB&quot;);
		a.setB(b);

		System.out.println(&quot;a-str:&quot; + a.getStr());
		System.out.println(&quot;a-b:&quot; + a.getB().getStr());
		System.out.println(&quot;ac-str:&quot; + ac.getStr());
		System.out.println(&quot;ac-b:&quot; + ac.getB().getStr());
	}
}

//B也要实现Cloneable并重写clone方法
public class B implements Cloneable{
     private String str;

	public String getStr() {
		return str;
	}

	public void setStr(String str) {
		this.str = str;
	}

	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
}

//输出结果
/*
a-str:Hello
a-b:Hello B
ac-str:Hello
ac-b:Hello B
a-str:Hello A
a-b:Hello BB
ac-str:Hello
ac-b:Hello B        --此处a中的b被修改后，ac中的b不会被影响
*/&lt;/pre&gt;
&lt;p&gt;可以直接实现Cloneable接口，而不用重写clone方法，默认就是浅拷贝。要自己实现原型模式的话也非常简单，手动在clone方法里面return一个新对象，再将自身的属性复制过去就行了，因为前面说了，原型模式基本不需要自己写了，也就不罗嗦了。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：观察者模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e8%25a7%2582%25e5%25af%259f%25e8%2580%2585%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-06T03:04:13+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     我更愿意称观察者模式为通知模式，我觉得“通知模式”更能反应这个模式的主旨----你该干嘛干嘛去，有事我通知你！&lt;br /&gt;
     此模式的最佳应用在哪里呢？3Q大战。我们来模拟一下！&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//QQ Client
public interface QQ{
     public boolean login(String username,String password);
     public void popWin(String msg);
}

//QQ Server
public interface QQServer{

    private List&lt;qq&gt; list = new ArrayList(); 
    public void addQQ(QQ qq){
         list.add(qq);
    }

    public void popAll(String msg){
        for(QQ qq : list) qq.popWin(msg);
    }
}

//QQ实现
public class MyQQ implements QQ{
     public boolean login(String username,String password){
           //这里使用网络发送请求到QQServer，如果用户名密码正确，就调用addQQ方法,于是我们的QQ就上战场了
     }

     public void popWin(String msg){
          System.out.println(msg);
     }
}
&lt;/qq&gt;&lt;/pre&gt;
&lt;p&gt;     这样，只要QQServer一做出&quot;艰难的决定&quot;，我们就都遭殃了！&lt;br /&gt;
     当然，这只是一个模拟，真实代码就不得而知了！在Web中，这种模式也叫做“消息推送”。相对的客户端定时向服务器请求，叫“拉”模式。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     我更愿意称观察者模式为通知模式，我觉得“通知模式”更能反应这个模式的主旨----你该干嘛干嘛去，有事我通知你！&lt;br /&gt;
     此模式的最佳应用在哪里呢？3Q大战。我们来模拟一下！&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//QQ Client
public interface QQ{
     public boolean login(String username,String password);
     public void popWin(String msg);
}

//QQ Server
public interface QQServer{

    private List&lt;qq&gt; list = new ArrayList(); 
    public void addQQ(QQ qq){
         list.add(qq);
    }

    public void popAll(String msg){
        for(QQ qq : list) qq.popWin(msg);
    }
}

//QQ实现
public class MyQQ implements QQ{
     public boolean login(String username,String password){
           //这里使用网络发送请求到QQServer，如果用户名密码正确，就调用addQQ方法,于是我们的QQ就上战场了
     }

     public void popWin(String msg){
          System.out.println(msg);
     }
}
&lt;/qq&gt;&lt;/pre&gt;
&lt;p&gt;     这样，只要QQServer一做出&quot;艰难的决定&quot;，我们就都遭殃了！&lt;br /&gt;
     当然，这只是一个模拟，真实代码就不得而知了！在Web中，这种模式也叫做“消息推送”。相对的客户端定时向服务器请求，叫“拉”模式。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：适配器模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e9%2580%2582%25e9%2585%258d%25e5%2599%25a8%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-06T02:37:02+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e9%80%82%e9%85%8d%e5%99%a8%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     适配器模式的作用就是将一个类的接口转换成另外一个接口。这种模式一般是用在使用已有系统的情况。&lt;br /&gt;
     假设目前做一个新系统，有如下代码结构。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public interface Car{
     public void drive();
}

public class Benz implements Car{
     public void drive(){
          System.out.println(&quot;Benz run&quot;);
     }
}

public class Cruze implements Car{
     public void drive(){
          System.out.println(&quot;Cruze run&quot;);
     }
}
&lt;/pre&gt;
&lt;p&gt;      有一个老系统，里面有如下代码&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Smart{
     public void run(){
         System.out.println(&quot;Smart run&quot;);
     }
}
&lt;/pre&gt;
&lt;p&gt;      很明显，Smart和Benz,Cruze不属于同类。而实际上Smart和Benz,Cruze一样都属于Car，怎么办呢？太简单了，继承阿。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class SmartCar extends Smart implements Car{
      public void drive(){
           this.run();
      }
}
&lt;/pre&gt;
&lt;p&gt;     搞定！So easy!这种方式叫做类的适配器。&lt;br /&gt;
     但是，如果Car是个类，而不是接口呢？Java是不支持多继承的！依然很简单，组合嘛！&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class SmartCar implements Car{
     private Smart smart = new Smart();
 
     public void drive(){
          smart.run();
     }
}
&lt;/pre&gt;
&lt;p&gt;     这种方式就叫做对象的适配器。很简单吧！&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     适配器模式的作用就是将一个类的接口转换成另外一个接口。这种模式一般是用在使用已有系统的情况。&lt;br /&gt;
     假设目前做一个新系统，有如下代码结构。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public interface Car{
     public void drive();
}

public class Benz implements Car{
     public void drive(){
          System.out.println(&quot;Benz run&quot;);
     }
}

public class Cruze implements Car{
     public void drive(){
          System.out.println(&quot;Cruze run&quot;);
     }
}
&lt;/pre&gt;
&lt;p&gt;      有一个老系统，里面有如下代码&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Smart{
     public void run(){
         System.out.println(&quot;Smart run&quot;);
     }
}
&lt;/pre&gt;
&lt;p&gt;      很明显，Smart和Benz,Cruze不属于同类。而实际上Smart和Benz,Cruze一样都属于Car，怎么办呢？太简单了，继承阿。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class SmartCar extends Smart implements Car{
      public void drive(){
           this.run();
      }
}
&lt;/pre&gt;
&lt;p&gt;     搞定！So easy!这种方式叫做类的适配器。&lt;br /&gt;
     但是，如果Car是个类，而不是接口呢？Java是不支持多继承的！依然很简单，组合嘛！&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class SmartCar implements Car{
     private Smart smart = new Smart();
 
     public void drive(){
          smart.run();
     }
}
&lt;/pre&gt;
&lt;p&gt;     这种方式就叫做对象的适配器。很简单吧！&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Ubuntu10.04手动编译JDK7</title>
        <link href="http://liyouhai.com/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/ubuntu10-04%25e6%2589%258b%25e5%258a%25a8%25e7%25bc%2596%25e8%25af%2591jdk7.html"/>
        <updated>2011-10-04T09:32:57+08:00</updated>
        <id>http://liyouhai.com//%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/ubuntu10-04%e6%89%8b%e5%8a%a8%e7%bc%96%e8%af%91jdk7</id>
        <content type="html">&lt;p&gt;&lt;strong&gt;一.环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Ubuntu10.04&lt;/p&gt;
&lt;p&gt;2.JDK1.6最新版&lt;/p&gt;
&lt;p&gt;3.Ant1.7.1以上&lt;/p&gt;
&lt;p&gt;以上资源不需要多说了吧！&lt;/p&gt;
&lt;p&gt;4.安装freetype。&lt;/p&gt;
&lt;p&gt;此处&lt;a href=&quot;http://download.savannah.gnu.org/releases/freetype/&quot;&gt;http://download.savannah.gnu.org/releases/freetype/&lt;/a&gt;下载freetype，解压缩。&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;./configure&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;
&lt;p&gt;搞定&lt;/p&gt;
&lt;p&gt;5.安装ALSA&lt;/p&gt;
&lt;p&gt;此处&lt;a href=&quot;http://www.alsa-project.org/main/index.php/Main_Page&quot;&gt;http://www.alsa-project.org/main/index.php/Main_Page&lt;/a&gt;下载drivers和lib，解压缩。&lt;/p&gt;
&lt;p&gt;./configure&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;
&lt;p&gt;6.安装CUPS&lt;/p&gt;
&lt;p&gt;此处&lt;a href=&quot;http://www.cups.org/&quot;&gt;http://www.cups.org/&lt;/a&gt;下载CUPS，解压缩。&lt;/p&gt;
&lt;p&gt;./cofigure&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;
&lt;p&gt;此过程中可能会提示缺少g++，sudo apt-get install g++即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二.开始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.到http://download.java.net/openjdk/jdk7/下载jdk7的源码，解压缩。&lt;/p&gt;
&lt;p&gt;2.设置各种系统变量，sudo ect/profile&lt;/p&gt;
&lt;p&gt;export ALT_BOOTDIR=/home/ivan/tools/jdk1.6.0_12&lt;br /&gt;
export ALT_JDK_IMPORT_PATH=/home/ivan/tools/jdk1.6.0_12&lt;br /&gt;
export ANT_HOME=/home/ivan/tools/apache-ant-1.8.2&lt;/p&gt;
&lt;p&gt;同时将JAVA_HOME,CLASSPATH之类的全注释掉。&lt;/p&gt;
&lt;p&gt;3.进入openjdk跟目录，make吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三.参考文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;openjdk根目录下的README-builds.html&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;&lt;strong&gt;一.环境准备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Ubuntu10.04&lt;/p&gt;
&lt;p&gt;2.JDK1.6最新版&lt;/p&gt;
&lt;p&gt;3.Ant1.7.1以上&lt;/p&gt;
&lt;p&gt;以上资源不需要多说了吧！&lt;/p&gt;
&lt;p&gt;4.安装freetype。&lt;/p&gt;
&lt;p&gt;此处&lt;a href=&quot;http://download.savannah.gnu.org/releases/freetype/&quot;&gt;http://download.savannah.gnu.org/releases/freetype/&lt;/a&gt;下载freetype，解压缩。&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;./configure&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;
&lt;p&gt;搞定&lt;/p&gt;
&lt;p&gt;5.安装ALSA&lt;/p&gt;
&lt;p&gt;此处&lt;a href=&quot;http://www.alsa-project.org/main/index.php/Main_Page&quot;&gt;http://www.alsa-project.org/main/index.php/Main_Page&lt;/a&gt;下载drivers和lib，解压缩。&lt;/p&gt;
&lt;p&gt;./configure&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;
&lt;p&gt;6.安装CUPS&lt;/p&gt;
&lt;p&gt;此处&lt;a href=&quot;http://www.cups.org/&quot;&gt;http://www.cups.org/&lt;/a&gt;下载CUPS，解压缩。&lt;/p&gt;
&lt;p&gt;./cofigure&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;
&lt;p&gt;此过程中可能会提示缺少g++，sudo apt-get install g++即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二.开始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.到http://download.java.net/openjdk/jdk7/下载jdk7的源码，解压缩。&lt;/p&gt;
&lt;p&gt;2.设置各种系统变量，sudo ect/profile&lt;/p&gt;
&lt;p&gt;export ALT_BOOTDIR=/home/ivan/tools/jdk1.6.0_12&lt;br /&gt;
export ALT_JDK_IMPORT_PATH=/home/ivan/tools/jdk1.6.0_12&lt;br /&gt;
export ANT_HOME=/home/ivan/tools/apache-ant-1.8.2&lt;/p&gt;
&lt;p&gt;同时将JAVA_HOME,CLASSPATH之类的全注释掉。&lt;/p&gt;
&lt;p&gt;3.进入openjdk跟目录，make吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三.参考文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;openjdk根目录下的README-builds.html&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：装饰模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e8%25a3%2585%25e9%25a5%25b0%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-04T09:18:03+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e8%a3%85%e9%a5%b0%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;代理模式可以说是给方法添加了新内容，而装饰模式则是给类添加了新的方法。&lt;br /&gt;
大家都知道要添加新方法，自然会想到继承，但是继承的耦合性高。装饰模式是使用组合的方式给类添加新的方法。Java中最典型的应用就是IO库了。&lt;br /&gt;
JavaIO库的使用可能如下&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
BufferedInputStream bi = new BufferedInputStream(new FileInputStream(filename));
&lt;/pre&gt;
&lt;p&gt;我们都知道FileInputStream是用来读取文件的，BufferedInputStream是提供了缓存的能力。我们分别看下他们的源代码&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class BufferedInputStream extends FilterInputStream
...

public class FilterInputStream extends InputStream
...

public class FileInputStream extends InputStream
...
&lt;/pre&gt;
&lt;p&gt;BufferedInputStream继承了FilterInputStream，FilterInputStream和FileInputStream一样都继承自InputStream.可以看出InputStream是公共父类。FilterInputStream是装饰类的公共父类，看看FilterInputStream的源代码就知道了，他只是做了简单的方法委托。BufferedInputStream继承了FilterInputStream，并添加了缓存的方法（其实就是用一个字节数组保存字节，一次性读出）。&lt;br /&gt;
装饰模式的结构很简单，装饰类和被装饰类都要继承相同的父类（或实现相同的接口），装饰类持有被装饰类的实例，相同的方法只是简单的委托，在装饰类里面添加新方法即可。&lt;br /&gt;
装饰模式是为了解决过多且能自由组合的情况。例如HeadFirst设计模式里面举的例子，咖啡加糖，或者奶，或者即加糖也加奶，组合很多，用继承就会子类爆炸。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;代理模式可以说是给方法添加了新内容，而装饰模式则是给类添加了新的方法。&lt;br /&gt;
大家都知道要添加新方法，自然会想到继承，但是继承的耦合性高。装饰模式是使用组合的方式给类添加新的方法。Java中最典型的应用就是IO库了。&lt;br /&gt;
JavaIO库的使用可能如下&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
BufferedInputStream bi = new BufferedInputStream(new FileInputStream(filename));
&lt;/pre&gt;
&lt;p&gt;我们都知道FileInputStream是用来读取文件的，BufferedInputStream是提供了缓存的能力。我们分别看下他们的源代码&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class BufferedInputStream extends FilterInputStream
...

public class FilterInputStream extends InputStream
...

public class FileInputStream extends InputStream
...
&lt;/pre&gt;
&lt;p&gt;BufferedInputStream继承了FilterInputStream，FilterInputStream和FileInputStream一样都继承自InputStream.可以看出InputStream是公共父类。FilterInputStream是装饰类的公共父类，看看FilterInputStream的源代码就知道了，他只是做了简单的方法委托。BufferedInputStream继承了FilterInputStream，并添加了缓存的方法（其实就是用一个字节数组保存字节，一次性读出）。&lt;br /&gt;
装饰模式的结构很简单，装饰类和被装饰类都要继承相同的父类（或实现相同的接口），装饰类持有被装饰类的实例，相同的方法只是简单的委托，在装饰类里面添加新方法即可。&lt;br /&gt;
装饰模式是为了解决过多且能自由组合的情况。例如HeadFirst设计模式里面举的例子，咖啡加糖，或者奶，或者即加糖也加奶，组合很多，用继承就会子类爆炸。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：代理模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e4%25bb%25a3%25e7%2590%2586%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-10-03T14:52:32+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e4%bb%a3%e7%90%86%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     代理模式的一种作用和代理商很类似。就像人们到商店去买东西，商店会提供一些附加服务，但是商店是不会生产东西的，商店是到工厂去拿东西。商店就是一个代理。&lt;br /&gt;
     具体流程就像这样，用户想要一个item，于是到Shop去buyItem，而商店是不会生产item的，他就到ItemFactory去让工厂生产item，然后卖给客户，并提供售前售后服务。代码如下：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//工厂接口
public interface ItemFactory{
     public Item getItem();
}

//工厂实现,Item就不实现了，随便怎么写都行
public class ItemFactoryImpl implements ItemFactory{
      public Item getItem(){
          return new Item();
      }
}

//商店类，就是代理
public class Shop implements PigFactory{
 
     private ItemFactory factory = new ItemFactoryImpl();

     public Item getItem(){
          System.out.println(&quot;附加服务&quot;);
          return factory.getItem();
     } 
}

//实际调用
public class Main{
     public static void main(String[] args){
          ItemFactory f = new Shop();
          f.getItem();
     }
}
&lt;/pre&gt;
&lt;p&gt;     从代码可以看到,Shop中的getItem的getItem委托ItemFactoryImpl的getItem来生产Item，另外附加了自己的&quot;附加服务&quot;。&lt;br /&gt;
     这是代理模式的一种作用。代理模式能做安全保护的作用。比如登录，如果用户名或密码不正确就不允许登录，想想怎么实现。（修改代理类里面的方法即可）&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     代理模式的一种作用和代理商很类似。就像人们到商店去买东西，商店会提供一些附加服务，但是商店是不会生产东西的，商店是到工厂去拿东西。商店就是一个代理。&lt;br /&gt;
     具体流程就像这样，用户想要一个item，于是到Shop去buyItem，而商店是不会生产item的，他就到ItemFactory去让工厂生产item，然后卖给客户，并提供售前售后服务。代码如下：&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
//工厂接口
public interface ItemFactory{
     public Item getItem();
}

//工厂实现,Item就不实现了，随便怎么写都行
public class ItemFactoryImpl implements ItemFactory{
      public Item getItem(){
          return new Item();
      }
}

//商店类，就是代理
public class Shop implements PigFactory{
 
     private ItemFactory factory = new ItemFactoryImpl();

     public Item getItem(){
          System.out.println(&quot;附加服务&quot;);
          return factory.getItem();
     } 
}

//实际调用
public class Main{
     public static void main(String[] args){
          ItemFactory f = new Shop();
          f.getItem();
     }
}
&lt;/pre&gt;
&lt;p&gt;     从代码可以看到,Shop中的getItem的getItem委托ItemFactoryImpl的getItem来生产Item，另外附加了自己的&quot;附加服务&quot;。&lt;br /&gt;
     这是代理模式的一种作用。代理模式能做安全保护的作用。比如登录，如果用户名或密码不正确就不允许登录，想想怎么实现。（修改代理类里面的方法即可）&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：模板方法模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e6%25a8%25a1%25e6%259d%25bf%25e6%2596%25b9%25e6%25b3%2595%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-09-25T03:10:27+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e6%a8%a1%e6%9d%bf%e6%96%b9%e6%b3%95%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     在工厂方法模式里提到了工厂方法模式可以和模板方法模式一起使用，在创建实例的时候可以做一些其他事情。我们就在工厂方法getPig的时候打印点东西吧。&lt;br /&gt;
     该怎么修改呢？非常简单，只需要修改接口就可以了，子类不需要改动。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public interface PigFactory{
     public Pig getPig();
}
&lt;/pre&gt;
&lt;p&gt;     要在getPig的前后打印输出，那就在getPig调用的前后加上打印操作就可以了，新建个方法createPig，记得把接口改成抽象类。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public abstract class PigFactory{

     public Pig createPig(){
          System.out.println(&quot;Start&quot;);
          getPig();
          System.out.println(&quot;End&quot;);
     }

     public abstract Pig getPig();
}
&lt;/pre&gt;
&lt;p&gt;     搞定。当然了，原来调用getPig的地方要改成调用createPig了。&lt;br /&gt;
     从代码就可以看出来，模板方法应用在大框架不变，但是有细节会有变化的情况下。所以框架类代码应用比较多。&lt;br /&gt;
     模板方法模式应该是对“把变化的东西和不变的东西分离开来”的最好诠释。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     在工厂方法模式里提到了工厂方法模式可以和模板方法模式一起使用，在创建实例的时候可以做一些其他事情。我们就在工厂方法getPig的时候打印点东西吧。&lt;br /&gt;
     该怎么修改呢？非常简单，只需要修改接口就可以了，子类不需要改动。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public interface PigFactory{
     public Pig getPig();
}
&lt;/pre&gt;
&lt;p&gt;     要在getPig的前后打印输出，那就在getPig调用的前后加上打印操作就可以了，新建个方法createPig，记得把接口改成抽象类。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public abstract class PigFactory{

     public Pig createPig(){
          System.out.println(&quot;Start&quot;);
          getPig();
          System.out.println(&quot;End&quot;);
     }

     public abstract Pig getPig();
}
&lt;/pre&gt;
&lt;p&gt;     搞定。当然了，原来调用getPig的地方要改成调用createPig了。&lt;br /&gt;
     从代码就可以看出来，模板方法应用在大框架不变，但是有细节会有变化的情况下。所以框架类代码应用比较多。&lt;br /&gt;
     模板方法模式应该是对“把变化的东西和不变的东西分离开来”的最好诠释。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：抽象工厂模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e6%258a%25bd%25e8%25b1%25a1%25e5%25b7%25a5%25e5%258e%2582%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-09-25T02:53:17+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e6%8a%bd%e8%b1%a1%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     从代码层面上来讲抽象工厂模式可以说是对工厂方法的进一步改进。工厂方法针对每个具体子类，都会有一个相应的子工厂。而这个子工厂只能“生产”这个子类。而抽象工厂的子工厂可以“生产”多种子类。&lt;br /&gt;
     从逻辑层面来将，抽象工厂的子工厂所“生产”的多个子类之间需要有一定的关系，或者是相关或者是相互依赖的。&lt;br /&gt;
     比如说，Pig不仅分颜色，还分国家，比如荷兰Pig啦，新西兰Pig啦。那么抽象工厂就可以这样写。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class RedPigFactory implements PigFactory{
     public Pig getNetherlandsPig(){
          return new RedNetherlandsPig();
     }
     public Pig getNewZealandPig(){
          return new RedNewZealandPig();
     }
}
&lt;/pre&gt;
&lt;p&gt;     依照这个类，BluePigFactory,GreenPigFactory还有PigFactory的改写应该都不是问题吧？&lt;br /&gt;
     还有一种关系类似部分和整体的关系。比如一个工厂既生产cpu又生产内存，而cpu和内存都是电脑的一部分，两者之间也是有关系的，所以也能放到一个工厂类里面。&lt;br /&gt;
     抽象工厂模式的难点不在代码层面，只要了解了工厂方法模式的代码，那抽象工厂模式的代码就再简单不过了。其难点在于使用上。个人认为先抽象出工厂方法模式，然后再看是否需要使用抽象工厂模式。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     从代码层面上来讲抽象工厂模式可以说是对工厂方法的进一步改进。工厂方法针对每个具体子类，都会有一个相应的子工厂。而这个子工厂只能“生产”这个子类。而抽象工厂的子工厂可以“生产”多种子类。&lt;br /&gt;
     从逻辑层面来将，抽象工厂的子工厂所“生产”的多个子类之间需要有一定的关系，或者是相关或者是相互依赖的。&lt;br /&gt;
     比如说，Pig不仅分颜色，还分国家，比如荷兰Pig啦，新西兰Pig啦。那么抽象工厂就可以这样写。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class RedPigFactory implements PigFactory{
     public Pig getNetherlandsPig(){
          return new RedNetherlandsPig();
     }
     public Pig getNewZealandPig(){
          return new RedNewZealandPig();
     }
}
&lt;/pre&gt;
&lt;p&gt;     依照这个类，BluePigFactory,GreenPigFactory还有PigFactory的改写应该都不是问题吧？&lt;br /&gt;
     还有一种关系类似部分和整体的关系。比如一个工厂既生产cpu又生产内存，而cpu和内存都是电脑的一部分，两者之间也是有关系的，所以也能放到一个工厂类里面。&lt;br /&gt;
     抽象工厂模式的难点不在代码层面，只要了解了工厂方法模式的代码，那抽象工厂模式的代码就再简单不过了。其难点在于使用上。个人认为先抽象出工厂方法模式，然后再看是否需要使用抽象工厂模式。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：工厂方法模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e5%25b7%25a5%25e5%258e%2582%25e6%2596%25b9%25e6%25b3%2595%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-09-24T03:53:40+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e5%b7%a5%e5%8e%82%e6%96%b9%e6%b3%95%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;     在简单工厂模式里面说到了其缺点，就是违背了开闭原则，后面也提到了解决办法。 不过这里有另一个解决办法，那就是工厂方法模式。&lt;br /&gt;
     简单工厂模式的意图就是将分散在各处的new集中到一个地方，方便管理。而工厂方法模式是为了弥补简单工厂违背了开闭原则的缺点。&lt;br /&gt;
     看下简单工厂模式代码，如果看过martin fowler的重构这本书，应该大概知道怎么做。只要使用Replace Conditional with Polymorphism（以多态取代条件式）即可     &lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class PigFactory{
     public static Pig getPig(String type){
          if(&quot;red&quot;.equals(type)){
               return new RedPig();
          }else if(&quot;green&quot;.equals(type)){
               return new GreenPig();
          }else if(&quot;blue&quot;.equals(type)){
               return new BluePig();
          }
     }
}
&lt;/pre&gt;
&lt;p&gt;     首先针对每个Pig建立相应的工厂类，RedPigFactory,GreenPigFactory,BluePigFactory.接着将getPig方法移到子类里面,删除不需要的代码，因为各个子类工厂已经明确了自己会产生什么类，所以if条件句就多余了，type也就不需要了。特别注意，要去除static关键字，原因嘛，你懂的！！代码如下&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class RedPigFactory implements PigFactory{
     public Pig getPig(){
          return new RedPig();
     }
}
&lt;/pre&gt;
&lt;p&gt;其他两个类类似，接着将PigFactory的getPig方法改成抽象方法，或者直接将PigFactory改成接口即可。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public interface PigFactory{
     public Pig getPig();
}
&lt;/pre&gt;
&lt;p&gt;这就是工厂方法模式了。使用方法嘛，很简单，你需要什么类，就实例化哪个具体工厂调用getPig就行了。要添加新的类，那么对应新添加的类添加一个对应的工厂就OK了。这里getPig方法不能是静态的，所以建议将工厂写成单例模式。&lt;br /&gt;
工厂方法模式也是将创建实例的动作集中起来管理，不过比简单工厂有了几点改进：&lt;br /&gt;
1.符合开闭原则&lt;br /&gt;
2.工厂方法模式可以和模板方法模式一起使用，在创建实例的时候可以做一些其他事情。模板方法中再提。&lt;br /&gt;
工厂方法模式的缺点也是显而易见的，每个实例都需要一个工厂类来对应，导致工厂爆炸。所以什么时候使用，该怎么使用，还需要斟酌。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;     在简单工厂模式里面说到了其缺点，就是违背了开闭原则，后面也提到了解决办法。 不过这里有另一个解决办法，那就是工厂方法模式。&lt;br /&gt;
     简单工厂模式的意图就是将分散在各处的new集中到一个地方，方便管理。而工厂方法模式是为了弥补简单工厂违背了开闭原则的缺点。&lt;br /&gt;
     看下简单工厂模式代码，如果看过martin fowler的重构这本书，应该大概知道怎么做。只要使用Replace Conditional with Polymorphism（以多态取代条件式）即可     &lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class PigFactory{
     public static Pig getPig(String type){
          if(&quot;red&quot;.equals(type)){
               return new RedPig();
          }else if(&quot;green&quot;.equals(type)){
               return new GreenPig();
          }else if(&quot;blue&quot;.equals(type)){
               return new BluePig();
          }
     }
}
&lt;/pre&gt;
&lt;p&gt;     首先针对每个Pig建立相应的工厂类，RedPigFactory,GreenPigFactory,BluePigFactory.接着将getPig方法移到子类里面,删除不需要的代码，因为各个子类工厂已经明确了自己会产生什么类，所以if条件句就多余了，type也就不需要了。特别注意，要去除static关键字，原因嘛，你懂的！！代码如下&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class RedPigFactory implements PigFactory{
     public Pig getPig(){
          return new RedPig();
     }
}
&lt;/pre&gt;
&lt;p&gt;其他两个类类似，接着将PigFactory的getPig方法改成抽象方法，或者直接将PigFactory改成接口即可。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public interface PigFactory{
     public Pig getPig();
}
&lt;/pre&gt;
&lt;p&gt;这就是工厂方法模式了。使用方法嘛，很简单，你需要什么类，就实例化哪个具体工厂调用getPig就行了。要添加新的类，那么对应新添加的类添加一个对应的工厂就OK了。这里getPig方法不能是静态的，所以建议将工厂写成单例模式。&lt;br /&gt;
工厂方法模式也是将创建实例的动作集中起来管理，不过比简单工厂有了几点改进：&lt;br /&gt;
1.符合开闭原则&lt;br /&gt;
2.工厂方法模式可以和模板方法模式一起使用，在创建实例的时候可以做一些其他事情。模板方法中再提。&lt;br /&gt;
工厂方法模式的缺点也是显而易见的，每个实例都需要一个工厂类来对应，导致工厂爆炸。所以什么时候使用，该怎么使用，还需要斟酌。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：简单工厂模式</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259a%25e7%25ae%2580%25e5%258d%2595%25e5%25b7%25a5%25e5%258e%2582%25e6%25a8%25a1%25e5%25bc%258f.html"/>
        <updated>2011-09-22T12:04:18+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9a%e7%ae%80%e5%8d%95%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f</id>
        <content type="html">&lt;p&gt;简单工厂模式不在gof的23种设计模式之列，HeadFirst设计模式中也没把它列为设计模式，而只将其当做一种写法。简单工厂模式没辜负它的名字，真的非常简单，应该是设计模式里面最最简单的一个模式了。&lt;/p&gt;
&lt;p&gt;它的作用就是将散落在各个地方的new方法，集合到一个类里面去，方便管理，它并不遵循设计原则。当需要增加一个类的时候，你还是需要修改工厂类，这违背了开闭原则。&lt;/p&gt;
&lt;p&gt;具一个很简单的例子，假设有一个接口Pig，它下面有很多的实现，RedPig,GreenPig,BluePig.你调用他们的时候就需要new RedPig(),newGreenPig(),new BluePig()。而这些new散落在了各个客户类（就是调用Pig的那些类，Pig的子类就是服务类，不要将这里的客户和服务与web里面的混淆）里面，而简单工厂的作用就是将这些散落的类都集中到它内部管理。代码如下：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class PigFactory{
     public static Pig getPig(String type){
          if(&quot;red&quot;.equals(type)){
               return new RedPig();
          }else if(&quot;green&quot;.equals(type)){
               return new GreenPig();
          }else if(&quot;blue&quot;.equals(type)){
               return new BluePig();
          }
     }
}
&lt;/pre&gt;
&lt;p&gt;     这里提供了一个静态方法，根据传入的字符串来判断返回哪个具体的子类。此工厂又称为静态工厂方法。你也可以不用静态方法，这样每次取Pig都要先实例化工厂，这样一是资源的浪费，二是不符合逻辑啊，工厂只需要一个就够了。该怎么办呢？（看看单例模式）。当要添加子类类型的时候，是需要修改PigFactory类的，违背开闭原则，HeadFirst不将其称为设计模式也是有道理的。&lt;br /&gt;
     对上面代码的改进就是使用反射，直接将子类的全路径传入，用Class.forName来实例化，这样就不需要修改工厂类了，但是每次都写类的全路径名，太累了。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class PigFactory{
     public static Pig getPig(String name){
          return Class.forName(name).newInstance();
     }
}
&lt;/pre&gt;
&lt;p&gt;     再进一步的改进就是使用配置文件，相当于给类的全路径名取个简称。这里就不多写了，看看spring吧！&lt;br /&gt;
     简单工厂就说这么多，很简单。代码简单，目的性也很明确！&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;简单工厂模式不在gof的23种设计模式之列，HeadFirst设计模式中也没把它列为设计模式，而只将其当做一种写法。简单工厂模式没辜负它的名字，真的非常简单，应该是设计模式里面最最简单的一个模式了。&lt;/p&gt;
&lt;p&gt;它的作用就是将散落在各个地方的new方法，集合到一个类里面去，方便管理，它并不遵循设计原则。当需要增加一个类的时候，你还是需要修改工厂类，这违背了开闭原则。&lt;/p&gt;
&lt;p&gt;具一个很简单的例子，假设有一个接口Pig，它下面有很多的实现，RedPig,GreenPig,BluePig.你调用他们的时候就需要new RedPig(),newGreenPig(),new BluePig()。而这些new散落在了各个客户类（就是调用Pig的那些类，Pig的子类就是服务类，不要将这里的客户和服务与web里面的混淆）里面，而简单工厂的作用就是将这些散落的类都集中到它内部管理。代码如下：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class PigFactory{
     public static Pig getPig(String type){
          if(&quot;red&quot;.equals(type)){
               return new RedPig();
          }else if(&quot;green&quot;.equals(type)){
               return new GreenPig();
          }else if(&quot;blue&quot;.equals(type)){
               return new BluePig();
          }
     }
}
&lt;/pre&gt;
&lt;p&gt;     这里提供了一个静态方法，根据传入的字符串来判断返回哪个具体的子类。此工厂又称为静态工厂方法。你也可以不用静态方法，这样每次取Pig都要先实例化工厂，这样一是资源的浪费，二是不符合逻辑啊，工厂只需要一个就够了。该怎么办呢？（看看单例模式）。当要添加子类类型的时候，是需要修改PigFactory类的，违背开闭原则，HeadFirst不将其称为设计模式也是有道理的。&lt;br /&gt;
     对上面代码的改进就是使用反射，直接将子类的全路径传入，用Class.forName来实例化，这样就不需要修改工厂类了，但是每次都写类的全路径名，太累了。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class PigFactory{
     public static Pig getPig(String name){
          return Class.forName(name).newInstance();
     }
}
&lt;/pre&gt;
&lt;p&gt;     再进一步的改进就是使用配置文件，相当于给类的全路径名取个简称。这里就不多写了，看看spring吧！&lt;br /&gt;
     简单工厂就说这么多，很简单。代码简单，目的性也很明确！&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>邪恶的Ebay</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%25e9%2582%25aa%25e6%2581%25b6%25e7%259a%2584ebay.html"/>
        <updated>2011-09-20T12:55:37+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%e9%82%aa%e6%81%b6%e7%9a%84ebay</id>
        <content type="html">&lt;p&gt;前几天在新浪微博上看到的内容，讲述的是美国一家拍卖网站的盈利模式。&lt;/p&gt;
&lt;p&gt;他利用了人们贪便宜的心理，进行拍卖。&lt;/p&gt;
&lt;p&gt;它赚钱的逻辑是这样的：所有商品的竞拍起始价，都是12美分。而网友每出一次标，“死巫婆”就向买家收0 .6美元。当买家买到商品时，网站早赚够了。。。。&lt;/p&gt;
&lt;p&gt;真是感慨啊。money真好赚，只有你想不到，没有你赚不到。。。。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://tech.sina.com.cn/i/2011-09-19/06256079414.shtml&quot;&gt;http://tech.sina.com.cn/i/2011-09-19/06256079414.shtml&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;artibodyTitle&quot;&gt;&lt;/h1&gt;
</content>
        <summary type="html">&lt;p&gt;前几天在新浪微博上看到的内容，讲述的是美国一家拍卖网站的盈利模式。&lt;/p&gt;
&lt;p&gt;他利用了人们贪便宜的心理，进行拍卖。&lt;/p&gt;
&lt;p&gt;它赚钱的逻辑是这样的：所有商品的竞拍起始价，都是12美分。而网友每出一次标，“死巫婆”就向买家收0 .6美元。当买家买到商品时，网站早赚够了。。。。&lt;/p&gt;
&lt;p&gt;真是感慨啊。money真好赚，只有你想不到，没有你赚不到。。。。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://tech.sina.com.cn/i/2011-09-19/06256079414.shtml&quot;&gt;http://tech.sina.com.cn/i/2011-09-19/06256079414.shtml&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;artibodyTitle&quot;&gt;&lt;/h1&gt;
</summary>
    </entry>
    
    <entry>
        <title>安吉两日游</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%25e5%25ae%2589%25e5%2590%2589%25e4%25b8%25a4%25e6%2597%25a5%25e6%25b8%25b8.html"/>
        <updated>2011-09-19T12:54:00+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%e5%ae%89%e5%90%89%e4%b8%a4%e6%97%a5%e6%b8%b8</id>
        <content type="html">&lt;p&gt;周末去浙江安吉玩了两天，感觉还不错。喜欢大自然的朋友可以去玩玩。不多说，直接上图。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;[gallery link=&quot;file&quot;]&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;周末去浙江安吉玩了两天，感觉还不错。喜欢大自然的朋友可以去玩玩。不多说，直接上图。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;[gallery link=&quot;file&quot;]&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>就业证办理详细流程</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e5%25b0%25b1%25e4%25b8%259a%25e8%25af%2581%25e5%258a%259e%25e7%2590%2586%25e8%25af%25a6%25e7%25bb%2586%25e6%25b5%2581%25e7%25a8%258b.html"/>
        <updated>2011-09-09T13:16:40+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e5%b0%b1%e4%b8%9a%e8%af%81%e5%8a%9e%e7%90%86%e8%af%a6%e7%bb%86%e6%b5%81%e7%a8%8b</id>
        <content type="html">&lt;p&gt;今天办理就业证，早晨9点出门，晚上六点多才到家，累死我了。特此记录，以免有人步我后尘。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 前提：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是跳槽，所以毕业生我就不清楚了。我是在南京工作，其他地方流程应该一样，具体办理位置就Google百度吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先你需要从前一家公司离职。需要从公司拿到如下三样东西。&lt;/p&gt;
&lt;p&gt;1.离职证明&lt;/p&gt;
&lt;p&gt;2.南京市劳动合同终止，解除备案&lt;/p&gt;
&lt;p&gt;3.失业保险待遇申报表，我这张是叫 南京市职工社会保险关系变动表&lt;/p&gt;
&lt;p&gt;你自己需要准备一张两寸的照片。身份证是肯定要带的，还有社保卡。&lt;/p&gt;
&lt;p&gt;另外，你先到下面的网址（如果档案是在北京东路63号人才市场的话）&lt;a href=&quot;http://www.njrsrc.com/Service/daCxMain.aspx&quot;&gt;http://www.njrsrc.com/Service/daCxMain.aspx&lt;/a&gt;查询一下你现在的档案信息。信息应该是你现在所在公司在职状态。如果档案里面缺少工作经历，需要提供合同原件和离职证明（如果离职了）来把档案补全。这个说是和工龄什么有关的，最好补全，要不然跳槽多了，以后想补就更难了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;办理流程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;准备就绪。首先到档案存放处（我的档案和户籍都是存放在北京东路63号人才市场的），所以我到人才市场。到取号机那里取3号和5号号码（要取两个，我当时就是只取了一个，白白多跑了一趟。。。。）。&lt;/p&gt;
&lt;p&gt;首先说三号，三号是办理《就业证联系函》的，过去说办理就业证，他会看你的档案，如果目前是在职的，他会让你到2号窗口先把离职证明交过去，将状态改成离职状态，然后他给你开《就业证联系函》。&lt;/p&gt;
&lt;p&gt;接着是五号，五号是办理常住人口登记表的，直接跟他说就行了，给他身份证，他会给你常住人口登记表（可能需要交钱，存档费，一年120），如果你是第一次办理，他会让你到玄武区公安分局办证中心盖章。坐44路，到总统府下，然后继续往前走，第二个红绿灯右转，再左转往前100米的样子，那里可以不取号了，直接到14号窗口说要盖个章，他就给你盖个章就完事了。&lt;/p&gt;
&lt;p&gt;还没完，然后到四牌楼那里的梅园新村街道处办理就业证。那地方说好找也好找，说不好找还真不好找，我从他下面走了三回，愣没找到。四牌楼那边在修地铁，街道处的门上是没有写名字的，牌子在突出的屋檐上面，还是用黄色的字写的，要不看字还以为是个小宾馆。。。。具体地点是在华海电脑城往鸡鸣寺方向走，过少年宫，直到看到有个联想的服务中心，你抬头看有个屎黄屎黄的牌子，就那了。进去直走，到最里面，有办就业证的地方。你填一张表，再把上面办理的和你准备的东西给他就行了。他会告诉你什么时候去拿。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结语：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我对政府机关已经无语了，没法用言语表达了，太TMD操蛋了。办个破就业证要这么麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插曲：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中午找地方吃饭，误入鸡鸣寺附近，碰到一算命的，硬给我算命，说了一堆好话，还让我抽签，抽了个唯一的上上签，不过我怀疑是做过手脚的。我是不信这个的，给了40打发了。。。。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;今天办理就业证，早晨9点出门，晚上六点多才到家，累死我了。特此记录，以免有人步我后尘。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 前提：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是跳槽，所以毕业生我就不清楚了。我是在南京工作，其他地方流程应该一样，具体办理位置就Google百度吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先你需要从前一家公司离职。需要从公司拿到如下三样东西。&lt;/p&gt;
&lt;p&gt;1.离职证明&lt;/p&gt;
&lt;p&gt;2.南京市劳动合同终止，解除备案&lt;/p&gt;
&lt;p&gt;3.失业保险待遇申报表，我这张是叫 南京市职工社会保险关系变动表&lt;/p&gt;
&lt;p&gt;你自己需要准备一张两寸的照片。身份证是肯定要带的，还有社保卡。&lt;/p&gt;
&lt;p&gt;另外，你先到下面的网址（如果档案是在北京东路63号人才市场的话）&lt;a href=&quot;http://www.njrsrc.com/Service/daCxMain.aspx&quot;&gt;http://www.njrsrc.com/Service/daCxMain.aspx&lt;/a&gt;查询一下你现在的档案信息。信息应该是你现在所在公司在职状态。如果档案里面缺少工作经历，需要提供合同原件和离职证明（如果离职了）来把档案补全。这个说是和工龄什么有关的，最好补全，要不然跳槽多了，以后想补就更难了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;办理流程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;准备就绪。首先到档案存放处（我的档案和户籍都是存放在北京东路63号人才市场的），所以我到人才市场。到取号机那里取3号和5号号码（要取两个，我当时就是只取了一个，白白多跑了一趟。。。。）。&lt;/p&gt;
&lt;p&gt;首先说三号，三号是办理《就业证联系函》的，过去说办理就业证，他会看你的档案，如果目前是在职的，他会让你到2号窗口先把离职证明交过去，将状态改成离职状态，然后他给你开《就业证联系函》。&lt;/p&gt;
&lt;p&gt;接着是五号，五号是办理常住人口登记表的，直接跟他说就行了，给他身份证，他会给你常住人口登记表（可能需要交钱，存档费，一年120），如果你是第一次办理，他会让你到玄武区公安分局办证中心盖章。坐44路，到总统府下，然后继续往前走，第二个红绿灯右转，再左转往前100米的样子，那里可以不取号了，直接到14号窗口说要盖个章，他就给你盖个章就完事了。&lt;/p&gt;
&lt;p&gt;还没完，然后到四牌楼那里的梅园新村街道处办理就业证。那地方说好找也好找，说不好找还真不好找，我从他下面走了三回，愣没找到。四牌楼那边在修地铁，街道处的门上是没有写名字的，牌子在突出的屋檐上面，还是用黄色的字写的，要不看字还以为是个小宾馆。。。。具体地点是在华海电脑城往鸡鸣寺方向走，过少年宫，直到看到有个联想的服务中心，你抬头看有个屎黄屎黄的牌子，就那了。进去直走，到最里面，有办就业证的地方。你填一张表，再把上面办理的和你准备的东西给他就行了。他会告诉你什么时候去拿。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结语：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我对政府机关已经无语了，没法用言语表达了，太TMD操蛋了。办个破就业证要这么麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插曲：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中午找地方吃饭，误入鸡鸣寺附近，碰到一算命的，硬给我算命，说了一堆好话，还让我抽签，抽了个唯一的上上签，不过我怀疑是做过手脚的。我是不信这个的，给了40打发了。。。。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>苏州三日游</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e8%258b%258f%25e5%25b7%259e%25e4%25b8%2589%25e6%2597%25a5%25e6%25b8%25b8.html"/>
        <updated>2011-09-04T14:00:52+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e8%8b%8f%e5%b7%9e%e4%b8%89%e6%97%a5%e6%b8%b8</id>
        <content type="html">&lt;p&gt;同学苏州结婚，正好我和女友都放假，就跑到苏州去玩了三天。自助游，跟团太累了，权当散散心。&lt;/p&gt;
&lt;p&gt;在家里找苏州攻略，看到网上有推荐黄天源糕团，后面写什么面条，还以为黄天源卖面条的。。。。跑去一看，卖点心类的东东的。对这些东西不感兴趣，花了三元买了个鲜肉月饼。。。。难吃。&lt;/p&gt;
&lt;p&gt;到苏州的第一天基本就是吃了，苏州现在到处修路修地铁，挖的到处都是，但即使这样，照样觉得苏州比南京干净很多。唯一麻烦的是交通不大方便了，走了不少冤枉路。好不容易在汉庭的新观前店住下了，就不想动了。休息到了四点多，到观前街逛了逛。吃了些小吃。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt; &lt;/em&gt;蚵仔&lt;em&gt;煎      不好吃，应该不是正宗的。十块钱一个还挺贵。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;* 酸辣粉      女友喜欢吃，哪里都有的卖&lt;/p&gt;
&lt;p&gt;* 香炒土豆   还行吧&lt;/p&gt;
&lt;p&gt;* 朱鸿兴的叉烧面   味道还不错，女友说是因为放了猪油滴。顺便一说，叉烧面23元，其中面条三元，叉烧20元。。。。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;第二天一早起来吃了个早饭就到汉庭对面的怡园逛了逛，很小，只有0.6公顷。一个小时不到就逛完了，15元一个人。给人的感觉就是小家碧玉。因为忘带相机了，没有照片。看完就回宾馆休息了。中午到观前街阿里巴巴淘淘宝店下面吃的日韩料理，超难吃，咸死了，我看是辐射的时候抢盐抢多了。。。。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;下午先搬到了汉庭拙政园店。这家店没有餐厅的，也没有电梯，房间也没新观前店好，价格还贵，就地理位置还行，房间不太吵，下次不会住这家店了。半完后就逛了拙政园和苏州博物馆。感觉还不错，拍了些照片，下面放几张。拙政园感觉和怡园明显的不同，很明显是大户人家。面积是怡园的9倍。说是文征明设计的，耗时16年建成的，里面还有不少讲究，有兴趣的可以去看看，有免费的讲解，门票70一个人。苏州博物馆免费，里面布局也不错，对历史之类的不感兴趣，也就走马观花的看看。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;第三天，就基本在宾馆呆着了。因为个人感觉没什么特别想逛的地方了。总体来说，苏州给我的感觉就是干净，苏州人也感觉挺和善的。其他感觉和南京没太大的区别。&lt;/p&gt;
&lt;p&gt;晚上参加同学婚礼，没喝酒。结束了一起到KTV唱歌，结果喝吐了-_-!!!&lt;/p&gt;
&lt;p&gt;[gallery]&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;同学苏州结婚，正好我和女友都放假，就跑到苏州去玩了三天。自助游，跟团太累了，权当散散心。&lt;/p&gt;
&lt;p&gt;在家里找苏州攻略，看到网上有推荐黄天源糕团，后面写什么面条，还以为黄天源卖面条的。。。。跑去一看，卖点心类的东东的。对这些东西不感兴趣，花了三元买了个鲜肉月饼。。。。难吃。&lt;/p&gt;
&lt;p&gt;到苏州的第一天基本就是吃了，苏州现在到处修路修地铁，挖的到处都是，但即使这样，照样觉得苏州比南京干净很多。唯一麻烦的是交通不大方便了，走了不少冤枉路。好不容易在汉庭的新观前店住下了，就不想动了。休息到了四点多，到观前街逛了逛。吃了些小吃。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt; &lt;/em&gt;蚵仔&lt;em&gt;煎      不好吃，应该不是正宗的。十块钱一个还挺贵。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;* 酸辣粉      女友喜欢吃，哪里都有的卖&lt;/p&gt;
&lt;p&gt;* 香炒土豆   还行吧&lt;/p&gt;
&lt;p&gt;* 朱鸿兴的叉烧面   味道还不错，女友说是因为放了猪油滴。顺便一说，叉烧面23元，其中面条三元，叉烧20元。。。。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;第二天一早起来吃了个早饭就到汉庭对面的怡园逛了逛，很小，只有0.6公顷。一个小时不到就逛完了，15元一个人。给人的感觉就是小家碧玉。因为忘带相机了，没有照片。看完就回宾馆休息了。中午到观前街阿里巴巴淘淘宝店下面吃的日韩料理，超难吃，咸死了，我看是辐射的时候抢盐抢多了。。。。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;下午先搬到了汉庭拙政园店。这家店没有餐厅的，也没有电梯，房间也没新观前店好，价格还贵，就地理位置还行，房间不太吵，下次不会住这家店了。半完后就逛了拙政园和苏州博物馆。感觉还不错，拍了些照片，下面放几张。拙政园感觉和怡园明显的不同，很明显是大户人家。面积是怡园的9倍。说是文征明设计的，耗时16年建成的，里面还有不少讲究，有兴趣的可以去看看，有免费的讲解，门票70一个人。苏州博物馆免费，里面布局也不错，对历史之类的不感兴趣，也就走马观花的看看。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;第三天，就基本在宾馆呆着了。因为个人感觉没什么特别想逛的地方了。总体来说，苏州给我的感觉就是干净，苏州人也感觉挺和善的。其他感觉和南京没太大的区别。&lt;/p&gt;
&lt;p&gt;晚上参加同学婚礼，没喝酒。结束了一起到KTV唱歌，结果喝吐了-_-!!!&lt;/p&gt;
&lt;p&gt;[gallery]&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>个人文档库</title>
        <link href="http://liyouhai.com/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%25e4%25b8%25aa%25e4%25ba%25ba%25e6%2596%2587%25e6%25a1%25a3%25e5%25ba%2593.html"/>
        <updated>2011-08-28T15:36:01+08:00</updated>
        <id>http://liyouhai.com//%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%e4%b8%aa%e4%ba%ba%e6%96%87%e6%a1%a3%e5%ba%93</id>
        <content type="html">&lt;p&gt;做了个个人文档库。主要存放自己写的以及翻译的文档。&lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;准备翻译Oracle官方的JavaSE,JavaEE方面的英文资料。   &lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; |-------------------------&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包括Java教程，JavaEE6教程,Jvm规范,Java语言规范等。&lt;/p&gt;
&lt;p&gt;还有Android,ROR,SSH等资料。详情请点击上面红箭头所指。关注我的新浪微博。有问题请在此处留言。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;做了个个人文档库。主要存放自己写的以及翻译的文档。&lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;准备翻译Oracle官方的JavaSE,JavaEE方面的英文资料。   &lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; |-------------------------&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包括Java教程，JavaEE6教程,Jvm规范,Java语言规范等。&lt;/p&gt;
&lt;p&gt;还有Android,ROR,SSH等资料。详情请点击上面红箭头所指。关注我的新浪微博。有问题请在此处留言。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Pig设计模式：Singleton</title>
        <link href="http://liyouhai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%25e8%25ae%25be%25e8%25ae%25a1%25e6%25a8%25a1%25e5%25bc%258f%25ef%25bc%259asingleton.html"/>
        <updated>2011-08-25T07:24:24+08:00</updated>
        <id>http://liyouhai.com//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pig%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%ef%bc%9asingleton</id>
        <content type="html">&lt;p&gt;    Singleton应该算是设计模式里面最简单也最复杂的设计模式了。说简单是代码很简单，也很明了，就是只返回一个实例。复杂是因为涉及到多线程问题，需要考虑不少问题。这里主要考虑单线程，兼顾一些多线程的问题。&lt;br /&gt;
    Singleton顾名思义就是只能创建一个实例对象。。所以不能拥有public的构造方法。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{   
       private Singleton(){}   
}  
&lt;/pre&gt;
&lt;p&gt;既然构造方法是私有的，那么从外面不可能创建Singleton实例了。。只能从内部创建。。所以需要一个方法来创建此实例。。此方法肯定必须是static的。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{      
       private Singleton(){}      
       
       public static Singleton getInstance(){   
            return [Singleton Instance];   
      }   
}   
&lt;/pre&gt;
&lt;p&gt;getInstance方法要返回一个Singleton实例。。就要一个Singleton类型的变量来存储。。声明一个Singleton类型的属性。。同样需要是static 的。。静态方法只能访问静态属性。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{      
       private Singleton(){}      
       
       public static Singleton getInstance(){   
            single=new Singleton();   
            return single;   
      }   
      private static Singleton single;   
}   
&lt;/pre&gt;
&lt;p&gt;如此就能获得Singleton的实例了。。但是并不能确保只生成一个实例。。。需做判断。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{      
       private Singleton(){}      
       
       public static Singleton getInstance(){   
           if(single==null){   
                single=new Singleton();   
           }   
           return single;   
       }   
      private static Singleton single;   
}   
&lt;/pre&gt;
&lt;p&gt;这样就可以了。。。&lt;br /&gt;
接着就牵扯到了线程问题。。。假设有两个线程。。thread1，thread2。。thread1运行到第5行，然后跳到了thread2。。也运行到第5行之后。。。此时两线程都得到single为空。。。那么就会有两个实例了。。。解决办法。。同步。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{         
       private Singleton(){}         
          
       public synchronized static Singleton getInstance(){      
           if(single==null){      
                single=new Singleton();      
           }      
           return single;      
       }      
      private static Singleton single;      
}      
 &lt;/pre&gt;
&lt;p&gt;还有一种方法，提前实例化。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{         
       private Singleton(){}         
          
       public static Singleton getInstance(){      
                  return single;      
       }      
      private static Singleton single=new Singleton();      
}      
 &lt;/pre&gt;
&lt;p&gt;此时single的static修饰符有起到另一个作用。。。因为static类型的属性，只在类加载时初始化一次。。。以后不会再初始化了。。确保了只有一个实例。。。&lt;br /&gt;
最后一种方法是再head first design pattern上看到的。。double-checked locking。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{         
       private Singleton(){}         
          
       public static Singleton getInstance(){      
           if(single==null){      
               synchronized(Singleton.class){   
                  if(single==null){      
                     single=new Singleton();      
                  }   
               }   
           }      
           return single;      
       }      
      private volatile static Singleton single;      
}      
&lt;/pre&gt;
&lt;p&gt;目前对Singleton的理解就这么多。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;    Singleton应该算是设计模式里面最简单也最复杂的设计模式了。说简单是代码很简单，也很明了，就是只返回一个实例。复杂是因为涉及到多线程问题，需要考虑不少问题。这里主要考虑单线程，兼顾一些多线程的问题。&lt;br /&gt;
    Singleton顾名思义就是只能创建一个实例对象。。所以不能拥有public的构造方法。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{   
       private Singleton(){}   
}  
&lt;/pre&gt;
&lt;p&gt;既然构造方法是私有的，那么从外面不可能创建Singleton实例了。。只能从内部创建。。所以需要一个方法来创建此实例。。此方法肯定必须是static的。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{      
       private Singleton(){}      
       
       public static Singleton getInstance(){   
            return [Singleton Instance];   
      }   
}   
&lt;/pre&gt;
&lt;p&gt;getInstance方法要返回一个Singleton实例。。就要一个Singleton类型的变量来存储。。声明一个Singleton类型的属性。。同样需要是static 的。。静态方法只能访问静态属性。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{      
       private Singleton(){}      
       
       public static Singleton getInstance(){   
            single=new Singleton();   
            return single;   
      }   
      private static Singleton single;   
}   
&lt;/pre&gt;
&lt;p&gt;如此就能获得Singleton的实例了。。但是并不能确保只生成一个实例。。。需做判断。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{      
       private Singleton(){}      
       
       public static Singleton getInstance(){   
           if(single==null){   
                single=new Singleton();   
           }   
           return single;   
       }   
      private static Singleton single;   
}   
&lt;/pre&gt;
&lt;p&gt;这样就可以了。。。&lt;br /&gt;
接着就牵扯到了线程问题。。。假设有两个线程。。thread1，thread2。。thread1运行到第5行，然后跳到了thread2。。也运行到第5行之后。。。此时两线程都得到single为空。。。那么就会有两个实例了。。。解决办法。。同步。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{         
       private Singleton(){}         
          
       public synchronized static Singleton getInstance(){      
           if(single==null){      
                single=new Singleton();      
           }      
           return single;      
       }      
      private static Singleton single;      
}      
 &lt;/pre&gt;
&lt;p&gt;还有一种方法，提前实例化。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{         
       private Singleton(){}         
          
       public static Singleton getInstance(){      
                  return single;      
       }      
      private static Singleton single=new Singleton();      
}      
 &lt;/pre&gt;
&lt;p&gt;此时single的static修饰符有起到另一个作用。。。因为static类型的属性，只在类加载时初始化一次。。。以后不会再初始化了。。确保了只有一个实例。。。&lt;br /&gt;
最后一种方法是再head first design pattern上看到的。。double-checked locking。。。&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
public class Singleton{         
       private Singleton(){}         
          
       public static Singleton getInstance(){      
           if(single==null){      
               synchronized(Singleton.class){   
                  if(single==null){      
                     single=new Singleton();      
                  }   
               }   
           }      
           return single;      
       }      
      private volatile static Singleton single;      
}      
&lt;/pre&gt;
&lt;p&gt;目前对Singleton的理解就这么多。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>不完美的世界</title>
        <link href="http://liyouhai.com/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%25e4%25b8%258d%25e5%25ae%258c%25e7%25be%258e%25e7%259a%2584%25e4%25b8%2596%25e7%2595%258c.html"/>
        <updated>2011-08-24T05:37:58+08:00</updated>
        <id>http://liyouhai.com//%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%e4%b8%8d%e5%ae%8c%e7%be%8e%e7%9a%84%e4%b8%96%e7%95%8c</id>
        <content type="html">&lt;p&gt;看了立刻震惊的视频！&lt;/p&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/NlaXQP_a6j8/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;看了立刻震惊的视频！&lt;/p&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/NlaXQP_a6j8/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Chrome下的图片批量下载插件</title>
        <link href="http://liyouhai.com/%E4%B8%AA%E4%BA%BA%E8%BD%AF%E4%BB%B6/chrome%25e4%25b8%258b%25e7%259a%2584%25e5%259b%25be%25e7%2589%2587%25e6%2589%25b9%25e9%2587%258f%25e4%25b8%258b%25e8%25bd%25bd%25e6%258f%2592%25e4%25bb%25b6.html"/>
        <updated>2011-08-22T06:08:06+08:00</updated>
        <id>http://liyouhai.com//%E4%B8%AA%E4%BA%BA%E8%BD%AF%E4%BB%B6/chrome%e4%b8%8b%e7%9a%84%e5%9b%be%e7%89%87%e6%89%b9%e9%87%8f%e4%b8%8b%e8%bd%bd%e6%8f%92%e4%bb%b6</id>
        <content type="html">&lt;p&gt;在Chrome商店里没看到好用的图片批量下载工具，自己无聊就写了一个。参考的是遨游的资源嗅探器（图标都是盗用的。。。）当然了，功能没那么强劲，目前只能下图片，操作还不是很简单（因为Google没有开放Chrome的下载api）。先看下图片。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/08/shot.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-58&quot; title=&quot;shot&quot; src=&quot;assets/shot-300x189.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;189&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;安装方法：&lt;/p&gt;
&lt;p&gt;本来想放到chrome商店的，但是要交钱。。。没境外卡，没法交，就放到这里了。直接下载附件，解压缩后拖到Chrome里面即可。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;操作方法：&lt;/p&gt;
&lt;p&gt;1.访问一个网站，等待页面加载完成后。点击插件图标。&lt;/p&gt;
&lt;p&gt;2.弹出页面，鼠标指到链接上即可显示图片。&lt;/p&gt;
&lt;p&gt;3.勾选需要下载的图片，点击下面的download按钮。&lt;/p&gt;
&lt;p&gt;4.弹出新的页面，里面是你刚才选择需要下载的图片。ctrl+s保存页面即可。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/08/pigdownload.crx_.zip&quot;&gt;pigdownload.crx&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;在Chrome商店里没看到好用的图片批量下载工具，自己无聊就写了一个。参考的是遨游的资源嗅探器（图标都是盗用的。。。）当然了，功能没那么强劲，目前只能下图片，操作还不是很简单（因为Google没有开放Chrome的下载api）。先看下图片。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/08/shot.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-58&quot; title=&quot;shot&quot; src=&quot;assets/shot-300x189.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;189&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;安装方法：&lt;/p&gt;
&lt;p&gt;本来想放到chrome商店的，但是要交钱。。。没境外卡，没法交，就放到这里了。直接下载附件，解压缩后拖到Chrome里面即可。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;操作方法：&lt;/p&gt;
&lt;p&gt;1.访问一个网站，等待页面加载完成后。点击插件图标。&lt;/p&gt;
&lt;p&gt;2.弹出页面，鼠标指到链接上即可显示图片。&lt;/p&gt;
&lt;p&gt;3.勾选需要下载的图片，点击下面的download按钮。&lt;/p&gt;
&lt;p&gt;4.弹出新的页面，里面是你刚才选择需要下载的图片。ctrl+s保存页面即可。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/08/pigdownload.crx_.zip&quot;&gt;pigdownload.crx&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>Java截屏工具</title>
        <link href="http://liyouhai.com/%E4%B8%AA%E4%BA%BA%E8%BD%AF%E4%BB%B6/java%25e6%2588%25aa%25e5%25b1%258f%25e5%25b7%25a5%25e5%2585%25b7.html"/>
        <updated>2011-08-22T05:47:03+08:00</updated>
        <id>http://liyouhai.com//%E4%B8%AA%E4%BA%BA%E8%BD%AF%E4%BB%B6/java%e6%88%aa%e5%b1%8f%e5%b7%a5%e5%85%b7</id>
        <content type="html">&lt;p&gt;个人以前写的Java截屏工具。可跨平台使用。过段时间写下源码细节。&lt;/p&gt;
&lt;p&gt;1.支持全屏，区域截图。&lt;/p&gt;
&lt;p&gt;2.支持jpg,png等格式。&lt;/p&gt;
&lt;p&gt;3.支持截图后编辑。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;运行注意：&lt;/p&gt;
&lt;p&gt;1.下载后请将.zip后缀改为.jar&lt;/p&gt;
&lt;p&gt;2.确保您的机器安装了Java环境&lt;/p&gt;
&lt;p&gt;3.windows系统可直接双击运行&lt;/p&gt;
&lt;p&gt;4.如果双击无法运行请启动命令行，到文件所在位置，输入如下命令&lt;/p&gt;
&lt;p&gt;java -jar PigScreenShot.jar pig.screenshot.ShotMain&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/08/PigScreenShot.zip&quot;&gt;PigScreenShot&lt;/a&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;个人以前写的Java截屏工具。可跨平台使用。过段时间写下源码细节。&lt;/p&gt;
&lt;p&gt;1.支持全屏，区域截图。&lt;/p&gt;
&lt;p&gt;2.支持jpg,png等格式。&lt;/p&gt;
&lt;p&gt;3.支持截图后编辑。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;运行注意：&lt;/p&gt;
&lt;p&gt;1.下载后请将.zip后缀改为.jar&lt;/p&gt;
&lt;p&gt;2.确保您的机器安装了Java环境&lt;/p&gt;
&lt;p&gt;3.windows系统可直接双击运行&lt;/p&gt;
&lt;p&gt;4.如果双击无法运行请启动命令行，到文件所在位置，输入如下命令&lt;/p&gt;
&lt;p&gt;java -jar PigScreenShot.jar pig.screenshot.ShotMain&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ivanpig.com/blog/wp-content/uploads/2011/08/PigScreenShot.zip&quot;&gt;PigScreenShot&lt;/a&gt;&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>100个WordPress常用插件</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/100%25e4%25b8%25aawordpress%25e5%25b8%25b8%25e7%2594%25a8%25e6%258f%2592%25e4%25bb%25b6-2.html"/>
        <updated>2011-08-08T17:11:15+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/100%e4%b8%aawordpress%e5%b8%b8%e7%94%a8%e6%8f%92%e4%bb%b6-2</id>
        <content type="html">&lt;p&gt;原文地址：&lt;a href=&quot;http://www.kuaixiang.net/100-wordpress-plugins&quot;&gt;http://www.kuaixiang.net/100-wordpress-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;0、&lt;a href=&quot;http://yanfeng.org/blog/wordpress/kit&quot;&gt;&lt;strong&gt;中文WordPress工具箱&lt;/strong&gt;&lt;/a&gt;：之所以标记为0，是因为可能吧觉得这是每个中文博客建立之初都需要安装的插件。这个插件用来解决官方WordPress没有照顾到的中文相关问题。使用这个插件，你可以显示随机文章，最新留言（最新引用），留言最多文章，发表评论最多的网友，还有真正的文章摘要，等等，真正截断，没有乱码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;留言相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;a title=&quot;http://akismet.com/&quot; href=&quot;http://akismet.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Akismet&lt;/strong&gt;&lt;/a&gt;：最流行的反垃圾留言插件。可能吧使用WP至今，它已经协助屏蔽了1700多条垃圾评论。&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;http://unknowngenius.com/blog/wordpress/spam-karma/&quot;&gt;&lt;strong&gt;Spam Karma 2&lt;/strong&gt;&lt;/a&gt;：又一个垃圾留言屏蔽插件，和Akismet相比，这个要更为复杂一些。&lt;/p&gt;
&lt;p&gt;3、&lt;a title=&quot;http://meidell.dk/archives/2006/12/19/brians-threaded-comments-159/&quot; href=&quot;http://meidell.dk/archives/2006/12/19/brians-threaded-comments-159/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Threaded Comments&lt;/strong&gt;&lt;/a&gt;：实现有针对性的留言。也就是可以针对某个留言进行留言，这个留言不出现在最底部，而是在所针对的留言的下方。&lt;/p&gt;
&lt;p&gt;4、&lt;a title=&quot;http://txfx.net/code/wordpress/subscribe-to-comments/&quot; href=&quot;http://txfx.net/code/wordpress/subscribe-to-comments/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Subscribe to Comments&lt;/strong&gt;&lt;/a&gt;：让评论者订阅文章后续评论的插件。&lt;/p&gt;
&lt;p&gt;5、&lt;a title=&quot;http://wordpress.org/extend/plugins/riffly/&quot; href=&quot;http://wordpress.org/extend/plugins/riffly/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Webcam Comments&lt;/strong&gt;&lt;/a&gt;：觉得文字留言太乏味？试试语音或视频留言如何？&lt;/p&gt;
&lt;p&gt;6、&lt;a title=&quot;http://skippy.net/gravatars/&quot; href=&quot;http://skippy.net/gravatars/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Gravatars&lt;/strong&gt;&lt;/a&gt;：只要留言者在&lt;a title=&quot;http://skippy.net/gravatars/&quot; href=&quot;http://skippy.net/gravatars/&quot; target=&quot;_blank&quot;&gt;Gravatars&lt;/a&gt;网站上传了头像，在留言时就能显示留言者的头像。&lt;/p&gt;
&lt;p&gt;7、&lt;a title=&quot;http://wordpress.org/extend/plugins/delink-comment-author/&quot; href=&quot;http://wordpress.org/extend/plugins/delink-comment-author/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;De-link Comment Author&lt;/strong&gt;&lt;/a&gt;：有时候你想删除一个评论者的链接但不想删除整个留言，这个插件可以帮助你。&lt;/p&gt;
&lt;p&gt;8、&lt;a href=&quot;http://zhiqiang.org/blog/plugins/ajaxcomment/&quot;&gt;&lt;strong&gt;Ajax Comments-Reply&lt;/strong&gt;&lt;/a&gt;：将留言系统设置成Ajax形式，不用刷新即可添加评论。&lt;/p&gt;
&lt;p&gt;9、&lt;a title=&quot;http://wordpress.org/extend/plugins/dmsguestbook/&quot; href=&quot;http://wordpress.org/extend/plugins/dmsguestbook/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;DMS Guestbook&lt;/strong&gt;&lt;/a&gt;：为你的博客制作一个留言本。&lt;/p&gt;
&lt;p&gt;10、&lt;a title=&quot;http://wordpress.org/extend/plugins/sexy-comments/&quot; href=&quot;http://wordpress.org/extend/plugins/sexy-comments/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Sexy Comments&lt;/strong&gt;&lt;/a&gt;：替换原来的评论模板，让评论区域看起来有点像论坛的风格，确实相当Sexy。&lt;/p&gt;
&lt;p&gt;11、&lt;a title=&quot;http://sw-guide.de/wordpress/plugins/math-comment-spam-protection/&quot; href=&quot;http://sw-guide.de/wordpress/plugins/math-comment-spam-protection/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Math Problem Spam Protection&lt;/strong&gt;&lt;/a&gt;：和留言验证码差不多，这个是要回答一道简单的数学问题。&lt;/p&gt;
&lt;p&gt;12、&lt;a title=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; href=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Link Love Plugin&lt;/strong&gt;&lt;/a&gt;：去除留言者链接里的&quot;nofollow&quot;标签。&lt;/p&gt;
&lt;p&gt;13、&lt;a title=&quot;http://www.semiologic.com/software/wp-fixes/dofollow/&quot; href=&quot;http://www.semiologic.com/software/wp-fixes/dofollow/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Do-Follow&lt;/strong&gt;&lt;/a&gt;：和&lt;a title=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; href=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; target=&quot;_blank&quot;&gt;Link Love Plugin&lt;/a&gt;一样，去除留言里的nofollow标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SEO相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;14、&lt;a title=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; href=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;All-in-One SEO Pack&lt;/strong&gt;&lt;/a&gt;：必备的SEO插件，不详细介绍，具体参看&lt;a href=&quot;http://www.kenengba.com/post/330.html&quot;&gt;WordPress的SEO插件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;15、&lt;a title=&quot;http://fucoder.com/code/permalink-redirect/&quot; href=&quot;http://fucoder.com/code/permalink-redirect/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Permalink Redirect&lt;/strong&gt;&lt;/a&gt;：在介绍&lt;a href=&quot;http://www.kenengba.com/post/330.html&quot;&gt;WordPress的SEO插件&lt;/a&gt;时介绍了这个插件，一个实现301转向的插件。&lt;/p&gt;
&lt;p&gt;16、&lt;a href=&quot;http://www.arnebrachhold.de/2005/06/05/google-sitemaps-generator-v2-final&quot;&gt;&lt;strong&gt;Google Sitemaps&lt;/strong&gt;&lt;/a&gt;：在博客根目录生成一个sitemap.xml文件，并自动提交到Google，方便搜索引擎进行索引。&lt;/p&gt;
&lt;p&gt;17、&lt;a title=&quot;http://wordpress.org/extend/plugins/googlepr/&quot; href=&quot;http://wordpress.org/extend/plugins/googlepr/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Google Pagerank Plugin&lt;/strong&gt;&lt;/a&gt;：展示Page Rank的插件。&lt;/p&gt;
&lt;p&gt;18、&lt;a title=&quot;http://wordpress.org/extend/plugins/alexa-rank/&quot; href=&quot;http://wordpress.org/extend/plugins/alexa-rank/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Alexa Ranking&lt;/strong&gt;&lt;/a&gt;：展示Alexa排名的插件。&lt;/p&gt;
&lt;p&gt;19、&lt;a href=&quot;http://www.dagondesign.com/articles/sitemap-generator-plugin-for-wordpress/&quot;&gt;&lt;strong&gt;Dagon Design Sitemap Generator&lt;/strong&gt;&lt;/a&gt;：生成一个网站地图。具体可以看可能吧的&lt;a href=&quot;http://www.kenengba.com/%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE&quot;&gt;网站地图&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;20、&lt;a title=&quot;http://photomatt.net/2006/06/13/wordpress-no-www/&quot; href=&quot;http://photomatt.net/2006/06/13/wordpress-no-www/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;No WWW&lt;/strong&gt;&lt;/a&gt;：将所有含有www的URL都转向到无www的URL。&lt;/p&gt;
&lt;p&gt;21、&lt;a href=&quot;http://sw-guide.de/wordpress/plugins/simple-tagging/&quot;&gt;&lt;strong&gt;Simple Tagging&lt;/strong&gt;&lt;/a&gt;：给文章添加标签。&lt;/p&gt;
&lt;p&gt;22、&lt;a title=&quot;http://www.neato.co.nz/ultimate-tag-warrior/&quot; href=&quot;http://www.neato.co.nz/ultimate-tag-warrior/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ultimate Tag Warrior&lt;/strong&gt;&lt;/a&gt;：在&lt;a href=&quot;http://www.kenengba.com/post/330.html&quot;&gt;WordPress的SEO插件&lt;/a&gt;时也介绍了这个插件，主要是用来添加文章标签。对SEO也有一定的帮助。&lt;/p&gt;
&lt;p&gt;23、&lt;a title=&quot;http://adambrown.info/b/widgets/kb-robots-txt/&quot; href=&quot;http://adambrown.info/b/widgets/kb-robots-txt/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Robots.TXT&lt;/strong&gt;&lt;/a&gt;：协助你方便地编辑robots.txt，我觉得手动编写好robots.txt再上传会更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;互动相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;24、&lt;a href=&quot;http://www.kenengba.com/post/254.html&quot;&gt;&lt;strong&gt;Share This&lt;/strong&gt;&lt;/a&gt;：一个显示社会书签收藏的插件，可能吧曾经汉化过，可以参看&lt;a href=&quot;http://www.kenengba.com/post/254.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;25、&lt;a title=&quot;http://wordpress.org/extend/plugins/members-only/&quot; href=&quot;http://wordpress.org/extend/plugins/members-only/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Members Only&lt;/strong&gt;&lt;/a&gt;：只有注册用户才可以看到你的文章。慎用！&lt;/p&gt;
&lt;p&gt;26、&lt;a title=&quot;http://www.calevans.com/view.php/page/notable&quot; href=&quot;http://www.calevans.com/view.php/page/notable&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Notable&lt;/strong&gt;&lt;/a&gt;：一个社会书签插件，可以实现在文章底部显示Del.icio.us，Digg.com等社会书签收藏图标。&lt;/p&gt;
&lt;p&gt;27、&lt;a title=&quot;http://www.bloggingexpertise.com/plugins/wp-contactform-akismet/&quot; href=&quot;http://www.bloggingexpertise.com/plugins/wp-contactform-akismet/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wp-Contact Form&lt;/strong&gt;&lt;/a&gt;：制作一个联系表格让读者可以发邮件联系你。具体参看&lt;a href=&quot;http://www.kenengba.com/contact&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;28、&lt;a title=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; href=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Show Top Commenters&lt;/strong&gt;&lt;/a&gt;：显示日、月、年或设定时间内留言最多的几位留言者。具体可以看看&lt;a href=&quot;http://www.kenengba.com/&quot;&gt;可能吧&lt;/a&gt;首页的“本月评论之星”。&lt;/p&gt;
&lt;p&gt;29、&lt;a title=&quot;http://www.justinshattuck.com/2007/03/19/comment-relish-wordpress-plugin&quot; href=&quot;http://www.justinshattuck.com/2007/03/19/comment-relish-wordpress-plugin&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Comment Relish&lt;/strong&gt;&lt;/a&gt;：给首次留言的留言者寄送一封感谢邮件。&lt;/p&gt;
&lt;p&gt;30、&lt;a title=&quot;http://wordpress.org/extend/plugins/author-complete-post-list/&quot; href=&quot;http://wordpress.org/extend/plugins/author-complete-post-list/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Author Complete Post List&lt;/strong&gt;&lt;/a&gt;：展示某个特定作者的全部文章。&lt;/p&gt;
&lt;p&gt;31、&lt;a href=&quot;http://www.jcraveiro.com/v3/projectos/delicious-cached-pp/&quot;&gt;&lt;strong&gt;Del.icio.us cached&lt;/strong&gt;&lt;/a&gt;：展示你最近在del.icio.us的收藏条目。&lt;/p&gt;
&lt;p&gt;32、&lt;a title=&quot;http://wordpress.org/extend/plugins/random-posts-widget/&quot; href=&quot;http://wordpress.org/extend/plugins/random-posts-widget/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Random Posts&lt;/strong&gt;&lt;/a&gt;：这个插件能生成随机文章。看看这篇文章底部的“随机文章”就明白了。&lt;/p&gt;
&lt;p&gt;33、&lt;a title=&quot;http://wordpress.org/extend/plugins/new-posts-popup/&quot; href=&quot;http://wordpress.org/extend/plugins/new-posts-popup/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;New Posts Pop-up&lt;/strong&gt;&lt;/a&gt;：在一个新的弹出式窗口里展示最新文章或评论。慎用！&lt;/p&gt;
&lt;p&gt;34、&lt;a title=&quot;http://wordpress.org/extend/plugins/find-us/&quot; href=&quot;http://wordpress.org/extend/plugins/find-us/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Find Us&lt;/strong&gt;&lt;/a&gt;：一个可以在博客里生成Google Maps的插件。&lt;/p&gt;
&lt;p&gt;35、&lt;a title=&quot;http://www.lamateporunyogur.net/wp-plugins/one-year-ago/#english&quot; href=&quot;http://www.lamateporunyogur.net/wp-plugins/one-year-ago/#english&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;One Year Ago&lt;/strong&gt;&lt;/a&gt;：展示一年之前的文章。&lt;/p&gt;
&lt;p&gt;36、&lt;a title=&quot;http://blog.jodies.de/archiv/2004/11/13/recent-comments/&quot; href=&quot;http://blog.jodies.de/archiv/2004/11/13/recent-comments/http://blog.jodies.de/archiv/2004/11/13/recent-comments/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Get Recent Comments&lt;/strong&gt;&lt;/a&gt;：在侧栏里显示最新评论。&lt;/p&gt;
&lt;p&gt;37、&lt;a title=&quot;http://www.michaelwales.com/2007/06/show-some-link-love-trackbackers/&quot; href=&quot;http://www.michaelwales.com/2007/06/show-some-link-love-trackbackers/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Trackbackers&lt;/strong&gt;&lt;/a&gt;：和&lt;a title=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; href=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; target=&quot;_blank&quot;&gt;Show Top Commenters&lt;/a&gt;不同，它展示的是引用你的文章最多的博客，而不是评论最多的人。&lt;/p&gt;
&lt;p&gt;38、&lt;a title=&quot;http://wordpress.org/extend/plugins/post-notification/&quot; href=&quot;http://wordpress.org/extend/plugins/post-notification/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Post Notification&lt;/strong&gt;&lt;/a&gt;：给数据库里的所有email发邮件，告诉他们你写了新文章。慎用！&lt;/p&gt;
&lt;p&gt;39、&lt;a title=&quot;http://wordpress.org/extend/plugins/about-me-widget/&quot; href=&quot;http://wordpress.org/extend/plugins/about-me-widget/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;About Me Widget&lt;/strong&gt;&lt;/a&gt;：在侧栏加入一个“关于我”的Widget。&lt;/p&gt;
&lt;p&gt;40、&lt;a title=&quot;http://wordpress.org/extend/plugins/ym-online-status/&quot; href=&quot;http://wordpress.org/extend/plugins/ym-online-status/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Yahoo Messenger Online Status&lt;/strong&gt;&lt;/a&gt;：显示你的Yahoo Messenger是否在线。&lt;/p&gt;
&lt;p&gt;41、&lt;a title=&quot;http://wordpress.org/extend/plugins/advanced-category-excluder/&quot; href=&quot;http://wordpress.org/extend/plugins/advanced-category-excluder/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Category Excluder&lt;/strong&gt;&lt;/a&gt;：让你建立一些浏览者没有权限浏览的分类目录。&lt;/p&gt;
&lt;p&gt;42、&lt;a title=&quot;http://lesterchan.net/wordpress/readme/wp-useronline.html&quot; href=&quot;http://lesterchan.net/wordpress/readme/wp-useronline.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-User Online&lt;/strong&gt;&lt;/a&gt;：显示在线人数。&lt;/p&gt;
&lt;p&gt;43、&lt;a title=&quot;http://theundersigned.net/2006/06/landing-sites-11&quot; href=&quot;http://theundersigned.net/2006/06/landing-sites-11&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Landing Sites&lt;/strong&gt;&lt;/a&gt;：有些人通过搜索引擎进入到你的博客，这个插件根据搜索关键字给这些来访者提供他们可能感兴趣的相关文章。&lt;/p&gt;
&lt;p&gt;44、&lt;a title=&quot;http://www.solo-technology.com/apps.html#related_posts&quot; href=&quot;http://www.solo-technology.com/apps.html#related_posts&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Add Related Posts to Feed&lt;/strong&gt;&lt;/a&gt;：在Feed输出里加入相关文章。需配合一些UTW或Simple tagging使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;博客优化相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;45、&lt;a title=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; href=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Related Posts&lt;/strong&gt;&lt;/a&gt;：显示相关文章的插件。可能需要配合其它插件，比如UTW或Simple tagging使用。&lt;/p&gt;
&lt;p&gt;46、&lt;a title=&quot;http://jonas.rabbe.com/archives/2005/05/08/super-archives-plugin-for-wordpress/&quot; href=&quot;http://jonas.rabbe.com/archives/2005/05/08/super-archives-plugin-for-wordpress/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Super Archive&lt;/strong&gt;&lt;/a&gt;：实现增强的文章归档。&lt;/p&gt;
&lt;p&gt;47、&lt;a title=&quot;http://mnm.uib.es/gallir/wp-cache-2/&quot; href=&quot;http://mnm.uib.es/gallir/wp-cache-2/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Cache&lt;/strong&gt;&lt;/a&gt;：将Wordpress页面进行缓存，将一些信息保存为html文件，实现快速访问。慎用！&lt;/p&gt;
&lt;p&gt;48、&lt;a title=&quot;http://alexking.org/projects/wordpress&quot; href=&quot;http://alexking.org/projects/wordpress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Popularity Contest&lt;/strong&gt;&lt;/a&gt;：通过设置一些参数来显示博客的最流行文章。可以显示年、月、周、分类最流行的文章。具体可以看看这篇文章旁边的“同期热门文章”和“年度热门文章”。&lt;/p&gt;
&lt;p&gt;49、&lt;a title=&quot;http://www.dailyblogtips.com/homepage-excerpts-wordpress-plugin/&quot; href=&quot;http://www.dailyblogtips.com/homepage-excerpts-wordpress-plugin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Homepage Excerpts&lt;/strong&gt;&lt;/a&gt;：允许在首页的第一页显示全文输出，而在第二页之后显示文章的摘要输出。&lt;/p&gt;
&lt;p&gt;50、&lt;a href=&quot;http://www.maxblogpress.com/plugins/dppp/&quot;&gt;&lt;strong&gt;Different Posts Per Page&lt;/strong&gt;&lt;/a&gt;：允许你设置不同页面显示的文章数，比如首页显示7篇、分类页显示9篇。&lt;/p&gt;
&lt;p&gt;51、&lt;a href=&quot;http://www.scriptygoddess.com/archives/2004/07/24/nextprevious-posts-in-same-category/&quot;&gt;&lt;strong&gt;Next/Previous Post in same Category&lt;/strong&gt;&lt;/a&gt;：在文章里展示同类别的上一篇和下一篇。&lt;/p&gt;
&lt;p&gt;52、&lt;a title=&quot;http://wordpress.org/extend/plugins/wp-definitions/&quot; href=&quot;http://wordpress.org/extend/plugins/wp-definitions/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP Definitions&lt;/strong&gt;&lt;/a&gt;：有时候你会在很多地方提到同一个比较偏门的名词，但不想每次都重新解释一遍，这时这个插件就用上了。只要某个词之前已经定义在数据库里面，以后就可以方便地引用了。&lt;/p&gt;
&lt;p&gt;53、&lt;a title=&quot;http://wordpress.org/extend/plugins/awsom-news-announcement/&quot; href=&quot;http://wordpress.org/extend/plugins/awsom-news-announcement/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;AWSOM&lt;/strong&gt;&lt;/a&gt;：这个插件能让制作一篇“置顶”文章或留言。非常有用。&lt;/p&gt;
&lt;p&gt;54、&lt;a title=&quot;http://wordpress.org/extend/plugins/order-posts/&quot; href=&quot;http://wordpress.org/extend/plugins/order-posts/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Order Posts&lt;/strong&gt;&lt;/a&gt;：厌倦了文章按日期排列的方式？这个让你自定义旧文章的展示方式，有时你不想浏览者看到某篇文章...&lt;/p&gt;
&lt;p&gt;55、&lt;a href=&quot;http://www.elektroelch.de/wp/pagebar.html&quot;&gt;&lt;strong&gt;Pagebar&lt;/strong&gt;&lt;/a&gt;：显示页码的插件。&lt;/p&gt;
&lt;p&gt;56、&lt;a href=&quot;http://www.lesterchan.net/portfolio/programming.php&quot;&gt;&lt;strong&gt;WP-PageNavi&lt;/strong&gt;&lt;/a&gt;：同样是显示页码的插件，与PageBar相比能自定义的项目更多。&lt;/p&gt;
&lt;p&gt;57、&lt;a title=&quot;http://wordpress.org/extend/plugins/wordpress-navigation-list-plugin-navt/&quot; href=&quot;http://wordpress.org/extend/plugins/wordpress-navigation-list-plugin-navt/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;NAVT&lt;/strong&gt;&lt;/a&gt;：一个能让你轻松设置导航栏的插件。&lt;/p&gt;
&lt;p&gt;58、&lt;a title=&quot;http://wordpress.org/extend/plugins/front-page-excluded-categories/&quot; href=&quot;http://wordpress.org/extend/plugins/front-page-excluded-categories/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Front Page Excluded Categories&lt;/strong&gt;&lt;/a&gt;：允许你设置在首页不显示某个特定分类的文章。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;多媒体相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;59、&lt;a title=&quot;http://wordpress.org/extend/plugins/wordtube/&quot; href=&quot;http://wordpress.org/extend/plugins/wordtube/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Word Tube&lt;/strong&gt;&lt;/a&gt;：又一个多媒体播放插件。&lt;/p&gt;
&lt;p&gt;60、&lt;a title=&quot;http://www.mightyseek.com/podpress&quot; href=&quot;http://www.mightyseek.com/podpress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Pod Press&lt;/strong&gt;&lt;/a&gt;：播客优化插件，内含一个播放器。&lt;/p&gt;
&lt;p&gt;61、&lt;a title=&quot;http://wordpress.org/extend/plugins/shashin/&quot; href=&quot;http://wordpress.org/extend/plugins/shashin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Shashin&lt;/strong&gt;&lt;/a&gt;：一个可以让你展示Picasa相册图片的插件。&lt;/p&gt;
&lt;p&gt;62、&lt;a href=&quot;http://www.1pixelout.net/code/audio-player-wordpress-plugin/&quot;&gt;&lt;strong&gt;Audio player&lt;/strong&gt;&lt;/a&gt;：一个媒体播放器。&lt;/p&gt;
&lt;p&gt;63、&lt;a title=&quot;http://eightface.com/wordpress/flickrrss/&quot; href=&quot;http://eightface.com/wordpress/flickrrss/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;flickrRSS&lt;/strong&gt;&lt;/a&gt;：将Flickr相册里的RSS合烧到博客的RSS里。&lt;/p&gt;
&lt;p&gt;64、&lt;a href=&quot;http://www.coolcode.cn/?p=100&quot;&gt;&lt;strong&gt;CoolPlayer&lt;/strong&gt;&lt;/a&gt;：国人开发的多媒体播放插件，支持播放音频和视频。&lt;/p&gt;
&lt;p&gt;65、&lt;a title=&quot;http://mogrify.homelinux.org/2006/09/26/wp-batch-image-uploader/&quot; href=&quot;http://mogrify.homelinux.org/2006/09/26/wp-batch-image-uploader/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Batch Image Uploader&lt;/strong&gt;&lt;/a&gt;：批量上传图片。&lt;/p&gt;
&lt;p&gt;66、&lt;a title=&quot;http://www.soderlind.no/archives/2006/01/03/imagemanager-20/&quot; href=&quot;http://www.soderlind.no/archives/2006/01/03/imagemanager-20/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Image Manager Plugin&lt;/strong&gt;&lt;/a&gt;：让你在WP后台编辑图片：裁剪、旋转等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;后台相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;67、&lt;a title=&quot;http://mudbomb.com/archives/2005/02/02/wysiwyg-plugin-for-wordpress/&quot; href=&quot;http://mudbomb.com/archives/2005/02/02/wysiwyg-plugin-for-wordpress/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WYSIWYG Plugin&lt;/strong&gt;&lt;/a&gt;：Wordpress增强插件，在&lt;a href=&quot;http://www.kenengba.com/post/282.html&quot;&gt;强化Wordpress编辑器的插件&lt;/a&gt;里有更详尽的介绍。&lt;/p&gt;
&lt;p&gt;68、&lt;a href=&quot;http://www.randypeterman.com/StatTraq/index.php&quot;&gt;&lt;strong&gt;Statraq&lt;/strong&gt;&lt;/a&gt;：博客统计插件，记录访问者的IP、搜索关键字、访问人数等等。相当强大。&lt;/p&gt;
&lt;p&gt;69、&lt;a href=&quot;http://wordpress.org/extend/plugins/stats/&quot;&gt;&lt;strong&gt;Stats&lt;/strong&gt;&lt;/a&gt;：浏览者数据统计插件。&lt;/p&gt;
&lt;p&gt;70、&lt;a title=&quot;http://wordpress.org/extend/plugins/feedstats-de/&quot; href=&quot;http://wordpress.org/extend/plugins/feedstats-de/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;FeedStats&lt;/strong&gt;&lt;/a&gt;：不喜欢到Feedburner或Feedsky烧录Feed而又想看到订阅数？这个插件是你所需的。&lt;/p&gt;
&lt;p&gt;71、&lt;a href=&quot;http://www.exwebjunkie.com/2007/02/23/wordpress-plugin-no-ping-wait/&quot;&gt;&lt;strong&gt;No ping wait&lt;/strong&gt;&lt;/a&gt;：无需等待后台ping back的时间。&lt;/p&gt;
&lt;p&gt;72、&lt;a title=&quot;http://wordpress.org/extend/plugins/semisecure-login/&quot; href=&quot;http://wordpress.org/extend/plugins/semisecure-login/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Semi-Secure Login&lt;/strong&gt;&lt;/a&gt;：提高wordpress的安全性，加密登录。&lt;/p&gt;
&lt;p&gt;73、&lt;a title=&quot;http://www.ilfilosofo.com/blog/wp-db-backup/&quot; href=&quot;http://www.ilfilosofo.com/blog/wp-db-backup/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP Database Back-up&lt;/strong&gt;&lt;/a&gt;：UploadingIT.com倒闭给我们的提示是数据备份非常重要，这是一个WP数据备份插件，建议每个星期备份一次。&lt;/p&gt;
&lt;p&gt;74、&lt;a title=&quot;http://wordpress.org/extend/plugins/kb-linker/&quot; href=&quot;http://wordpress.org/extend/plugins/kb-linker/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;KB Linker&lt;/strong&gt;&lt;/a&gt;：设定文章里某些特定的关键字自动链接到特定的链接。例如设置可能吧里凡是“可能吧”这3个字都链接到&lt;a href=&quot;http://www.kenengba.com/&quot;&gt;www.kenengba.com&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;75、&lt;a title=&quot;http://wordpress.org/extend/plugins/simple-graph/&quot; href=&quot;http://wordpress.org/extend/plugins/simple-graph/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Simple Graph&lt;/strong&gt;&lt;/a&gt;：让你轻松地在侧栏或文章里制作图表。&lt;/p&gt;
&lt;p&gt;76、&lt;a href=&quot;http://www.deanlee.cn/wordpress/fckeditor-for-wordpress-plugin/&quot;&gt;&lt;strong&gt;FCKEditor For WordPress&lt;/strong&gt;&lt;/a&gt;：非常值得推荐的WP增强编辑器，详细介绍可以参看&lt;a href=&quot;http://www.kenengba.com/post/282.html&quot;&gt;强化Wordpress编辑器的插件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;77、&lt;a title=&quot;http://wordpress.org/extend/plugins/update-manager/&quot; href=&quot;http://wordpress.org/extend/plugins/update-manager/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Update Manager&lt;/strong&gt;&lt;/a&gt;：检查博客所用的插件是否存在更新版本。&lt;/p&gt;
&lt;p&gt;78、&lt;a title=&quot;http://www.guiguan.net/2007/07/fullscreen-10-for-wp-super-edit/&quot; href=&quot;http://www.guiguan.net/2007/07/fullscreen-10-for-wp-super-edit/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Super Edit&lt;/strong&gt;&lt;/a&gt;：让你能全屏写文章（这样可能会更专心）。&lt;/p&gt;
&lt;p&gt;79、&lt;a title=&quot;http://www.zirona.com/software/wordpress-instant-upgrade/&quot; href=&quot;http://www.zirona.com/software/wordpress-instant-upgrade/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Instant Upgrade Plugin&lt;/strong&gt;&lt;/a&gt;：一键更新Wordpress。&lt;/p&gt;
&lt;p&gt;80、&lt;a title=&quot;http://alexking.org/blog/2005/05/23/popularity-contest/&quot; href=&quot;http://alexking.org/blog/2005/05/23/popularity-contest/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ultimate Google Analytics&lt;/strong&gt;&lt;/a&gt;：如果你经常更换博客主题，你可能会厌倦每次都要添加Google Analytics统计代码。这个插件能帮助你一次性嵌入统计代码，免除这个烦恼。&lt;/p&gt;
&lt;p&gt;81、&lt;a title=&quot;http://www.headzoo.com/live&quot; href=&quot;http://www.headzoo.com/live&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Live WordPress&lt;/strong&gt;&lt;/a&gt;：监视浏览者在你博客上的一举一动。&lt;/p&gt;
&lt;p&gt;82、&lt;a title=&quot;Monsters Editor for WP Super Edit&quot; href=&quot;http://wordpress.org/extend/plugins/monsters-editor-10-for-wp-super-edit/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Monsters Editor for WP Super Edit&lt;/strong&gt;&lt;/a&gt;：一个超强的WP增强型编辑器：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ha97.com/&quot;&gt;&lt;img title=&quot;www.ha97.com&quot; src=&quot;assets/2312522Rt.jpg&quot; alt=&quot;www.ha97.com&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Feed相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;83、&lt;a title=&quot;http://bloggerdesign.com/133/fb-standardstats/&quot; href=&quot;http://bloggerdesign.com/133/fb-standardstats/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feedburner Standard Stats&lt;/strong&gt;&lt;/a&gt;：在博客上显示来自Feedburner的订阅数。&lt;/p&gt;
&lt;p&gt;84、&lt;a title=&quot;http://cavemonkey50.com/code/full-feed/&quot; href=&quot;http://cavemonkey50.com/code/full-feed/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Full Text Feed&lt;/strong&gt;&lt;/a&gt;：全文输出Feed。&lt;/p&gt;
&lt;p&gt;85、&lt;a href=&quot;http://planetozh.com/blog/my-projects/wordpress-plugin-better-feed-rss/&quot;&gt;&lt;strong&gt;Better Feed&lt;/strong&gt;&lt;/a&gt;：优化Feed输出。&lt;/p&gt;
&lt;p&gt;86、&lt;a title=&quot;http://www.blogclout.com/blog/goodies/feed-footer-plugin/&quot; href=&quot;http://www.blogclout.com/blog/goodies/feed-footer-plugin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feed Footer&lt;/strong&gt;&lt;/a&gt;：优化RSS输出的插件。优化Feed的底部，例如加入版权声明等等。&lt;/p&gt;
&lt;p&gt;87、&lt;a title=&quot;http://www.feedburner.com/fb/a/help/wordpress_quickstart&quot; href=&quot;http://www.feedburner.com/fb/a/help/wordpress_quickstart&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feedburner Feedsmith&lt;/strong&gt;&lt;/a&gt;：Feed转向插件，让你的Feed301转向到在Feedburner或Feedsky烧录的Feed。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;金钱相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;88、&lt;a title=&quot;http://www.acmetech.com/blog/adsense-deluxe/&quot; href=&quot;http://www.acmetech.com/blog/adsense-deluxe/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Adsense-Deluxe&lt;/strong&gt;&lt;/a&gt;：更好地将Adsense融入到文章中去，具体效果可以看看这篇文章里面出现的Adsense。&lt;/p&gt;
&lt;p&gt;89、&lt;a title=&quot;http://wordpress.org/extend/plugins/adman/&quot; href=&quot;http://wordpress.org/extend/plugins/adman/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Adman&lt;/strong&gt;&lt;/a&gt;：让你的Adsense广告出现在文章中间。&lt;/p&gt;
&lt;p&gt;90、&lt;a title=&quot;http://www.harleyquine.com/php-scripts/author-adsense/&quot; href=&quot;http://www.harleyquine.com/php-scripts/author-adsense/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Author Adsense Plugin&lt;/strong&gt;&lt;/a&gt;：如果你的博客是多人供稿而且是投放Adsense的，你可能需要这个插件。这个插件实现Adsense的分帐户投放，不同用户的文章里会投放自己的Adsense帐户的广告。&lt;/p&gt;
&lt;p&gt;91、&lt;a title=&quot;http://www.wpbankroll.com/&quot; href=&quot;http://www.wpbankroll.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bankroll&lt;/strong&gt;&lt;/a&gt;：让广告主直接从你的博客购买广告，有点像Text Link Ads。&lt;/p&gt;
&lt;p&gt;92、&lt;a title=&quot;http://www.blogclout.com/blog/goodies/buy-me-a-beer-paypal-donation-plugin/&quot; href=&quot;http://www.blogclout.com/blog/goodies/buy-me-a-beer-paypal-donation-plugin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Buy Me A Beer Plugin&lt;/strong&gt;&lt;/a&gt;：一个比较无聊的插件，让访问者通过Paypal给你买啤酒（就是给你钱）。&lt;/p&gt;
&lt;p&gt;93、&lt;a title=&quot;http://www.thejackol.com/2006/11/16/wordpress-plugin-paypal-donate/&quot; href=&quot;http://www.thejackol.com/2006/11/16/wordpress-plugin-paypal-donate/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Paypal Donate&lt;/strong&gt;&lt;/a&gt;：和上面的插件的功能一样，让访问者通过Paypal给你募捐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;其它：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;94、&lt;a title=&quot;http://kimmo.suominen.com/sw/timezone/&quot; href=&quot;http://kimmo.suominen.com/sw/timezone/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Time Zone&lt;/strong&gt;&lt;/a&gt;：这个插件解决由夏令时带来的时间延时的烦恼。&lt;/p&gt;
&lt;p&gt;95、&lt;a title=&quot;http://www.trevorfitzgerald.com/projects/subscribe-remind&quot; href=&quot;http://www.trevorfitzgerald.com/projects/subscribe-remind&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Subscribe Remind&lt;/strong&gt;&lt;/a&gt;：在文章底部将加入提醒浏览者进行订阅的提示。&lt;/p&gt;
&lt;p&gt;96、&lt;a title=&quot;http://www.andrewferguson.net/wordpress-plugins/countdown-timer/&quot; href=&quot;http://www.andrewferguson.net/wordpress-plugins/countdown-timer/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Countdown Timer&lt;/strong&gt;&lt;/a&gt;：在侧栏加入一个倒计时。&lt;/p&gt;
&lt;p&gt;97、&lt;a title=&quot;http://remstate.com/projects/in-series/&quot; href=&quot;http://remstate.com/projects/in-series/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;In Series Plugin&lt;/strong&gt;&lt;/a&gt;：制作一系列的相关文章。&lt;/p&gt;
&lt;p&gt;98、&lt;a title=&quot;http://harper.wirelessink.com/?p=105&quot; href=&quot;http://harper.wirelessink.com/?p=105&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Ultimate Gamers Pack&lt;/strong&gt;&lt;/a&gt;：让博客可以在PSP等设备上访问。&lt;/p&gt;
&lt;p&gt;99、&lt;a title=&quot;http://lesterchan.net/wordpress/readme/wp-polls.html&quot; href=&quot;http://lesterchan.net/wordpress/readme/wp-polls.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Polls&lt;/strong&gt;&lt;/a&gt;：给博客添加投票系统。&lt;/p&gt;
&lt;p&gt;100、已经100个了，如果你要好的插件，不妨在留言里介绍给我们！&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;原文地址：&lt;a href=&quot;http://www.kuaixiang.net/100-wordpress-plugins&quot;&gt;http://www.kuaixiang.net/100-wordpress-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;0、&lt;a href=&quot;http://yanfeng.org/blog/wordpress/kit&quot;&gt;&lt;strong&gt;中文WordPress工具箱&lt;/strong&gt;&lt;/a&gt;：之所以标记为0，是因为可能吧觉得这是每个中文博客建立之初都需要安装的插件。这个插件用来解决官方WordPress没有照顾到的中文相关问题。使用这个插件，你可以显示随机文章，最新留言（最新引用），留言最多文章，发表评论最多的网友，还有真正的文章摘要，等等，真正截断，没有乱码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;留言相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;a title=&quot;http://akismet.com/&quot; href=&quot;http://akismet.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Akismet&lt;/strong&gt;&lt;/a&gt;：最流行的反垃圾留言插件。可能吧使用WP至今，它已经协助屏蔽了1700多条垃圾评论。&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;http://unknowngenius.com/blog/wordpress/spam-karma/&quot;&gt;&lt;strong&gt;Spam Karma 2&lt;/strong&gt;&lt;/a&gt;：又一个垃圾留言屏蔽插件，和Akismet相比，这个要更为复杂一些。&lt;/p&gt;
&lt;p&gt;3、&lt;a title=&quot;http://meidell.dk/archives/2006/12/19/brians-threaded-comments-159/&quot; href=&quot;http://meidell.dk/archives/2006/12/19/brians-threaded-comments-159/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Threaded Comments&lt;/strong&gt;&lt;/a&gt;：实现有针对性的留言。也就是可以针对某个留言进行留言，这个留言不出现在最底部，而是在所针对的留言的下方。&lt;/p&gt;
&lt;p&gt;4、&lt;a title=&quot;http://txfx.net/code/wordpress/subscribe-to-comments/&quot; href=&quot;http://txfx.net/code/wordpress/subscribe-to-comments/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Subscribe to Comments&lt;/strong&gt;&lt;/a&gt;：让评论者订阅文章后续评论的插件。&lt;/p&gt;
&lt;p&gt;5、&lt;a title=&quot;http://wordpress.org/extend/plugins/riffly/&quot; href=&quot;http://wordpress.org/extend/plugins/riffly/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Webcam Comments&lt;/strong&gt;&lt;/a&gt;：觉得文字留言太乏味？试试语音或视频留言如何？&lt;/p&gt;
&lt;p&gt;6、&lt;a title=&quot;http://skippy.net/gravatars/&quot; href=&quot;http://skippy.net/gravatars/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Gravatars&lt;/strong&gt;&lt;/a&gt;：只要留言者在&lt;a title=&quot;http://skippy.net/gravatars/&quot; href=&quot;http://skippy.net/gravatars/&quot; target=&quot;_blank&quot;&gt;Gravatars&lt;/a&gt;网站上传了头像，在留言时就能显示留言者的头像。&lt;/p&gt;
&lt;p&gt;7、&lt;a title=&quot;http://wordpress.org/extend/plugins/delink-comment-author/&quot; href=&quot;http://wordpress.org/extend/plugins/delink-comment-author/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;De-link Comment Author&lt;/strong&gt;&lt;/a&gt;：有时候你想删除一个评论者的链接但不想删除整个留言，这个插件可以帮助你。&lt;/p&gt;
&lt;p&gt;8、&lt;a href=&quot;http://zhiqiang.org/blog/plugins/ajaxcomment/&quot;&gt;&lt;strong&gt;Ajax Comments-Reply&lt;/strong&gt;&lt;/a&gt;：将留言系统设置成Ajax形式，不用刷新即可添加评论。&lt;/p&gt;
&lt;p&gt;9、&lt;a title=&quot;http://wordpress.org/extend/plugins/dmsguestbook/&quot; href=&quot;http://wordpress.org/extend/plugins/dmsguestbook/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;DMS Guestbook&lt;/strong&gt;&lt;/a&gt;：为你的博客制作一个留言本。&lt;/p&gt;
&lt;p&gt;10、&lt;a title=&quot;http://wordpress.org/extend/plugins/sexy-comments/&quot; href=&quot;http://wordpress.org/extend/plugins/sexy-comments/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Sexy Comments&lt;/strong&gt;&lt;/a&gt;：替换原来的评论模板，让评论区域看起来有点像论坛的风格，确实相当Sexy。&lt;/p&gt;
&lt;p&gt;11、&lt;a title=&quot;http://sw-guide.de/wordpress/plugins/math-comment-spam-protection/&quot; href=&quot;http://sw-guide.de/wordpress/plugins/math-comment-spam-protection/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Math Problem Spam Protection&lt;/strong&gt;&lt;/a&gt;：和留言验证码差不多，这个是要回答一道简单的数学问题。&lt;/p&gt;
&lt;p&gt;12、&lt;a title=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; href=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Link Love Plugin&lt;/strong&gt;&lt;/a&gt;：去除留言者链接里的&quot;nofollow&quot;标签。&lt;/p&gt;
&lt;p&gt;13、&lt;a title=&quot;http://www.semiologic.com/software/wp-fixes/dofollow/&quot; href=&quot;http://www.semiologic.com/software/wp-fixes/dofollow/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Do-Follow&lt;/strong&gt;&lt;/a&gt;：和&lt;a title=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; href=&quot;http://www.allpassionmarketing.com/software.html#Link%20Love&quot; target=&quot;_blank&quot;&gt;Link Love Plugin&lt;/a&gt;一样，去除留言里的nofollow标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SEO相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;14、&lt;a title=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; href=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;All-in-One SEO Pack&lt;/strong&gt;&lt;/a&gt;：必备的SEO插件，不详细介绍，具体参看&lt;a href=&quot;http://www.kenengba.com/post/330.html&quot;&gt;WordPress的SEO插件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;15、&lt;a title=&quot;http://fucoder.com/code/permalink-redirect/&quot; href=&quot;http://fucoder.com/code/permalink-redirect/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Permalink Redirect&lt;/strong&gt;&lt;/a&gt;：在介绍&lt;a href=&quot;http://www.kenengba.com/post/330.html&quot;&gt;WordPress的SEO插件&lt;/a&gt;时介绍了这个插件，一个实现301转向的插件。&lt;/p&gt;
&lt;p&gt;16、&lt;a href=&quot;http://www.arnebrachhold.de/2005/06/05/google-sitemaps-generator-v2-final&quot;&gt;&lt;strong&gt;Google Sitemaps&lt;/strong&gt;&lt;/a&gt;：在博客根目录生成一个sitemap.xml文件，并自动提交到Google，方便搜索引擎进行索引。&lt;/p&gt;
&lt;p&gt;17、&lt;a title=&quot;http://wordpress.org/extend/plugins/googlepr/&quot; href=&quot;http://wordpress.org/extend/plugins/googlepr/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Google Pagerank Plugin&lt;/strong&gt;&lt;/a&gt;：展示Page Rank的插件。&lt;/p&gt;
&lt;p&gt;18、&lt;a title=&quot;http://wordpress.org/extend/plugins/alexa-rank/&quot; href=&quot;http://wordpress.org/extend/plugins/alexa-rank/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Alexa Ranking&lt;/strong&gt;&lt;/a&gt;：展示Alexa排名的插件。&lt;/p&gt;
&lt;p&gt;19、&lt;a href=&quot;http://www.dagondesign.com/articles/sitemap-generator-plugin-for-wordpress/&quot;&gt;&lt;strong&gt;Dagon Design Sitemap Generator&lt;/strong&gt;&lt;/a&gt;：生成一个网站地图。具体可以看可能吧的&lt;a href=&quot;http://www.kenengba.com/%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE&quot;&gt;网站地图&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;20、&lt;a title=&quot;http://photomatt.net/2006/06/13/wordpress-no-www/&quot; href=&quot;http://photomatt.net/2006/06/13/wordpress-no-www/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;No WWW&lt;/strong&gt;&lt;/a&gt;：将所有含有www的URL都转向到无www的URL。&lt;/p&gt;
&lt;p&gt;21、&lt;a href=&quot;http://sw-guide.de/wordpress/plugins/simple-tagging/&quot;&gt;&lt;strong&gt;Simple Tagging&lt;/strong&gt;&lt;/a&gt;：给文章添加标签。&lt;/p&gt;
&lt;p&gt;22、&lt;a title=&quot;http://www.neato.co.nz/ultimate-tag-warrior/&quot; href=&quot;http://www.neato.co.nz/ultimate-tag-warrior/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ultimate Tag Warrior&lt;/strong&gt;&lt;/a&gt;：在&lt;a href=&quot;http://www.kenengba.com/post/330.html&quot;&gt;WordPress的SEO插件&lt;/a&gt;时也介绍了这个插件，主要是用来添加文章标签。对SEO也有一定的帮助。&lt;/p&gt;
&lt;p&gt;23、&lt;a title=&quot;http://adambrown.info/b/widgets/kb-robots-txt/&quot; href=&quot;http://adambrown.info/b/widgets/kb-robots-txt/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Robots.TXT&lt;/strong&gt;&lt;/a&gt;：协助你方便地编辑robots.txt，我觉得手动编写好robots.txt再上传会更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;互动相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;24、&lt;a href=&quot;http://www.kenengba.com/post/254.html&quot;&gt;&lt;strong&gt;Share This&lt;/strong&gt;&lt;/a&gt;：一个显示社会书签收藏的插件，可能吧曾经汉化过，可以参看&lt;a href=&quot;http://www.kenengba.com/post/254.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;25、&lt;a title=&quot;http://wordpress.org/extend/plugins/members-only/&quot; href=&quot;http://wordpress.org/extend/plugins/members-only/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Members Only&lt;/strong&gt;&lt;/a&gt;：只有注册用户才可以看到你的文章。慎用！&lt;/p&gt;
&lt;p&gt;26、&lt;a title=&quot;http://www.calevans.com/view.php/page/notable&quot; href=&quot;http://www.calevans.com/view.php/page/notable&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Notable&lt;/strong&gt;&lt;/a&gt;：一个社会书签插件，可以实现在文章底部显示Del.icio.us，Digg.com等社会书签收藏图标。&lt;/p&gt;
&lt;p&gt;27、&lt;a title=&quot;http://www.bloggingexpertise.com/plugins/wp-contactform-akismet/&quot; href=&quot;http://www.bloggingexpertise.com/plugins/wp-contactform-akismet/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wp-Contact Form&lt;/strong&gt;&lt;/a&gt;：制作一个联系表格让读者可以发邮件联系你。具体参看&lt;a href=&quot;http://www.kenengba.com/contact&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;28、&lt;a title=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; href=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Show Top Commenters&lt;/strong&gt;&lt;/a&gt;：显示日、月、年或设定时间内留言最多的几位留言者。具体可以看看&lt;a href=&quot;http://www.kenengba.com/&quot;&gt;可能吧&lt;/a&gt;首页的“本月评论之星”。&lt;/p&gt;
&lt;p&gt;29、&lt;a title=&quot;http://www.justinshattuck.com/2007/03/19/comment-relish-wordpress-plugin&quot; href=&quot;http://www.justinshattuck.com/2007/03/19/comment-relish-wordpress-plugin&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Comment Relish&lt;/strong&gt;&lt;/a&gt;：给首次留言的留言者寄送一封感谢邮件。&lt;/p&gt;
&lt;p&gt;30、&lt;a title=&quot;http://wordpress.org/extend/plugins/author-complete-post-list/&quot; href=&quot;http://wordpress.org/extend/plugins/author-complete-post-list/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Author Complete Post List&lt;/strong&gt;&lt;/a&gt;：展示某个特定作者的全部文章。&lt;/p&gt;
&lt;p&gt;31、&lt;a href=&quot;http://www.jcraveiro.com/v3/projectos/delicious-cached-pp/&quot;&gt;&lt;strong&gt;Del.icio.us cached&lt;/strong&gt;&lt;/a&gt;：展示你最近在del.icio.us的收藏条目。&lt;/p&gt;
&lt;p&gt;32、&lt;a title=&quot;http://wordpress.org/extend/plugins/random-posts-widget/&quot; href=&quot;http://wordpress.org/extend/plugins/random-posts-widget/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Random Posts&lt;/strong&gt;&lt;/a&gt;：这个插件能生成随机文章。看看这篇文章底部的“随机文章”就明白了。&lt;/p&gt;
&lt;p&gt;33、&lt;a title=&quot;http://wordpress.org/extend/plugins/new-posts-popup/&quot; href=&quot;http://wordpress.org/extend/plugins/new-posts-popup/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;New Posts Pop-up&lt;/strong&gt;&lt;/a&gt;：在一个新的弹出式窗口里展示最新文章或评论。慎用！&lt;/p&gt;
&lt;p&gt;34、&lt;a title=&quot;http://wordpress.org/extend/plugins/find-us/&quot; href=&quot;http://wordpress.org/extend/plugins/find-us/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Find Us&lt;/strong&gt;&lt;/a&gt;：一个可以在博客里生成Google Maps的插件。&lt;/p&gt;
&lt;p&gt;35、&lt;a title=&quot;http://www.lamateporunyogur.net/wp-plugins/one-year-ago/#english&quot; href=&quot;http://www.lamateporunyogur.net/wp-plugins/one-year-ago/#english&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;One Year Ago&lt;/strong&gt;&lt;/a&gt;：展示一年之前的文章。&lt;/p&gt;
&lt;p&gt;36、&lt;a title=&quot;http://blog.jodies.de/archiv/2004/11/13/recent-comments/&quot; href=&quot;http://blog.jodies.de/archiv/2004/11/13/recent-comments/http://blog.jodies.de/archiv/2004/11/13/recent-comments/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Get Recent Comments&lt;/strong&gt;&lt;/a&gt;：在侧栏里显示最新评论。&lt;/p&gt;
&lt;p&gt;37、&lt;a title=&quot;http://www.michaelwales.com/2007/06/show-some-link-love-trackbackers/&quot; href=&quot;http://www.michaelwales.com/2007/06/show-some-link-love-trackbackers/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Trackbackers&lt;/strong&gt;&lt;/a&gt;：和&lt;a title=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; href=&quot;http://www.pfadvice.com/wordpress-plugins/show-top-commentators/&quot; target=&quot;_blank&quot;&gt;Show Top Commenters&lt;/a&gt;不同，它展示的是引用你的文章最多的博客，而不是评论最多的人。&lt;/p&gt;
&lt;p&gt;38、&lt;a title=&quot;http://wordpress.org/extend/plugins/post-notification/&quot; href=&quot;http://wordpress.org/extend/plugins/post-notification/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Post Notification&lt;/strong&gt;&lt;/a&gt;：给数据库里的所有email发邮件，告诉他们你写了新文章。慎用！&lt;/p&gt;
&lt;p&gt;39、&lt;a title=&quot;http://wordpress.org/extend/plugins/about-me-widget/&quot; href=&quot;http://wordpress.org/extend/plugins/about-me-widget/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;About Me Widget&lt;/strong&gt;&lt;/a&gt;：在侧栏加入一个“关于我”的Widget。&lt;/p&gt;
&lt;p&gt;40、&lt;a title=&quot;http://wordpress.org/extend/plugins/ym-online-status/&quot; href=&quot;http://wordpress.org/extend/plugins/ym-online-status/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Yahoo Messenger Online Status&lt;/strong&gt;&lt;/a&gt;：显示你的Yahoo Messenger是否在线。&lt;/p&gt;
&lt;p&gt;41、&lt;a title=&quot;http://wordpress.org/extend/plugins/advanced-category-excluder/&quot; href=&quot;http://wordpress.org/extend/plugins/advanced-category-excluder/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Category Excluder&lt;/strong&gt;&lt;/a&gt;：让你建立一些浏览者没有权限浏览的分类目录。&lt;/p&gt;
&lt;p&gt;42、&lt;a title=&quot;http://lesterchan.net/wordpress/readme/wp-useronline.html&quot; href=&quot;http://lesterchan.net/wordpress/readme/wp-useronline.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-User Online&lt;/strong&gt;&lt;/a&gt;：显示在线人数。&lt;/p&gt;
&lt;p&gt;43、&lt;a title=&quot;http://theundersigned.net/2006/06/landing-sites-11&quot; href=&quot;http://theundersigned.net/2006/06/landing-sites-11&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Landing Sites&lt;/strong&gt;&lt;/a&gt;：有些人通过搜索引擎进入到你的博客，这个插件根据搜索关键字给这些来访者提供他们可能感兴趣的相关文章。&lt;/p&gt;
&lt;p&gt;44、&lt;a title=&quot;http://www.solo-technology.com/apps.html#related_posts&quot; href=&quot;http://www.solo-technology.com/apps.html#related_posts&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Add Related Posts to Feed&lt;/strong&gt;&lt;/a&gt;：在Feed输出里加入相关文章。需配合一些UTW或Simple tagging使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;博客优化相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;45、&lt;a title=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; href=&quot;http://wasabi.pbwiki.com/Related%20Entries&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Related Posts&lt;/strong&gt;&lt;/a&gt;：显示相关文章的插件。可能需要配合其它插件，比如UTW或Simple tagging使用。&lt;/p&gt;
&lt;p&gt;46、&lt;a title=&quot;http://jonas.rabbe.com/archives/2005/05/08/super-archives-plugin-for-wordpress/&quot; href=&quot;http://jonas.rabbe.com/archives/2005/05/08/super-archives-plugin-for-wordpress/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Super Archive&lt;/strong&gt;&lt;/a&gt;：实现增强的文章归档。&lt;/p&gt;
&lt;p&gt;47、&lt;a title=&quot;http://mnm.uib.es/gallir/wp-cache-2/&quot; href=&quot;http://mnm.uib.es/gallir/wp-cache-2/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Cache&lt;/strong&gt;&lt;/a&gt;：将Wordpress页面进行缓存，将一些信息保存为html文件，实现快速访问。慎用！&lt;/p&gt;
&lt;p&gt;48、&lt;a title=&quot;http://alexking.org/projects/wordpress&quot; href=&quot;http://alexking.org/projects/wordpress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Popularity Contest&lt;/strong&gt;&lt;/a&gt;：通过设置一些参数来显示博客的最流行文章。可以显示年、月、周、分类最流行的文章。具体可以看看这篇文章旁边的“同期热门文章”和“年度热门文章”。&lt;/p&gt;
&lt;p&gt;49、&lt;a title=&quot;http://www.dailyblogtips.com/homepage-excerpts-wordpress-plugin/&quot; href=&quot;http://www.dailyblogtips.com/homepage-excerpts-wordpress-plugin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Homepage Excerpts&lt;/strong&gt;&lt;/a&gt;：允许在首页的第一页显示全文输出，而在第二页之后显示文章的摘要输出。&lt;/p&gt;
&lt;p&gt;50、&lt;a href=&quot;http://www.maxblogpress.com/plugins/dppp/&quot;&gt;&lt;strong&gt;Different Posts Per Page&lt;/strong&gt;&lt;/a&gt;：允许你设置不同页面显示的文章数，比如首页显示7篇、分类页显示9篇。&lt;/p&gt;
&lt;p&gt;51、&lt;a href=&quot;http://www.scriptygoddess.com/archives/2004/07/24/nextprevious-posts-in-same-category/&quot;&gt;&lt;strong&gt;Next/Previous Post in same Category&lt;/strong&gt;&lt;/a&gt;：在文章里展示同类别的上一篇和下一篇。&lt;/p&gt;
&lt;p&gt;52、&lt;a title=&quot;http://wordpress.org/extend/plugins/wp-definitions/&quot; href=&quot;http://wordpress.org/extend/plugins/wp-definitions/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP Definitions&lt;/strong&gt;&lt;/a&gt;：有时候你会在很多地方提到同一个比较偏门的名词，但不想每次都重新解释一遍，这时这个插件就用上了。只要某个词之前已经定义在数据库里面，以后就可以方便地引用了。&lt;/p&gt;
&lt;p&gt;53、&lt;a title=&quot;http://wordpress.org/extend/plugins/awsom-news-announcement/&quot; href=&quot;http://wordpress.org/extend/plugins/awsom-news-announcement/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;AWSOM&lt;/strong&gt;&lt;/a&gt;：这个插件能让制作一篇“置顶”文章或留言。非常有用。&lt;/p&gt;
&lt;p&gt;54、&lt;a title=&quot;http://wordpress.org/extend/plugins/order-posts/&quot; href=&quot;http://wordpress.org/extend/plugins/order-posts/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Order Posts&lt;/strong&gt;&lt;/a&gt;：厌倦了文章按日期排列的方式？这个让你自定义旧文章的展示方式，有时你不想浏览者看到某篇文章...&lt;/p&gt;
&lt;p&gt;55、&lt;a href=&quot;http://www.elektroelch.de/wp/pagebar.html&quot;&gt;&lt;strong&gt;Pagebar&lt;/strong&gt;&lt;/a&gt;：显示页码的插件。&lt;/p&gt;
&lt;p&gt;56、&lt;a href=&quot;http://www.lesterchan.net/portfolio/programming.php&quot;&gt;&lt;strong&gt;WP-PageNavi&lt;/strong&gt;&lt;/a&gt;：同样是显示页码的插件，与PageBar相比能自定义的项目更多。&lt;/p&gt;
&lt;p&gt;57、&lt;a title=&quot;http://wordpress.org/extend/plugins/wordpress-navigation-list-plugin-navt/&quot; href=&quot;http://wordpress.org/extend/plugins/wordpress-navigation-list-plugin-navt/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;NAVT&lt;/strong&gt;&lt;/a&gt;：一个能让你轻松设置导航栏的插件。&lt;/p&gt;
&lt;p&gt;58、&lt;a title=&quot;http://wordpress.org/extend/plugins/front-page-excluded-categories/&quot; href=&quot;http://wordpress.org/extend/plugins/front-page-excluded-categories/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Front Page Excluded Categories&lt;/strong&gt;&lt;/a&gt;：允许你设置在首页不显示某个特定分类的文章。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;多媒体相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;59、&lt;a title=&quot;http://wordpress.org/extend/plugins/wordtube/&quot; href=&quot;http://wordpress.org/extend/plugins/wordtube/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Word Tube&lt;/strong&gt;&lt;/a&gt;：又一个多媒体播放插件。&lt;/p&gt;
&lt;p&gt;60、&lt;a title=&quot;http://www.mightyseek.com/podpress&quot; href=&quot;http://www.mightyseek.com/podpress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Pod Press&lt;/strong&gt;&lt;/a&gt;：播客优化插件，内含一个播放器。&lt;/p&gt;
&lt;p&gt;61、&lt;a title=&quot;http://wordpress.org/extend/plugins/shashin/&quot; href=&quot;http://wordpress.org/extend/plugins/shashin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Shashin&lt;/strong&gt;&lt;/a&gt;：一个可以让你展示Picasa相册图片的插件。&lt;/p&gt;
&lt;p&gt;62、&lt;a href=&quot;http://www.1pixelout.net/code/audio-player-wordpress-plugin/&quot;&gt;&lt;strong&gt;Audio player&lt;/strong&gt;&lt;/a&gt;：一个媒体播放器。&lt;/p&gt;
&lt;p&gt;63、&lt;a title=&quot;http://eightface.com/wordpress/flickrrss/&quot; href=&quot;http://eightface.com/wordpress/flickrrss/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;flickrRSS&lt;/strong&gt;&lt;/a&gt;：将Flickr相册里的RSS合烧到博客的RSS里。&lt;/p&gt;
&lt;p&gt;64、&lt;a href=&quot;http://www.coolcode.cn/?p=100&quot;&gt;&lt;strong&gt;CoolPlayer&lt;/strong&gt;&lt;/a&gt;：国人开发的多媒体播放插件，支持播放音频和视频。&lt;/p&gt;
&lt;p&gt;65、&lt;a title=&quot;http://mogrify.homelinux.org/2006/09/26/wp-batch-image-uploader/&quot; href=&quot;http://mogrify.homelinux.org/2006/09/26/wp-batch-image-uploader/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Batch Image Uploader&lt;/strong&gt;&lt;/a&gt;：批量上传图片。&lt;/p&gt;
&lt;p&gt;66、&lt;a title=&quot;http://www.soderlind.no/archives/2006/01/03/imagemanager-20/&quot; href=&quot;http://www.soderlind.no/archives/2006/01/03/imagemanager-20/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Image Manager Plugin&lt;/strong&gt;&lt;/a&gt;：让你在WP后台编辑图片：裁剪、旋转等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;后台相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;67、&lt;a title=&quot;http://mudbomb.com/archives/2005/02/02/wysiwyg-plugin-for-wordpress/&quot; href=&quot;http://mudbomb.com/archives/2005/02/02/wysiwyg-plugin-for-wordpress/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WYSIWYG Plugin&lt;/strong&gt;&lt;/a&gt;：Wordpress增强插件，在&lt;a href=&quot;http://www.kenengba.com/post/282.html&quot;&gt;强化Wordpress编辑器的插件&lt;/a&gt;里有更详尽的介绍。&lt;/p&gt;
&lt;p&gt;68、&lt;a href=&quot;http://www.randypeterman.com/StatTraq/index.php&quot;&gt;&lt;strong&gt;Statraq&lt;/strong&gt;&lt;/a&gt;：博客统计插件，记录访问者的IP、搜索关键字、访问人数等等。相当强大。&lt;/p&gt;
&lt;p&gt;69、&lt;a href=&quot;http://wordpress.org/extend/plugins/stats/&quot;&gt;&lt;strong&gt;Stats&lt;/strong&gt;&lt;/a&gt;：浏览者数据统计插件。&lt;/p&gt;
&lt;p&gt;70、&lt;a title=&quot;http://wordpress.org/extend/plugins/feedstats-de/&quot; href=&quot;http://wordpress.org/extend/plugins/feedstats-de/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;FeedStats&lt;/strong&gt;&lt;/a&gt;：不喜欢到Feedburner或Feedsky烧录Feed而又想看到订阅数？这个插件是你所需的。&lt;/p&gt;
&lt;p&gt;71、&lt;a href=&quot;http://www.exwebjunkie.com/2007/02/23/wordpress-plugin-no-ping-wait/&quot;&gt;&lt;strong&gt;No ping wait&lt;/strong&gt;&lt;/a&gt;：无需等待后台ping back的时间。&lt;/p&gt;
&lt;p&gt;72、&lt;a title=&quot;http://wordpress.org/extend/plugins/semisecure-login/&quot; href=&quot;http://wordpress.org/extend/plugins/semisecure-login/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Semi-Secure Login&lt;/strong&gt;&lt;/a&gt;：提高wordpress的安全性，加密登录。&lt;/p&gt;
&lt;p&gt;73、&lt;a title=&quot;http://www.ilfilosofo.com/blog/wp-db-backup/&quot; href=&quot;http://www.ilfilosofo.com/blog/wp-db-backup/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP Database Back-up&lt;/strong&gt;&lt;/a&gt;：UploadingIT.com倒闭给我们的提示是数据备份非常重要，这是一个WP数据备份插件，建议每个星期备份一次。&lt;/p&gt;
&lt;p&gt;74、&lt;a title=&quot;http://wordpress.org/extend/plugins/kb-linker/&quot; href=&quot;http://wordpress.org/extend/plugins/kb-linker/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;KB Linker&lt;/strong&gt;&lt;/a&gt;：设定文章里某些特定的关键字自动链接到特定的链接。例如设置可能吧里凡是“可能吧”这3个字都链接到&lt;a href=&quot;http://www.kenengba.com/&quot;&gt;www.kenengba.com&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;75、&lt;a title=&quot;http://wordpress.org/extend/plugins/simple-graph/&quot; href=&quot;http://wordpress.org/extend/plugins/simple-graph/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Simple Graph&lt;/strong&gt;&lt;/a&gt;：让你轻松地在侧栏或文章里制作图表。&lt;/p&gt;
&lt;p&gt;76、&lt;a href=&quot;http://www.deanlee.cn/wordpress/fckeditor-for-wordpress-plugin/&quot;&gt;&lt;strong&gt;FCKEditor For WordPress&lt;/strong&gt;&lt;/a&gt;：非常值得推荐的WP增强编辑器，详细介绍可以参看&lt;a href=&quot;http://www.kenengba.com/post/282.html&quot;&gt;强化Wordpress编辑器的插件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;77、&lt;a title=&quot;http://wordpress.org/extend/plugins/update-manager/&quot; href=&quot;http://wordpress.org/extend/plugins/update-manager/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Update Manager&lt;/strong&gt;&lt;/a&gt;：检查博客所用的插件是否存在更新版本。&lt;/p&gt;
&lt;p&gt;78、&lt;a title=&quot;http://www.guiguan.net/2007/07/fullscreen-10-for-wp-super-edit/&quot; href=&quot;http://www.guiguan.net/2007/07/fullscreen-10-for-wp-super-edit/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Super Edit&lt;/strong&gt;&lt;/a&gt;：让你能全屏写文章（这样可能会更专心）。&lt;/p&gt;
&lt;p&gt;79、&lt;a title=&quot;http://www.zirona.com/software/wordpress-instant-upgrade/&quot; href=&quot;http://www.zirona.com/software/wordpress-instant-upgrade/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Instant Upgrade Plugin&lt;/strong&gt;&lt;/a&gt;：一键更新Wordpress。&lt;/p&gt;
&lt;p&gt;80、&lt;a title=&quot;http://alexking.org/blog/2005/05/23/popularity-contest/&quot; href=&quot;http://alexking.org/blog/2005/05/23/popularity-contest/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ultimate Google Analytics&lt;/strong&gt;&lt;/a&gt;：如果你经常更换博客主题，你可能会厌倦每次都要添加Google Analytics统计代码。这个插件能帮助你一次性嵌入统计代码，免除这个烦恼。&lt;/p&gt;
&lt;p&gt;81、&lt;a title=&quot;http://www.headzoo.com/live&quot; href=&quot;http://www.headzoo.com/live&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Live WordPress&lt;/strong&gt;&lt;/a&gt;：监视浏览者在你博客上的一举一动。&lt;/p&gt;
&lt;p&gt;82、&lt;a title=&quot;Monsters Editor for WP Super Edit&quot; href=&quot;http://wordpress.org/extend/plugins/monsters-editor-10-for-wp-super-edit/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Monsters Editor for WP Super Edit&lt;/strong&gt;&lt;/a&gt;：一个超强的WP增强型编辑器：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ha97.com/&quot;&gt;&lt;img title=&quot;www.ha97.com&quot; src=&quot;assets/2312522Rt.jpg&quot; alt=&quot;www.ha97.com&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Feed相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;83、&lt;a title=&quot;http://bloggerdesign.com/133/fb-standardstats/&quot; href=&quot;http://bloggerdesign.com/133/fb-standardstats/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feedburner Standard Stats&lt;/strong&gt;&lt;/a&gt;：在博客上显示来自Feedburner的订阅数。&lt;/p&gt;
&lt;p&gt;84、&lt;a title=&quot;http://cavemonkey50.com/code/full-feed/&quot; href=&quot;http://cavemonkey50.com/code/full-feed/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Full Text Feed&lt;/strong&gt;&lt;/a&gt;：全文输出Feed。&lt;/p&gt;
&lt;p&gt;85、&lt;a href=&quot;http://planetozh.com/blog/my-projects/wordpress-plugin-better-feed-rss/&quot;&gt;&lt;strong&gt;Better Feed&lt;/strong&gt;&lt;/a&gt;：优化Feed输出。&lt;/p&gt;
&lt;p&gt;86、&lt;a title=&quot;http://www.blogclout.com/blog/goodies/feed-footer-plugin/&quot; href=&quot;http://www.blogclout.com/blog/goodies/feed-footer-plugin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feed Footer&lt;/strong&gt;&lt;/a&gt;：优化RSS输出的插件。优化Feed的底部，例如加入版权声明等等。&lt;/p&gt;
&lt;p&gt;87、&lt;a title=&quot;http://www.feedburner.com/fb/a/help/wordpress_quickstart&quot; href=&quot;http://www.feedburner.com/fb/a/help/wordpress_quickstart&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feedburner Feedsmith&lt;/strong&gt;&lt;/a&gt;：Feed转向插件，让你的Feed301转向到在Feedburner或Feedsky烧录的Feed。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;金钱相关：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;88、&lt;a title=&quot;http://www.acmetech.com/blog/adsense-deluxe/&quot; href=&quot;http://www.acmetech.com/blog/adsense-deluxe/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Adsense-Deluxe&lt;/strong&gt;&lt;/a&gt;：更好地将Adsense融入到文章中去，具体效果可以看看这篇文章里面出现的Adsense。&lt;/p&gt;
&lt;p&gt;89、&lt;a title=&quot;http://wordpress.org/extend/plugins/adman/&quot; href=&quot;http://wordpress.org/extend/plugins/adman/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Adman&lt;/strong&gt;&lt;/a&gt;：让你的Adsense广告出现在文章中间。&lt;/p&gt;
&lt;p&gt;90、&lt;a title=&quot;http://www.harleyquine.com/php-scripts/author-adsense/&quot; href=&quot;http://www.harleyquine.com/php-scripts/author-adsense/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Author Adsense Plugin&lt;/strong&gt;&lt;/a&gt;：如果你的博客是多人供稿而且是投放Adsense的，你可能需要这个插件。这个插件实现Adsense的分帐户投放，不同用户的文章里会投放自己的Adsense帐户的广告。&lt;/p&gt;
&lt;p&gt;91、&lt;a title=&quot;http://www.wpbankroll.com/&quot; href=&quot;http://www.wpbankroll.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bankroll&lt;/strong&gt;&lt;/a&gt;：让广告主直接从你的博客购买广告，有点像Text Link Ads。&lt;/p&gt;
&lt;p&gt;92、&lt;a title=&quot;http://www.blogclout.com/blog/goodies/buy-me-a-beer-paypal-donation-plugin/&quot; href=&quot;http://www.blogclout.com/blog/goodies/buy-me-a-beer-paypal-donation-plugin/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Buy Me A Beer Plugin&lt;/strong&gt;&lt;/a&gt;：一个比较无聊的插件，让访问者通过Paypal给你买啤酒（就是给你钱）。&lt;/p&gt;
&lt;p&gt;93、&lt;a title=&quot;http://www.thejackol.com/2006/11/16/wordpress-plugin-paypal-donate/&quot; href=&quot;http://www.thejackol.com/2006/11/16/wordpress-plugin-paypal-donate/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Paypal Donate&lt;/strong&gt;&lt;/a&gt;：和上面的插件的功能一样，让访问者通过Paypal给你募捐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;其它：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;94、&lt;a title=&quot;http://kimmo.suominen.com/sw/timezone/&quot; href=&quot;http://kimmo.suominen.com/sw/timezone/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Time Zone&lt;/strong&gt;&lt;/a&gt;：这个插件解决由夏令时带来的时间延时的烦恼。&lt;/p&gt;
&lt;p&gt;95、&lt;a title=&quot;http://www.trevorfitzgerald.com/projects/subscribe-remind&quot; href=&quot;http://www.trevorfitzgerald.com/projects/subscribe-remind&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Subscribe Remind&lt;/strong&gt;&lt;/a&gt;：在文章底部将加入提醒浏览者进行订阅的提示。&lt;/p&gt;
&lt;p&gt;96、&lt;a title=&quot;http://www.andrewferguson.net/wordpress-plugins/countdown-timer/&quot; href=&quot;http://www.andrewferguson.net/wordpress-plugins/countdown-timer/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Countdown Timer&lt;/strong&gt;&lt;/a&gt;：在侧栏加入一个倒计时。&lt;/p&gt;
&lt;p&gt;97、&lt;a title=&quot;http://remstate.com/projects/in-series/&quot; href=&quot;http://remstate.com/projects/in-series/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;In Series Plugin&lt;/strong&gt;&lt;/a&gt;：制作一系列的相关文章。&lt;/p&gt;
&lt;p&gt;98、&lt;a title=&quot;http://harper.wirelessink.com/?p=105&quot; href=&quot;http://harper.wirelessink.com/?p=105&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Ultimate Gamers Pack&lt;/strong&gt;&lt;/a&gt;：让博客可以在PSP等设备上访问。&lt;/p&gt;
&lt;p&gt;99、&lt;a title=&quot;http://lesterchan.net/wordpress/readme/wp-polls.html&quot; href=&quot;http://lesterchan.net/wordpress/readme/wp-polls.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;WP-Polls&lt;/strong&gt;&lt;/a&gt;：给博客添加投票系统。&lt;/p&gt;
&lt;p&gt;100、已经100个了，如果你要好的插件，不妨在留言里介绍给我们！&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>添加新浪微博边栏</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%25e6%25b7%25bb%25e5%258a%25a0%25e6%2596%25b0%25e6%25b5%25aa%25e5%25be%25ae%25e5%258d%259a%25e8%25be%25b9%25e6%25a0%258f.html"/>
        <updated>2011-08-08T12:05:30+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%e6%b7%bb%e5%8a%a0%e6%96%b0%e6%b5%aa%e5%be%ae%e5%8d%9a%e8%be%b9%e6%a0%8f</id>
        <content type="html">&lt;p&gt;方法也是网上搜索的。原文网址如下&lt;a href=&quot;http://www.dpxzg.com/2010/01/wordpresssina.html&quot;&gt;http://www.dpxzg.com/2010/01/wordpresssina.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      博客挂件添加地址：&lt;/strong&gt;&lt;a href=&quot;http://t.sina.com.cn/person/widget.php&quot;&gt;http://t.sina.com.cn/person/widget.php&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;      [添加方法]&lt;/strong&gt;：预览并生成代码→复制代码→登录博客后台管理→外观→小工具→选择一个文本拖到右边框→粘贴代码→应用→保存→搞定！&lt;/div&gt;
</content>
        <summary type="html">&lt;p&gt;方法也是网上搜索的。原文网址如下&lt;a href=&quot;http://www.dpxzg.com/2010/01/wordpresssina.html&quot;&gt;http://www.dpxzg.com/2010/01/wordpresssina.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      博客挂件添加地址：&lt;/strong&gt;&lt;a href=&quot;http://t.sina.com.cn/person/widget.php&quot;&gt;http://t.sina.com.cn/person/widget.php&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;      [添加方法]&lt;/strong&gt;：预览并生成代码→复制代码→登录博客后台管理→外观→小工具→选择一个文本拖到右边框→粘贴代码→应用→保存→搞定！&lt;/div&gt;
</summary>
    </entry>
    
    <entry>
        <title>个人博客开通</title>
        <link href="http://liyouhai.com/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%25e4%25b8%25aa%25e4%25ba%25ba%25e5%258d%259a%25e5%25ae%25a2%25e5%25bc%2580%25e9%2580%259a.html"/>
        <updated>2011-08-07T04:48:35+08:00</updated>
        <id>http://liyouhai.com//%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/%e4%b8%aa%e4%ba%ba%e5%8d%9a%e5%ae%a2%e5%bc%80%e9%80%9a</id>
        <content type="html">&lt;p&gt;今天终于开通了自己的blog网站。原Blog http://ivan-pig.iteye.com/不再更新。&lt;/p&gt;
</content>
        <summary type="html">&lt;p&gt;今天终于开通了自己的blog网站。原Blog http://ivan-pig.iteye.com/不再更新。&lt;/p&gt;
</summary>
    </entry>
    
    <entry>
        <title>使用Emacs Org-mode来记笔记</title>
        <link href="http://liyouhai.com/emacs-vim/%25e4%25bd%25bf%25e7%2594%25a8emacs-org-mode%25e6%259d%25a5%25e8%25ae%25b0%25e7%25ac%2594%25e8%25ae%25b0.html"/>
        <updated>2010-08-24T16:00:00+08:00</updated>
        <id>http://liyouhai.com//emacs-vim/%e4%bd%bf%e7%94%a8emacs-org-mode%e6%9d%a5%e8%ae%b0%e7%ac%94%e8%ae%b0</id>
        <content type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. Emacs Org-mode能干什么&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;2.1. 进入Org-mode模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;2.2. 目录树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;2.3. Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-4&quot;&gt;2.4. 链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-5&quot;&gt;2.5. 脚注&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-6&quot;&gt;2.6. 表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-7&quot;&gt;2.7. &lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp&quot;&gt;&amp;lt;2010-08-25 星期三&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-7-1&quot;&gt;2.7.1. 时间控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-7-2&quot;&gt;2.7.2. 多选任务列表 &lt;code&gt;[50%]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-8&quot;&gt;2.8. 源代码染色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-9&quot;&gt;2.9. 导出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 结束&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
一直在寻找一个记笔记的软件，但是一直没有找到合适的。&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;本来用的Evernote,优点是平台众多，Windows,Mac,Mobile都有（Linux没有,Android手机没有离线浏览功能）。但是改成.net开发后，资源占用大得惊人。而且网页抓取是有问题的。如下图
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;img src=&quot;assets/wpid-01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;assets/wpid-02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;又试了PKM2，也不是很满意。抓取网页效果不错，比Evernote效果好。不满意的是它保存附件的方式，全都放到了一个文件夹里面。如果我想单独找附件的话几乎不可能。只能通过PKM打开，点击附件链接才行。
&lt;/li&gt;
&lt;li&gt;Vim快速修改程序倒是很爽。记笔记功能单一了点，基本只能记录文本文件。
&lt;/li&gt;
&lt;li&gt;最后决定用Emacs的org-mode。至少基本功能都适合了。&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Emacs Org-mode能干什么&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 进入Org-mode模式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
Ctrl+x Ctrl+f输入文件名新建一个.org的文件，就自动进入了org-mode模式了。&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; name=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 目录树&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
    Emacs建立目录树是很简单的。使用* &lt;sup&gt;&lt;a id=&quot;fnr.3&quot; name=&quot;fnr.3&quot; class=&quot;footref&quot; href=&quot;#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;就可以了。一级是一个*，二级是两个*，以此类推。当你导出以后会自动的生成目录链接。&lt;br /&gt;
在Emacs里面使用Shift+Tab键可以收起所有的目录树，再按Tab可以依次展开。Alt+左右方向键是减少/增加当前节点的层级.Alt+Shift+左右方向键&lt;br /&gt;
可以将效果作用到子节点上。Alt+上下键可以移动节点。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; Tag&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
当目录树的节点越来越多时，查找就不方便了，这时候可以给节点添加Tag。光标到节点上，Ctrl+c两次，就会提醒你输入tag添加即可。要查询tag，Ctrl+c \就可以了。&lt;br /&gt;
&lt;img src=&quot;assets/wpid-03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; 链接&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;
    按下Ctrl+c Ctrl+l就可以添加一个链接，可以链接任何文件。只要输入绝对路径或相对路径即可。上图就是我的一个Index.org，专门链接其他文件的，作为目录使用。&lt;br /&gt;
对于图片来说，如果不给图片添加描述的话，在导出的时候，Emacs会自动显示图片，如果添加了描述则是超链接形式了。链接文件的名称，位置都由我来控制，即使我不使用Emacs了，我依然能到目录里面找到需要的文件。&lt;br /&gt;
在链接处Ctrl+c Ctrl+o就能打开链接文件。不过可惜啊，在Windows下面，Emacs打开不了图片和pdf，打开都是乱码。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; 脚注&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;
Ctrl+c Ctrl+x f会自动给光标处添加一个脚注。我已经在上面添加了几个脚注了。添加完脚注，再按一次Ctrl+c Ctrl+x f就会回到原来添加脚注的地方。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.6&lt;/span&gt; 表格&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p&gt;
试了一下，Emacs添加表格很方便。输入使用|分隔即可。多试试Tab键就知道了。下面看看效果。&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;表头1&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;表头2&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;表头3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;表体11&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体12&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;表体21&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体22&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体33&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
这是源码&lt;img src=&quot;assets/wpid-04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;br /&gt;
样式是我自己定义的，下面再说。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.7&lt;/span&gt; &lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; &lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp&quot;&gt;&amp;lt;2010-08-25 星期三&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;
&lt;p&gt;
可以做计划列表，名字特定为TODO，全部大写。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-7-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-7-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.7.1&lt;/span&gt; 时间控制&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-7-1&quot;&gt;
&lt;p&gt;
Ctrl+c Ctrl+s 插入计划时间，Ctrl+c Ctrl+d插入最后时间，Ctrl+c .插入时间戳&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-7-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-7-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.7.2&lt;/span&gt; 多选任务列表 &lt;code&gt;[50%]&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-7-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 就是一个多选按钮了，在这一行按两次Ctrl+c就会选中此项。再按两次取消。在节点上加入&lt;code&gt;[%]&lt;/code&gt;就会按照半分比来显示完成情况。&lt;code&gt;[/]&lt;/code&gt;按照数量来显示完成情况。自己试试吧。
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 第二个多选按钮，选中了。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.8&lt;/span&gt; 源代码染色&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;p&gt;
直接看效果吧！这是我给Emacs添加的自定义css,生成HTML的时候用的。&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;&amp;lt;style type=&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #268bd2;&quot;&gt;body&lt;/span&gt;{
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font-size&lt;/span&gt;:12px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:0px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;:0px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;:#666666;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font-family&lt;/span&gt;:&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;trebuchet ms&quot;&lt;/span&gt;,arial,helvetica,sans-serif;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;background-color&lt;/span&gt;:#F8F8F8;
        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        a:link,a:visited&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;text-decoration&lt;/span&gt;:none;&lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;: #5489DE;}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        a:hover&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;:#FD0085;&lt;span style=&quot;color: #268bd2;&quot;&gt;text-decoration&lt;/span&gt;:none;}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        #content &lt;/span&gt;{
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;text-align&lt;/span&gt;:left;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;width&lt;/span&gt;:958px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;background&lt;/span&gt;:#FFF;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-color&lt;/span&gt;:#DDD;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-style&lt;/span&gt;:solid;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-width&lt;/span&gt;:1px 1px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:0 auto; 
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin-top&lt;/span&gt;:15px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin-bottom&lt;/span&gt;:15px;

&lt;span id=&quot;coderef-1&quot; class=&quot;coderef-off&quot;&gt;                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-moz-border-radius&lt;/span&gt;: 15px;&lt;/span&gt;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-webkit-border-radius&lt;/span&gt;: 15px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-radius&lt;/span&gt;: 15px;

&lt;span id=&quot;coderef-2&quot; class=&quot;coderef-off&quot;&gt;                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-webkit-box-shadow&lt;/span&gt;: 10px 10px 25px #ccc;&lt;/span&gt;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-moz-box-shadow&lt;/span&gt;: 10px 10px 25px #ccc;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;box-shadow&lt;/span&gt;: 10px 10px 25px #ccc;


        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        #postamble&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin-top&lt;/span&gt;:15px}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        #org-div-home-and-up&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin-right&lt;/span&gt;:10px;&lt;span style=&quot;color: #268bd2;&quot;&gt;margin-top&lt;/span&gt;:5px}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        .title&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;:#666666}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        .src,.example&lt;/span&gt;{
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;: 5px 10px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;font-size&lt;/span&gt;: small
        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        p&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;: 5px 10px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        h2&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 5px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        h3&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 10px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        h4&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 15px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        img&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;max-width&lt;/span&gt;:940px; &lt;span style=&quot;color: #268bd2;&quot;&gt;width&lt;/span&gt;:expression(document.body.clientWidth &amp;gt; 940? &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;940px&quot;&lt;/span&gt;: &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;auto&quot;&lt;/span&gt; );&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 5px}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        table&lt;/span&gt;{
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;: 0;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin-left&lt;/span&gt;:15px;
        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        th &lt;/span&gt;{
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font&lt;/span&gt;: bold 12px &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Trebuchet MS&quot;&lt;/span&gt;, Verdana, Arial, Helvetica, sans-serif;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;: #4f6b72;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;border&lt;/span&gt;: 1px solid #C1DAD7;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;letter-spacing&lt;/span&gt;: 2px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;text-align&lt;/span&gt;: center;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;: 6px 6px 6px 12px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;background&lt;/span&gt;: #CAE8EA  no-repeat;
          }
&lt;span style=&quot;color: #268bd2;&quot;&gt;         td &lt;/span&gt;{
                &lt;span style=&quot;color: #268bd2;&quot;&gt;border&lt;/span&gt;: 1px solid #C1DAD7;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;background&lt;/span&gt;: #fff;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font-size&lt;/span&gt;:11px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;: 6px 6px 6px 12px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;: #4f6b72;
          }
&amp;lt;/style&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href=&quot;#coderef-1&quot; class=&quot;coderef&quot; onmouseover=&quot;CodeHighlightOn(this, 'coderef-1');&quot; onmouseout=&quot;CodeHighlightOff(this, 'coderef-1');&quot;&gt;25行&lt;/a&gt;和&lt;a href=&quot;#coderef-2&quot; class=&quot;coderef&quot; onmouseover=&quot;CodeHighlightOn(this, 'coderef-2');&quot; onmouseout=&quot;CodeHighlightOff(this, 'coderef-2');&quot;&gt;29行&lt;/a&gt;开始往下三行，是HTML5支持的，分别对应Chrome/Safari,Firefox和Opera。阴影和圆角的CSS。&lt;sup&gt;&lt;a id=&quot;fnr.4&quot; name=&quot;fnr.4&quot; class=&quot;footref&quot; href=&quot;#fn.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.9&lt;/span&gt; 导出&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;
&lt;p&gt;
Emacs可以导出HTML,PDF等格式，Ctrl+c Ctrl+e后自己选择吧！效果嘛，直接看此文了！^-^&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 结束&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
这些功能对于记笔记是够用了。我现在还配合PKM2来抓网络资料。然后将链接添加到Emacs里面。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
这篇文章就是用Emacs编写的。效果自己看吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; name=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
在输入Ctrl+x Ctrl+f后，Windows下总是显示C:\Documents and Settings\Administrator这个路径。可以无视，直接输入你的绝对路径即可，tab能够提示补全。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; name=&quot;fn.3&quot; class=&quot;footnum&quot; href=&quot;#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
*后面是有个空格的,*一定要在行首，前面不能有空格。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.4&quot; name=&quot;fn.4&quot; class=&quot;footnum&quot; href=&quot;#fnr.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
这里的代码染色功能，需要htmlize.el来处理的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        <summary type="html">&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. Emacs Org-mode能干什么&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;2.1. 进入Org-mode模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;2.2. 目录树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;2.3. Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-4&quot;&gt;2.4. 链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-5&quot;&gt;2.5. 脚注&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-6&quot;&gt;2.6. 表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-7&quot;&gt;2.7. &lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp&quot;&gt;&amp;lt;2010-08-25 星期三&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-7-1&quot;&gt;2.7.1. 时间控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-7-2&quot;&gt;2.7.2. 多选任务列表 &lt;code&gt;[50%]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-8&quot;&gt;2.8. 源代码染色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-9&quot;&gt;2.9. 导出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. 结束&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
一直在寻找一个记笔记的软件，但是一直没有找到合适的。&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;本来用的Evernote,优点是平台众多，Windows,Mac,Mobile都有（Linux没有,Android手机没有离线浏览功能）。但是改成.net开发后，资源占用大得惊人。而且网页抓取是有问题的。如下图
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;img src=&quot;assets/wpid-01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;assets/wpid-02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;又试了PKM2，也不是很满意。抓取网页效果不错，比Evernote效果好。不满意的是它保存附件的方式，全都放到了一个文件夹里面。如果我想单独找附件的话几乎不可能。只能通过PKM打开，点击附件链接才行。
&lt;/li&gt;
&lt;li&gt;Vim快速修改程序倒是很爽。记笔记功能单一了点，基本只能记录文本文件。
&lt;/li&gt;
&lt;li&gt;最后决定用Emacs的org-mode。至少基本功能都适合了。&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Emacs Org-mode能干什么&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 进入Org-mode模式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
Ctrl+x Ctrl+f输入文件名新建一个.org的文件，就自动进入了org-mode模式了。&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; name=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 目录树&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
    Emacs建立目录树是很简单的。使用* &lt;sup&gt;&lt;a id=&quot;fnr.3&quot; name=&quot;fnr.3&quot; class=&quot;footref&quot; href=&quot;#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;就可以了。一级是一个*，二级是两个*，以此类推。当你导出以后会自动的生成目录链接。&lt;br /&gt;
在Emacs里面使用Shift+Tab键可以收起所有的目录树，再按Tab可以依次展开。Alt+左右方向键是减少/增加当前节点的层级.Alt+Shift+左右方向键&lt;br /&gt;
可以将效果作用到子节点上。Alt+上下键可以移动节点。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; Tag&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
当目录树的节点越来越多时，查找就不方便了，这时候可以给节点添加Tag。光标到节点上，Ctrl+c两次，就会提醒你输入tag添加即可。要查询tag，Ctrl+c \就可以了。&lt;br /&gt;
&lt;img src=&quot;assets/wpid-03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; 链接&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;
    按下Ctrl+c Ctrl+l就可以添加一个链接，可以链接任何文件。只要输入绝对路径或相对路径即可。上图就是我的一个Index.org，专门链接其他文件的，作为目录使用。&lt;br /&gt;
对于图片来说，如果不给图片添加描述的话，在导出的时候，Emacs会自动显示图片，如果添加了描述则是超链接形式了。链接文件的名称，位置都由我来控制，即使我不使用Emacs了，我依然能到目录里面找到需要的文件。&lt;br /&gt;
在链接处Ctrl+c Ctrl+o就能打开链接文件。不过可惜啊，在Windows下面，Emacs打开不了图片和pdf，打开都是乱码。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; 脚注&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;
Ctrl+c Ctrl+x f会自动给光标处添加一个脚注。我已经在上面添加了几个脚注了。添加完脚注，再按一次Ctrl+c Ctrl+x f就会回到原来添加脚注的地方。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.6&lt;/span&gt; 表格&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p&gt;
试了一下，Emacs添加表格很方便。输入使用|分隔即可。多试试Tab键就知道了。下面看看效果。&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;表头1&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;表头2&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;表头3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;表体11&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体12&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;表体21&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体22&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表体33&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
这是源码&lt;img src=&quot;assets/wpid-04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;br /&gt;
样式是我自己定义的，下面再说。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.7&lt;/span&gt; &lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; &lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp&quot;&gt;&amp;lt;2010-08-25 星期三&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;
&lt;p&gt;
可以做计划列表，名字特定为TODO，全部大写。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-7-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-7-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.7.1&lt;/span&gt; 时间控制&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-7-1&quot;&gt;
&lt;p&gt;
Ctrl+c Ctrl+s 插入计划时间，Ctrl+c Ctrl+d插入最后时间，Ctrl+c .插入时间戳&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-7-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-7-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.7.2&lt;/span&gt; 多选任务列表 &lt;code&gt;[50%]&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-7-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 就是一个多选按钮了，在这一行按两次Ctrl+c就会选中此项。再按两次取消。在节点上加入&lt;code&gt;[%]&lt;/code&gt;就会按照半分比来显示完成情况。&lt;code&gt;[/]&lt;/code&gt;按照数量来显示完成情况。自己试试吧。
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 第二个多选按钮，选中了。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.8&lt;/span&gt; 源代码染色&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;p&gt;
直接看效果吧！这是我给Emacs添加的自定义css,生成HTML的时候用的。&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;&amp;lt;style type=&lt;/span&gt;&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span style=&quot;color: #268bd2;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #268bd2;&quot;&gt;body&lt;/span&gt;{
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font-size&lt;/span&gt;:12px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:0px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;:0px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;:#666666;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font-family&lt;/span&gt;:&lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;trebuchet ms&quot;&lt;/span&gt;,arial,helvetica,sans-serif;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;background-color&lt;/span&gt;:#F8F8F8;
        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        a:link,a:visited&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;text-decoration&lt;/span&gt;:none;&lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;: #5489DE;}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        a:hover&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;:#FD0085;&lt;span style=&quot;color: #268bd2;&quot;&gt;text-decoration&lt;/span&gt;:none;}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        #content &lt;/span&gt;{
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;text-align&lt;/span&gt;:left;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;width&lt;/span&gt;:958px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;background&lt;/span&gt;:#FFF;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-color&lt;/span&gt;:#DDD;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-style&lt;/span&gt;:solid;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-width&lt;/span&gt;:1px 1px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:0 auto; 
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin-top&lt;/span&gt;:15px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin-bottom&lt;/span&gt;:15px;

&lt;span id=&quot;coderef-1&quot; class=&quot;coderef-off&quot;&gt;                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-moz-border-radius&lt;/span&gt;: 15px;&lt;/span&gt;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-webkit-border-radius&lt;/span&gt;: 15px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;border-radius&lt;/span&gt;: 15px;

&lt;span id=&quot;coderef-2&quot; class=&quot;coderef-off&quot;&gt;                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-webkit-box-shadow&lt;/span&gt;: 10px 10px 25px #ccc;&lt;/span&gt;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;-moz-box-shadow&lt;/span&gt;: 10px 10px 25px #ccc;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;box-shadow&lt;/span&gt;: 10px 10px 25px #ccc;


        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        #postamble&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin-top&lt;/span&gt;:15px}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        #org-div-home-and-up&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin-right&lt;/span&gt;:10px;&lt;span style=&quot;color: #268bd2;&quot;&gt;margin-top&lt;/span&gt;:5px}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        .title&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;:#666666}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        .src,.example&lt;/span&gt;{
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;: 5px 10px;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;font-size&lt;/span&gt;: small
        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        p&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;: 5px 10px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        h2&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 5px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        h3&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 10px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        h4&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 15px}
&lt;span style=&quot;color: #268bd2;&quot;&gt;        img&lt;/span&gt;{&lt;span style=&quot;color: #268bd2;&quot;&gt;max-width&lt;/span&gt;:940px; &lt;span style=&quot;color: #268bd2;&quot;&gt;width&lt;/span&gt;:expression(document.body.clientWidth &amp;gt; 940? &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;940px&quot;&lt;/span&gt;: &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;auto&quot;&lt;/span&gt; );&lt;span style=&quot;color: #268bd2;&quot;&gt;margin&lt;/span&gt;:5px 5px}

&lt;span style=&quot;color: #268bd2;&quot;&gt;        table&lt;/span&gt;{
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;: 0;
                        &lt;span style=&quot;color: #268bd2;&quot;&gt;margin-left&lt;/span&gt;:15px;
        }

&lt;span style=&quot;color: #268bd2;&quot;&gt;        th &lt;/span&gt;{
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font&lt;/span&gt;: bold 12px &lt;span style=&quot;color: #2aa198;&quot;&gt;&quot;Trebuchet MS&quot;&lt;/span&gt;, Verdana, Arial, Helvetica, sans-serif;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;: #4f6b72;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;border&lt;/span&gt;: 1px solid #C1DAD7;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;letter-spacing&lt;/span&gt;: 2px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;text-align&lt;/span&gt;: center;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;: 6px 6px 6px 12px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;background&lt;/span&gt;: #CAE8EA  no-repeat;
          }
&lt;span style=&quot;color: #268bd2;&quot;&gt;         td &lt;/span&gt;{
                &lt;span style=&quot;color: #268bd2;&quot;&gt;border&lt;/span&gt;: 1px solid #C1DAD7;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;background&lt;/span&gt;: #fff;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;font-size&lt;/span&gt;:11px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;padding&lt;/span&gt;: 6px 6px 6px 12px;
                &lt;span style=&quot;color: #268bd2;&quot;&gt;color&lt;/span&gt;: #4f6b72;
          }
&amp;lt;/style&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href=&quot;#coderef-1&quot; class=&quot;coderef&quot; onmouseover=&quot;CodeHighlightOn(this, 'coderef-1');&quot; onmouseout=&quot;CodeHighlightOff(this, 'coderef-1');&quot;&gt;25行&lt;/a&gt;和&lt;a href=&quot;#coderef-2&quot; class=&quot;coderef&quot; onmouseover=&quot;CodeHighlightOn(this, 'coderef-2');&quot; onmouseout=&quot;CodeHighlightOff(this, 'coderef-2');&quot;&gt;29行&lt;/a&gt;开始往下三行，是HTML5支持的，分别对应Chrome/Safari,Firefox和Opera。阴影和圆角的CSS。&lt;sup&gt;&lt;a id=&quot;fnr.4&quot; name=&quot;fnr.4&quot; class=&quot;footref&quot; href=&quot;#fn.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.9&lt;/span&gt; 导出&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;
&lt;p&gt;
Emacs可以导出HTML,PDF等格式，Ctrl+c Ctrl+e后自己选择吧！效果嘛，直接看此文了！^-^&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 结束&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
这些功能对于记笔记是够用了。我现在还配合PKM2来抓网络资料。然后将链接添加到Emacs里面。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
这篇文章就是用Emacs编写的。效果自己看吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; name=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
在输入Ctrl+x Ctrl+f后，Windows下总是显示C:\Documents and Settings\Administrator这个路径。可以无视，直接输入你的绝对路径即可，tab能够提示补全。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; name=&quot;fn.3&quot; class=&quot;footnum&quot; href=&quot;#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
*后面是有个空格的,*一定要在行首，前面不能有空格。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.4&quot; name=&quot;fn.4&quot; class=&quot;footnum&quot; href=&quot;#fnr.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
&lt;p class=&quot;footpara&quot;&gt;
这里的代码染色功能，需要htmlize.el来处理的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary>
    </entry>
    

</feed>