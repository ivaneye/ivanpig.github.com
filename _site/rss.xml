<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>IvanPig's Blog</title>
    <link href="http://ivanpig.github.io/rss.xml" rel="self"/>
    <link href="http://ivanpig.github.io/"/>
    <updated>2014-11-29T23:17:09+08:00</updated>
    <id>http://ivanpig.github.io/</id>
    <author>
        <name>Ivan</name>
        <email>ivan.pig@foxmail.com</email>
    </author>

    
    <entry>
        <title>Java基础</title>
        <link href="http://ivanpig.github.io/train/javabasic.html"/>
        <updated>2014-11-29T00:00:00+08:00</updated>
        <id>http://ivanpig.github.io//train/javabasic</id>
        <content type="html">&lt;h1&gt;#&lt;/h1&gt;

&lt;p&gt;一种记录、分析、总结、组织、讨论及解释信息的、有插图或无插图的、硬抄或平装的、加套或不加套的，包含有前言、介绍、目录表、索引的用以增长知识、加深理解、提升并教育人类大脑的装置，该装置需要视觉、有触碰的感官形式使用。&lt;/p&gt;

&lt;h2&gt;请解释如下单词&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;人&lt;/li&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;美&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;什么是编程语言？&lt;/h2&gt;

&lt;p&gt;和自然语言一样，编程语言是对现实世界的抽象。&lt;/p&gt;

&lt;h2&gt;从多项式开始&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 + 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请找出如上多项式的共同点&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;数学上的处理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;令 a = 1 + 1,b = 1 + 2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1       =&gt;    (1 + 1) - 1  =&gt;  a - 1  =&gt; 1 * a + (-1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 + 1   =&gt;    a   =&gt;  1 * a + (0 * a)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 1)    =&gt;   3 * a + a&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 2)    =&gt;   3 * a + b&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;映射到Java上&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;int a = 1 + 1;&lt;/li&gt;
&lt;li&gt;int b = 1 + 2;&lt;/li&gt;
&lt;li&gt;a,b称为变量，类似自然语言中的代词。变量是编程语言中最基本的抽象&lt;/li&gt;
&lt;li&gt;1称为字面量&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Java环境搭建&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;到&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle官方网站&lt;/a&gt;下载相应操作系统的JDK进行安装&lt;/li&gt;
&lt;li&gt;打开命令行,输入&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
java version &quot;1.8.0&quot;
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;路径&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;path是系统查找程序的路径&lt;/li&gt;
&lt;li&gt;classpath是Java查找类的路径&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请从服务器下载jdk,并进行安装&lt;/li&gt;
&lt;li&gt;验证安装是否成功&lt;/li&gt;
&lt;li&gt;修改path,理解path的作用&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;编辑器选择&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;文本编辑器&lt;/li&gt;
&lt;li&gt;Notepad++&lt;/li&gt;
&lt;li&gt;Editplus&lt;/li&gt;
&lt;li&gt;UltraEdit&lt;/li&gt;
&lt;li&gt;TextMate&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;学习曲线&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请从服务器下载Notepad++,并打开&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;IDE选择&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;eclipse&lt;/li&gt;
&lt;li&gt;Netbeans&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intellij IDEA&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;课后请下载eclipse和netbeans并安装到本机&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;第一个程序&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;创建文件Hello.java&lt;/li&gt;
&lt;li&gt;输入如下代码&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
//例子代码
public class Hello{
    public static void main(String[] args){
        int a = 1 + 1;
        int b = 1 + 2;
        System.out.println(&quot;(1 + 1) * 3 + (1 + 2) = &quot; + (a * 3 + b));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;打开命令行,切换到文件所在路径&lt;/li&gt;
&lt;li&gt;输入javac Hello.java&lt;/li&gt;
&lt;li&gt;输入java Hello&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请按步骤,新建Hello.java程序,并运行&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;运行机制&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;思考,Java如何做到跨平台?&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;#&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;代码组成&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
//例子代码
public class Hello{
    public static void main(String[] args){
        int a = 1 + 1;
        int b = 1 + 2;
        System.out.println(&quot;(1 + 1) * 3 + (1 + 2) = &quot; + (a * 3 + b));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;标识符(Hello,args)&lt;/li&gt;
&lt;li&gt;关键字(public,class,static,void)&lt;/li&gt;
&lt;li&gt;字面量(字符串) (&quot;(1 + 1) * 3 + (1 + 2) = &quot;)&lt;/li&gt;
&lt;li&gt;变量(args,a,b)&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;注释&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
//单行注释
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
/*
多行注释
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
/**
 * javadoc注释
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;标识符&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;标识符由字母（A-Z或者a-z）,美元符（\$）、下划线（_）或数字组成&lt;/li&gt;
&lt;li&gt;标识符都应该以字母（A-Z或者a-z）,美元符（\$）、或者下划线（_）开始&lt;/li&gt;
&lt;li&gt;关键字不能用作标识符&lt;/li&gt;
&lt;li&gt;标识符是大小写敏感的&lt;/li&gt;
&lt;li&gt;合法标识符举例：age、\$salary、~value~、_~1value~&lt;/li&gt;
&lt;li&gt;非法标识符举例：123abc、-salary&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;关键字&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;字面量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;字符串:&quot;Hello&quot;&lt;/li&gt;
&lt;li&gt;字符:'H','e','l','l','o'&lt;/li&gt;
&lt;li&gt;布尔值:true,false&lt;/li&gt;
&lt;li&gt;数值:1,2.4&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;变量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;变量就是一个命名的内存块&lt;/li&gt;
&lt;li&gt;变量只能存储一种具体类型的数据&lt;/li&gt;
&lt;li&gt;使用变量之前必须声明(变量名和类型)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用前需要初始化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局部变量:方法或语句块内部&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;成员变量:方法外,类内部&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;类和对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;类是对一个特定类型对象的描述,它定义了一种新的类型&lt;/li&gt;
&lt;li&gt;类定义中的成员变量可以是任意类型&lt;/li&gt;
&lt;li&gt;对象是类的实体,使用关键字new来创建&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;实例方法&lt;/li&gt;
&lt;li&gt;静态方法(static)&lt;/li&gt;
&lt;li&gt;方法调用[递归调用]&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Hello{
    public static void main(String[] args){
        System.out.println(&quot;Hello&quot;);
        Hello.main(null);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;基本类型&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;使用递归来计算基本类型的范围&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test{
    public static long p(int num){
        if(num == 0) return 1;
        return 2 * p(--num);  //--num 与 num--
    }

    public static long caculateRange(int num){
        if(num == 0) return 1;
        return p(num) + caculateRange(--num);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;数组&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;数组是相同类型的,用一个标示符名称封装到一起的一个对象序列或基本类型数据序列&lt;/p&gt;

&lt;h2&gt;一维数组&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
int[] arr;
int arr[];
//初始化
arr = {1,2,3};
arr = new int[3];  //默认初始化
//使用,下标从0开始
arr[0];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;多维数组&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
int[][] arr = { {1,2,3},{4,5,6}};
int[][][] arr = new int[2][3][4];
//每一维长度可以不同
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;运算符(操作符)&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;运算符指明对操作数的运算方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;关系运算符&lt;/li&gt;
&lt;li&gt;位运算符&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;li&gt;其他运算符&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;算术运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
+    加法 - 相加运算符两侧的值
-    减法 - 左操作数减去右操作数
*    乘法 - 相乘操作符两侧的值
/    除法 - 左操作数除以右操作数
%    取模 - 右操作数除左操作数的余数
++   自增 - 操作数的值增加1
-    自减 - 操作数的值减少1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     int c = 25;
     int d = 25;
     System.out.println(&quot;a + b = &quot; + (a + b) );
     System.out.println(&quot;a - b = &quot; + (a - b) );
     System.out.println(&quot;a * b = &quot; + (a * b) );
     System.out.println(&quot;b / a = &quot; + (b / a) );
     System.out.println(&quot;b % a = &quot; + (b % a) );
     System.out.println(&quot;c % a = &quot; + (c % a) );
     System.out.println(&quot;a++   = &quot; +  (a++) );
     System.out.println(&quot;b--   = &quot; +  (a--) );
     System.out.println(&quot;d++   = &quot; +  (d++) );
     System.out.println(&quot;++d   = &quot; +  (++d) );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;关系运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
==   检查如果两个操作数的值是否相等，如果相等则条件为真
=!   检查如果两个操作数的值是否相等，如果值不相等则条件为真
&amp;gt;    检查左操作数的值是否大于右操作数的值，如果是那么条件为真
&amp;lt;    检查左操作数的值是否小于右操作数的值，如果是那么条件为真
&amp;gt;=   检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真
&amp;lt;=   检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     System.out.println(&quot;a == b = &quot; + (a == b) );
     System.out.println(&quot;a != b = &quot; + (a != b) );
     System.out.println(&quot;a &amp;gt; b = &quot; + (a &amp;gt; b) );
     System.out.println(&quot;a &amp;lt; b = &quot; + (a &amp;lt; b) );
     System.out.println(&quot;b &amp;gt;= a = &quot; + (b &amp;gt;= a) );
     System.out.println(&quot;b &amp;lt;= a = &quot; + (b &amp;lt;= a) );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;位运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
&amp;amp;    按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1
|    按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1
^    按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1
~    按位补运算符翻转操作数的每一位
&amp;lt;&amp;lt;   按位左移运算符。左操作数按位左移右操作数指定的位数
&amp;gt;&amp;gt;   按位右移运算符。左操作数按位右移右操作数指定的位数
&amp;gt;&amp;gt;&amp;gt;      按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 60; /* 60 = 0011 1100 */
     int b = 13; /* 13 = 0000 1101 */
     int c = 0;
     c = a &amp;amp; b;       /* 12 = 0000 1100 */
     System.out.println(&quot;a &amp;amp; b = &quot; + c );
     c = a | b;       /* 61 = 0011 1101 */
     System.out.println(&quot;a | b = &quot; + c );
     c = a ^ b;       /* 49 = 0011 0001 */
     System.out.println(&quot;a ^ b = &quot; + c );
     c = ~a;          /*-61 = 1100 0011 */
     System.out.println(&quot;~a = &quot; + c );
     c = a &amp;lt;&amp;lt; 2;     /* 240 = 1111 0000 */
     System.out.println(&quot;a &amp;lt;&amp;lt; 2 = &quot; + c );
     c = a &amp;gt;&amp;gt; 2;     /* 215 = 1111 */
     System.out.println(&quot;a &amp;gt;&amp;gt; 2  = &quot; + c );
     c = a &amp;gt;&amp;gt;&amp;gt; 2;     /* 215 = 0000 1111 */
     System.out.println(&quot;a &amp;gt;&amp;gt;&amp;gt; 2 = &quot; + c );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;逻辑运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
&amp;amp;&amp;amp;   称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真
||   称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真
!    称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     boolean a = true;
     boolean b = false;
     System.out.println(&quot;a &amp;amp;&amp;amp; b = &quot; + (a&amp;amp;&amp;amp;b));
     System.out.println(&quot;a || b = &quot; + (a||b) );
     System.out.println(&quot;!(a &amp;amp;&amp;amp; b) = &quot; + !(a &amp;amp;&amp;amp; b));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;赋值运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
=    简单的赋值运算符，将右操作数的值赋给左侧操作数
+=   加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数
-=   减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数
*=   乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数
/=   除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数
%=   取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数
&amp;lt;&amp;lt;=  左移位赋值运算符
&amp;gt;&amp;gt;=  右移位赋值运算符
&amp;amp;=   按位与赋值运算符
^=   按位异或赋值操作符
|=   按位或赋值操作符
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 10; int b = 20; int c = 0; c = a + b;
     System.out.println(&quot;c = a + b = &quot; + c );
     c += a ;
     System.out.println(&quot;c += a  = &quot; + c );
     c -= a ;
     System.out.println(&quot;c -= a = &quot; + c );
     c *= a ;
     System.out.println(&quot;c *= a = &quot; + c );
     a = 10; c = 15; c /= a ;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;三目运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
variable x = (expression) ? value if true : value if false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
        int a , b;
        a = 10;
        b = (a == 1) ? 20: 30;
        System.out.println( &quot;Value of b is : &quot; +  b );
        b = (a == 10) ? 20: 30;
        System.out.println( &quot;Value of b is : &quot; + b );
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;instanceof&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
( Object reference variable ) instanceof  (class/interface type)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
&quot;James&quot; instanceof String;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;运算符优先级&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
后缀     () [] . (点操作符)
一元   ++ - ！ ~
乘性   * / %
加性   + -
移位   &amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;  &amp;lt;&amp;lt;
关系   &amp;gt;&amp;gt; = &amp;lt;&amp;lt; =
相等   ==  !=
按位与  &amp;amp;
按位异或     ^
按位或  |
逻辑与  &amp;amp;&amp;amp;
逻辑或  ||
条件   ? ：
赋值   = += -= *= /= %= &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= ＆= ^= |=
逗号   ,
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;控制执行流程&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;if-else&lt;/li&gt;
&lt;li&gt;switch&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do-while&lt;/li&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;if&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
if(布尔表达式) {
   //如果布尔表达式为true将执行的语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 10;
      if( x &amp;lt; 20 ){
         System.out.print(&quot;这是 if 语句&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;if...else&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
if(布尔表达式){
   //如果布尔表达式的值为true
}else{
   //如果布尔表达式的值为false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 30;
      if( x &amp;lt; 20 ){
         System.out.print(&quot;这是 if 语句&quot;);
      }else{
         System.out.print(&quot;这是 else 语句&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;if...else if...else&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
if(布尔表达式 1){
   //如果布尔表达式 1的值为true执行代码
}else if(布尔表达式 2){
   //如果布尔表达式 2的值为true执行代码
}else if(布尔表达式 3){
   //如果布尔表达式 3的值为true执行代码
}else {
   //如果以上布尔表达式都不为true执行代码
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 30;
      if( x == 10 ){
         System.out.print(&quot;Value of X is 10&quot;);
      }else if( x == 20 ){
         System.out.print(&quot;Value of X is 20&quot;);
      }else if( x == 30 ){
         System.out.print(&quot;Value of X is 30&quot;);
      }else{
         System.out.print(&quot;This is else statement&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;if嵌套&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 30;
      int y = 10;
      if( x == 30 ){
         if( y == 10 ){
             System.out.print(&quot;X = 30 and Y = 10&quot;);
          }
       }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;switch&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
switch(expression){
    case value :
       //语句
       break; //可选
    case value :
       //语句
       break; //可选
    //你可以有任意数量的case语句
    default : //可选
       //语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;switch语句中的变量类型只能为byte、short、int或者char,enum.
&lt;strong&gt;JDK7开始支持String&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;switch语句可以拥有多个case语句。每个case后面跟一个要比较的值和冒号。&lt;/li&gt;
&lt;li&gt;case语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。&lt;/li&gt;
&lt;li&gt;当变量的值与case语句的值相等时，那么case语句之后的语句开始执行，直到break语句出现才会跳出switch语句。&lt;/li&gt;
&lt;li&gt;当遇到break语句时，switch语句终止。程序跳转到switch语句后面的语句执行。&lt;/li&gt;
&lt;li&gt;switch语句可以包含一个default分支，该分支必须是switch语句的最后一个分支。default在没有case语句的值和变量值相等的时候执行。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      char grade = 'C';
      switch(grade) {
         case 'A' :
            System.out.println(&quot;Excellent!&quot;);
            break;
         case 'B' :
         case 'C' :
            System.out.println(&quot;Well done&quot;);
            break;
         case 'D' :
            System.out.println(&quot;You passed&quot;);
         case 'F' :
            System.out.println(&quot;Better try again&quot;);
            break;
         default :
            System.out.println(&quot;Invalid grade&quot;);
      }
      System.out.println(&quot;Your grade is &quot; + grade);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;while&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
while( 布尔表达式 ) {
    //循环内容
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      int x = 10;
      while( x &amp;lt; 20 ) {
         System.out.print(&quot;value of x : &quot; + x );
         x++;
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;do-while&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
do {
       //代码语句
}while(布尔表达式);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 10;
      do{
         System.out.print(&quot;value of x : &quot; + x );
         x++;
         System.out.print(&quot;\n&quot;);
      }while( x &amp;lt; 20 );
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;for&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
for(初始化; 布尔表达式; 更新) {
    //代码语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;最先执行初始化步骤。可以声明并初始化一个或多个循环控制变量，也可以是空语句。&lt;/li&gt;
&lt;li&gt;然后，检测布尔表达式的值。如果为true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。&lt;/li&gt;
&lt;li&gt;执行一次循环后，更新循环控制变量。&lt;/li&gt;
&lt;li&gt;再次检测布尔表达式。循环执行上面的过程。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      for(int x = 10; x &amp;lt; 20; x = x+1) {
         System.out.print(&quot;value of x : &quot; + x );
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;foreach&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
for(声明语句 : 表达式) {
   //代码句子
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int[] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers){
         System.out.print( x );
         System.out.print(&quot;,&quot;);
      }
      System.out.print(&quot;\n&quot;);

      String[] names ={&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;};
      for(String name : names) {
         System.out.print( name );
         System.out.print(&quot;,&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;break&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};

      for(int x : numbers) {
         if(x == 30) {
          break;
         }
         System.out.print(x);
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;continue&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers) {
         if(x == 30) {
          continue;
         }
         System.out.print(x);
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;labeled break与labeled continue&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
        int [] numbers = {10, 20, 30, 40, 50};
        outer: for(int x : numbers) {
            for(int i = 1;i &amp;lt; 3;i++) {
                if (x == 30) {
                    break outer;
                }
                System.out.print(x);
                System.out.print(&quot;\n&quot;);
            }
            System.out.println(&quot;outer&quot; + x);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;return&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;跳出当前方法,并返回方法所需要的值(如果有返回值的话)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用数组计算矩阵乘法&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test{
    public static void main(String[] args){
        int[][] a = { {1,0,2},{-1,3,1}};
        int[][] b = { {3,1},{2,1},{1,0}};
        int[][] c = new int[2][2];
        for(int i = 0; i &amp;lt; 2;i++){
            int tmp = 0;
            int tmp2 = 0;
            for(int j = 0;j &amp;lt; 3;j++){
                tmp += a[i][j] * b[j][i];
                tmp2 += a[i][j] * b[j][1-i];
            }
            c[i][i] = tmp;
            c[i][1-i]=tmp2;
        }
        System.out.println(c[0][0]);
        System.out.println(c[0][1]);
        System.out.println(c[1][0]);
        System.out.println(c[1][1]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;课后作业&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;理解path与classpath&lt;/li&gt;
&lt;li&gt;请任意修改hello world,并尝试编译运行!如报错,请尝试理解报错信息!&lt;/li&gt;
&lt;li&gt;请编写程序,打印如下图形.你能想出几种方法?你认为最简单的方法是哪种?&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
  1
 111
11111
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;请使用循环和递归分别实现斐波那契数列&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
1 1 2 3 5 8 13 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;本机安装eclipse,并在eclipse中运行hello world&lt;/li&gt;
&lt;li&gt;请到网上搜索面向对象编程,尝试理解面向对象编程,及其与面向过程编程的区别&lt;/li&gt;
&lt;/ul&gt;

</content>
        <summary type="html">&lt;h1&gt;#&lt;/h1&gt;

&lt;p&gt;一种记录、分析、总结、组织、讨论及解释信息的、有插图或无插图的、硬抄或平装的、加套或不加套的，包含有前言、介绍、目录表、索引的用以增长知识、加深理解、提升并教育人类大脑的装置，该装置需要视觉、有触碰的感官形式使用。&lt;/p&gt;

&lt;h2&gt;请解释如下单词&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;人&lt;/li&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;美&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;什么是编程语言？&lt;/h2&gt;

&lt;p&gt;和自然语言一样，编程语言是对现实世界的抽象。&lt;/p&gt;

&lt;h2&gt;从多项式开始&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 + 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请找出如上多项式的共同点&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;数学上的处理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;令 a = 1 + 1,b = 1 + 2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1       =&gt;    (1 + 1) - 1  =&gt;  a - 1  =&gt; 1 * a + (-1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 + 1   =&gt;    a   =&gt;  1 * a + (0 * a)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 1)    =&gt;   3 * a + a&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(1 + 1) * 3 + (1 + 2)    =&gt;   3 * a + b&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;映射到Java上&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;int a = 1 + 1;&lt;/li&gt;
&lt;li&gt;int b = 1 + 2;&lt;/li&gt;
&lt;li&gt;a,b称为变量，类似自然语言中的代词。变量是编程语言中最基本的抽象&lt;/li&gt;
&lt;li&gt;1称为字面量&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Java环境搭建&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;到&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle官方网站&lt;/a&gt;下载相应操作系统的JDK进行安装&lt;/li&gt;
&lt;li&gt;打开命令行,输入&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
java version &quot;1.8.0&quot;
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;路径&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;path是系统查找程序的路径&lt;/li&gt;
&lt;li&gt;classpath是Java查找类的路径&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请从服务器下载jdk,并进行安装&lt;/li&gt;
&lt;li&gt;验证安装是否成功&lt;/li&gt;
&lt;li&gt;修改path,理解path的作用&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;编辑器选择&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;文本编辑器&lt;/li&gt;
&lt;li&gt;Notepad++&lt;/li&gt;
&lt;li&gt;Editplus&lt;/li&gt;
&lt;li&gt;UltraEdit&lt;/li&gt;
&lt;li&gt;TextMate&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;学习曲线&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请从服务器下载Notepad++,并打开&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;IDE选择&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;eclipse&lt;/li&gt;
&lt;li&gt;Netbeans&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intellij IDEA&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;课后请下载eclipse和netbeans并安装到本机&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;第一个程序&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;创建文件Hello.java&lt;/li&gt;
&lt;li&gt;输入如下代码&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
//例子代码
public class Hello{
    public static void main(String[] args){
        int a = 1 + 1;
        int b = 1 + 2;
        System.out.println(&quot;(1 + 1) * 3 + (1 + 2) = &quot; + (a * 3 + b));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;打开命令行,切换到文件所在路径&lt;/li&gt;
&lt;li&gt;输入javac Hello.java&lt;/li&gt;
&lt;li&gt;输入java Hello&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请按步骤,新建Hello.java程序,并运行&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;运行机制&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;思考,Java如何做到跨平台?&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;#&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;代码组成&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
//例子代码
public class Hello{
    public static void main(String[] args){
        int a = 1 + 1;
        int b = 1 + 2;
        System.out.println(&quot;(1 + 1) * 3 + (1 + 2) = &quot; + (a * 3 + b));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;标识符(Hello,args)&lt;/li&gt;
&lt;li&gt;关键字(public,class,static,void)&lt;/li&gt;
&lt;li&gt;字面量(字符串) (&quot;(1 + 1) * 3 + (1 + 2) = &quot;)&lt;/li&gt;
&lt;li&gt;变量(args,a,b)&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;注释&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
//单行注释
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
/*
多行注释
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
/**
 * javadoc注释
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;标识符&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;标识符由字母（A-Z或者a-z）,美元符（\$）、下划线（_）或数字组成&lt;/li&gt;
&lt;li&gt;标识符都应该以字母（A-Z或者a-z）,美元符（\$）、或者下划线（_）开始&lt;/li&gt;
&lt;li&gt;关键字不能用作标识符&lt;/li&gt;
&lt;li&gt;标识符是大小写敏感的&lt;/li&gt;
&lt;li&gt;合法标识符举例：age、\$salary、~value~、_~1value~&lt;/li&gt;
&lt;li&gt;非法标识符举例：123abc、-salary&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;关键字&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;字面量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;字符串:&quot;Hello&quot;&lt;/li&gt;
&lt;li&gt;字符:'H','e','l','l','o'&lt;/li&gt;
&lt;li&gt;布尔值:true,false&lt;/li&gt;
&lt;li&gt;数值:1,2.4&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;变量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;变量就是一个命名的内存块&lt;/li&gt;
&lt;li&gt;变量只能存储一种具体类型的数据&lt;/li&gt;
&lt;li&gt;使用变量之前必须声明(变量名和类型)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用前需要初始化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局部变量:方法或语句块内部&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;成员变量:方法外,类内部&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;类和对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;类是对一个特定类型对象的描述,它定义了一种新的类型&lt;/li&gt;
&lt;li&gt;类定义中的成员变量可以是任意类型&lt;/li&gt;
&lt;li&gt;对象是类的实体,使用关键字new来创建&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;实例方法&lt;/li&gt;
&lt;li&gt;静态方法(static)&lt;/li&gt;
&lt;li&gt;方法调用[递归调用]&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Hello{
    public static void main(String[] args){
        System.out.println(&quot;Hello&quot;);
        Hello.main(null);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;基本类型&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;使用递归来计算基本类型的范围&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test{
    public static long p(int num){
        if(num == 0) return 1;
        return 2 * p(--num);  //--num 与 num--
    }

    public static long caculateRange(int num){
        if(num == 0) return 1;
        return p(num) + caculateRange(--num);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;数组&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;数组是相同类型的,用一个标示符名称封装到一起的一个对象序列或基本类型数据序列&lt;/p&gt;

&lt;h2&gt;一维数组&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
int[] arr;
int arr[];
//初始化
arr = {1,2,3};
arr = new int[3];  //默认初始化
//使用,下标从0开始
arr[0];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;多维数组&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
int[][] arr = { {1,2,3},{4,5,6}};
int[][][] arr = new int[2][3][4];
//每一维长度可以不同
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;运算符(操作符)&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;运算符指明对操作数的运算方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;关系运算符&lt;/li&gt;
&lt;li&gt;位运算符&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;li&gt;其他运算符&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;算术运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
+    加法 - 相加运算符两侧的值
-    减法 - 左操作数减去右操作数
*    乘法 - 相乘操作符两侧的值
/    除法 - 左操作数除以右操作数
%    取模 - 右操作数除左操作数的余数
++   自增 - 操作数的值增加1
-    自减 - 操作数的值减少1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     int c = 25;
     int d = 25;
     System.out.println(&quot;a + b = &quot; + (a + b) );
     System.out.println(&quot;a - b = &quot; + (a - b) );
     System.out.println(&quot;a * b = &quot; + (a * b) );
     System.out.println(&quot;b / a = &quot; + (b / a) );
     System.out.println(&quot;b % a = &quot; + (b % a) );
     System.out.println(&quot;c % a = &quot; + (c % a) );
     System.out.println(&quot;a++   = &quot; +  (a++) );
     System.out.println(&quot;b--   = &quot; +  (a--) );
     System.out.println(&quot;d++   = &quot; +  (d++) );
     System.out.println(&quot;++d   = &quot; +  (++d) );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;关系运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
==   检查如果两个操作数的值是否相等，如果相等则条件为真
=!   检查如果两个操作数的值是否相等，如果值不相等则条件为真
&amp;gt;    检查左操作数的值是否大于右操作数的值，如果是那么条件为真
&amp;lt;    检查左操作数的值是否小于右操作数的值，如果是那么条件为真
&amp;gt;=   检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真
&amp;lt;=   检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     System.out.println(&quot;a == b = &quot; + (a == b) );
     System.out.println(&quot;a != b = &quot; + (a != b) );
     System.out.println(&quot;a &amp;gt; b = &quot; + (a &amp;gt; b) );
     System.out.println(&quot;a &amp;lt; b = &quot; + (a &amp;lt; b) );
     System.out.println(&quot;b &amp;gt;= a = &quot; + (b &amp;gt;= a) );
     System.out.println(&quot;b &amp;lt;= a = &quot; + (b &amp;lt;= a) );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;位运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
&amp;amp;    按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1
|    按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1
^    按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1
~    按位补运算符翻转操作数的每一位
&amp;lt;&amp;lt;   按位左移运算符。左操作数按位左移右操作数指定的位数
&amp;gt;&amp;gt;   按位右移运算符。左操作数按位右移右操作数指定的位数
&amp;gt;&amp;gt;&amp;gt;      按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 60; /* 60 = 0011 1100 */
     int b = 13; /* 13 = 0000 1101 */
     int c = 0;
     c = a &amp;amp; b;       /* 12 = 0000 1100 */
     System.out.println(&quot;a &amp;amp; b = &quot; + c );
     c = a | b;       /* 61 = 0011 1101 */
     System.out.println(&quot;a | b = &quot; + c );
     c = a ^ b;       /* 49 = 0011 0001 */
     System.out.println(&quot;a ^ b = &quot; + c );
     c = ~a;          /*-61 = 1100 0011 */
     System.out.println(&quot;~a = &quot; + c );
     c = a &amp;lt;&amp;lt; 2;     /* 240 = 1111 0000 */
     System.out.println(&quot;a &amp;lt;&amp;lt; 2 = &quot; + c );
     c = a &amp;gt;&amp;gt; 2;     /* 215 = 1111 */
     System.out.println(&quot;a &amp;gt;&amp;gt; 2  = &quot; + c );
     c = a &amp;gt;&amp;gt;&amp;gt; 2;     /* 215 = 0000 1111 */
     System.out.println(&quot;a &amp;gt;&amp;gt;&amp;gt; 2 = &quot; + c );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;逻辑运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
&amp;amp;&amp;amp;   称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真
||   称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真
!    称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     boolean a = true;
     boolean b = false;
     System.out.println(&quot;a &amp;amp;&amp;amp; b = &quot; + (a&amp;amp;&amp;amp;b));
     System.out.println(&quot;a || b = &quot; + (a||b) );
     System.out.println(&quot;!(a &amp;amp;&amp;amp; b) = &quot; + !(a &amp;amp;&amp;amp; b));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;赋值运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
=    简单的赋值运算符，将右操作数的值赋给左侧操作数
+=   加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数
-=   减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数
*=   乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数
/=   除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数
%=   取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数
&amp;lt;&amp;lt;=  左移位赋值运算符
&amp;gt;&amp;gt;=  右移位赋值运算符
&amp;amp;=   按位与赋值运算符
^=   按位异或赋值操作符
|=   按位或赋值操作符
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
  public static void main(String args[]) {
     int a = 10; int b = 20; int c = 0; c = a + b;
     System.out.println(&quot;c = a + b = &quot; + c );
     c += a ;
     System.out.println(&quot;c += a  = &quot; + c );
     c -= a ;
     System.out.println(&quot;c -= a = &quot; + c );
     c *= a ;
     System.out.println(&quot;c *= a = &quot; + c );
     a = 10; c = 15; c /= a ;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;三目运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
variable x = (expression) ? value if true : value if false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
        int a , b;
        a = 10;
        b = (a == 1) ? 20: 30;
        System.out.println( &quot;Value of b is : &quot; +  b );
        b = (a == 10) ? 20: 30;
        System.out.println( &quot;Value of b is : &quot; + b );
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;instanceof&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
( Object reference variable ) instanceof  (class/interface type)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
&quot;James&quot; instanceof String;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;运算符优先级&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.example}&quot;&gt;
后缀     () [] . (点操作符)
一元   ++ - ！ ~
乘性   * / %
加性   + -
移位   &amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;  &amp;lt;&amp;lt;
关系   &amp;gt;&amp;gt; = &amp;lt;&amp;lt; =
相等   ==  !=
按位与  &amp;amp;
按位异或     ^
按位或  |
逻辑与  &amp;amp;&amp;amp;
逻辑或  ||
条件   ? ：
赋值   = += -= *= /= %= &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= ＆= ^= |=
逗号   ,
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;控制执行流程&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;if-else&lt;/li&gt;
&lt;li&gt;switch&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do-while&lt;/li&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;if&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
if(布尔表达式) {
   //如果布尔表达式为true将执行的语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 10;
      if( x &amp;lt; 20 ){
         System.out.print(&quot;这是 if 语句&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;if...else&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
if(布尔表达式){
   //如果布尔表达式的值为true
}else{
   //如果布尔表达式的值为false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 30;
      if( x &amp;lt; 20 ){
         System.out.print(&quot;这是 if 语句&quot;);
      }else{
         System.out.print(&quot;这是 else 语句&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;if...else if...else&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
if(布尔表达式 1){
   //如果布尔表达式 1的值为true执行代码
}else if(布尔表达式 2){
   //如果布尔表达式 2的值为true执行代码
}else if(布尔表达式 3){
   //如果布尔表达式 3的值为true执行代码
}else {
   //如果以上布尔表达式都不为true执行代码
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 30;
      if( x == 10 ){
         System.out.print(&quot;Value of X is 10&quot;);
      }else if( x == 20 ){
         System.out.print(&quot;Value of X is 20&quot;);
      }else if( x == 30 ){
         System.out.print(&quot;Value of X is 30&quot;);
      }else{
         System.out.print(&quot;This is else statement&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;if嵌套&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 30;
      int y = 10;
      if( x == 30 ){
         if( y == 10 ){
             System.out.print(&quot;X = 30 and Y = 10&quot;);
          }
       }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;switch&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
switch(expression){
    case value :
       //语句
       break; //可选
    case value :
       //语句
       break; //可选
    //你可以有任意数量的case语句
    default : //可选
       //语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;switch语句中的变量类型只能为byte、short、int或者char,enum.
&lt;strong&gt;JDK7开始支持String&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;switch语句可以拥有多个case语句。每个case后面跟一个要比较的值和冒号。&lt;/li&gt;
&lt;li&gt;case语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。&lt;/li&gt;
&lt;li&gt;当变量的值与case语句的值相等时，那么case语句之后的语句开始执行，直到break语句出现才会跳出switch语句。&lt;/li&gt;
&lt;li&gt;当遇到break语句时，switch语句终止。程序跳转到switch语句后面的语句执行。&lt;/li&gt;
&lt;li&gt;switch语句可以包含一个default分支，该分支必须是switch语句的最后一个分支。default在没有case语句的值和变量值相等的时候执行。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      char grade = 'C';
      switch(grade) {
         case 'A' :
            System.out.println(&quot;Excellent!&quot;);
            break;
         case 'B' :
         case 'C' :
            System.out.println(&quot;Well done&quot;);
            break;
         case 'D' :
            System.out.println(&quot;You passed&quot;);
         case 'F' :
            System.out.println(&quot;Better try again&quot;);
            break;
         default :
            System.out.println(&quot;Invalid grade&quot;);
      }
      System.out.println(&quot;Your grade is &quot; + grade);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;while&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
while( 布尔表达式 ) {
    //循环内容
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      int x = 10;
      while( x &amp;lt; 20 ) {
         System.out.print(&quot;value of x : &quot; + x );
         x++;
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;do-while&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
do {
       //代码语句
}while(布尔表达式);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int x = 10;
      do{
         System.out.print(&quot;value of x : &quot; + x );
         x++;
         System.out.print(&quot;\n&quot;);
      }while( x &amp;lt; 20 );
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;for&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
for(初始化; 布尔表达式; 更新) {
    //代码语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;最先执行初始化步骤。可以声明并初始化一个或多个循环控制变量，也可以是空语句。&lt;/li&gt;
&lt;li&gt;然后，检测布尔表达式的值。如果为true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。&lt;/li&gt;
&lt;li&gt;执行一次循环后，更新循环控制变量。&lt;/li&gt;
&lt;li&gt;再次检测布尔表达式。循环执行上面的过程。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      for(int x = 10; x &amp;lt; 20; x = x+1) {
         System.out.print(&quot;value of x : &quot; + x );
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;foreach&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
for(声明语句 : 表达式) {
   //代码句子
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]){
      int[] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers){
         System.out.print( x );
         System.out.print(&quot;,&quot;);
      }
      System.out.print(&quot;\n&quot;);

      String[] names ={&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;};
      for(String name : names) {
         System.out.print( name );
         System.out.print(&quot;,&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;break&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};

      for(int x : numbers) {
         if(x == 30) {
          break;
         }
         System.out.print(x);
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;continue&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers) {
         if(x == 30) {
          continue;
         }
         System.out.print(x);
         System.out.print(&quot;\n&quot;);
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;labeled break与labeled continue&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test {
   public static void main(String args[]) {
        int [] numbers = {10, 20, 30, 40, 50};
        outer: for(int x : numbers) {
            for(int i = 1;i &amp;lt; 3;i++) {
                if (x == 30) {
                    break outer;
                }
                System.out.print(x);
                System.out.print(&quot;\n&quot;);
            }
            System.out.println(&quot;outer&quot; + x);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;return&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;跳出当前方法,并返回方法所需要的值(如果有返回值的话)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;课堂练习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用数组计算矩阵乘法&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/home/ivan/my/teach/java/javase/01_basic/file/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;{.java}&quot;&gt;
public class Test{
    public static void main(String[] args){
        int[][] a = { {1,0,2},{-1,3,1}};
        int[][] b = { {3,1},{2,1},{1,0}};
        int[][] c = new int[2][2];
        for(int i = 0; i &amp;lt; 2;i++){
            int tmp = 0;
            int tmp2 = 0;
            for(int j = 0;j &amp;lt; 3;j++){
                tmp += a[i][j] * b[j][i];
                tmp2 += a[i][j] * b[j][1-i];
            }
            c[i][i] = tmp;
            c[i][1-i]=tmp2;
        }
        System.out.println(c[0][0]);
        System.out.println(c[0][1]);
        System.out.println(c[1][0]);
        System.out.println(c[1][1]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;课后作业&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;理解path与classpath&lt;/li&gt;
&lt;li&gt;请任意修改hello world,并尝试编译运行!如报错,请尝试理解报错信息!&lt;/li&gt;
&lt;li&gt;请编写程序,打印如下图形.你能想出几种方法?你认为最简单的方法是哪种?&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
  1
 111
11111
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;请使用循环和递归分别实现斐波那契数列&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
1 1 2 3 5 8 13 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;本机安装eclipse,并在eclipse中运行hello world&lt;/li&gt;
&lt;li&gt;请到网上搜索面向对象编程,尝试理解面向对象编程,及其与面向过程编程的区别&lt;/li&gt;
&lt;/ul&gt;

</summary>
    </entry>
    
    <entry>
        <title>Ivan</title>
        <link href="http://ivanpig.github.io/cat1/cat2/test.html"/>
        <updated>2014-11-28T00:00:00+08:00</updated>
        <id>http://ivanpig.github.io//cat1/cat2/test</id>
        <content type="html">&lt;h1&gt;This is a test&lt;/h1&gt;

&lt;p&gt;Ivan测试页面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Test{
  public static void main(String[] args){
    System.out.println(&quot;aaa&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;(println &quot;Hello&quot;) ;测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/op.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
        <summary type="html">&lt;h1&gt;This is a test&lt;/h1&gt;

&lt;p&gt;Ivan测试页面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Test{
  public static void main(String[] args){
    System.out.println(&quot;aaa&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;(println &quot;Hello&quot;) ;测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/op.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</summary>
    </entry>
    

</feed>
